##############################################################################
#                                                                            #
# IAR dsPIC C/EC++ Compiler V1.30B/W32                 13/Dec/2007  20:41:56 #
# Copyright 2001-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu          =  dsPIC                                                   #
#    Data model   =  Large                                                   #
#    Double size  =  32 bits                                                 #
#                 =                                                          #
#    Source file  =  probe_rs232.c                                           #
#    Command line =  -D__dsPIC33FJ256GP710__ probe_rs232.c                   #
#                    -oC:\Micrium\Software\EVALBO~1\MICROC~1\EXPLOR~1\PIC33F #
#                    ~1\MPLAB_~1\OS-Probe\Output\probe_rs232.r59             #
#                    -fC:\Micrium\Software\EvalBoards\Microchip\Explorer16\P #
#                    IC33FJ256\MPLAB_IAR\OS-Probe\ExtPath.xcl (-I            #
#                    "C:\Program Files\IAR Systems\Embedded Workbench        #
#                    3.2\dsPIC\inc\clib" -I "C:\Program Files\IAR            #
#                    Systems\Embedded Workbench 3.2\dsPIC\inc" -I            #
#                    C:\Micrium\Software\uC-CPU -I                           #
#                    C:\Micrium\Software\uC-CPU\Microchip\PIC33FJ256\MPLAB_I #
#                    AR -I C:\Micrium\Software\uC-LIB -I                     #
#                    C:\Micrium\Software\uCOS-II\Source -I                   #
#                    C:\Micrium\Software\uCOS-II\Ports\Microchip\PIC33FJ256\ #
#                    MPLAB_IAR -I C:\Micrium\Software\uC-Probe\Target\Commun #
#                    ication\Generic\RS-232\Ports\Microchip\dsPIC33\IAR_iccD #
#                    SPIC -I C:\Micrium\Software\uC-Probe\Target\Communicati #
#                    on\Generic\RS-232\Source -I                             #
#                    C:\Micrium\Software\uC-Probe\Target\Communication\Gener #
#                    ic\Source -I C:\Micrium\Software\uC-Probe\Target\Plugin #
#                    s\uCOS-II -I C:\Micrium\Software\EvalBoards\Microchip\E #
#                    xplorer16\PIC33FJ256\MPLAB_IAR\OS-Probe -I              #
#                    C:\Micrium\Software\EvalBoards\Microchip\Explorer16\PIC #
#                    33FJ256\MPLAB_IAR\BSP) -r -e --data_model=l --cpu=0     #
#                    -lc . -la . -z9 --no_cse --no_unroll --no_inline        #
#                    --no_code_motion                                        #
#    List file    =  .\probe_rs232.lst                                       #
#    Object file  =  C:\Micrium\Software\EVALBO~1\MICROC~1\EXPLOR~1\PIC33F~1 #
#                    \MPLAB_~1\OS-Probe\Output\probe_rs232.r59               #
#                                                                            #
#                                                                            #
##############################################################################

C:\Micrium\Software\uC-Probe\Target\Communication\Generic\RS-232\Source\probe_rs232.c
      1          /*
      2          *********************************************************************************************************
      3          *                                      uC/Probe Communication
      4          *
      5          *                           (c) Copyright 2007; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                              uC/Probe
     18          *
     19          *                                      Communication: RS-232
     20          *
     21          * Filename      : probe_rs232.c
     22          * Version       : V1.40
     23          * Programmer(s) : BAN
     24          * Note(s)       : (1) The abbreviations RX and TX refer to communication from the target's perspective.
     25          *
     26          *                 (2) The abbreviations RD and WR refer to reading data from the target memory and
     27          *                     writing data to the target memory, respectively.
     28          *********************************************************************************************************
     29          */
     30          
     31          /*
     32          *********************************************************************************************************
     33          *                                             INCLUDE FILES
     34          *********************************************************************************************************
     35          */
     36          
     37          #define   PROBE_RS232_GLOBALS
     38          #include  <probe_com.h>
     39          #include  <probe_rs232.h>
     40          
     41          #if (PROBE_COM_METHOD_RS232 > 0)
     42          
     43          /*
     44          *********************************************************************************************************
     45          *                                            LOCAL DEFINES
     46          *********************************************************************************************************
     47          */
     48          
     49          /*
     50          *********************************************************************************************************
     51          *                                            RS-232 PACKET FORMAT
     52          *
     53          * Note(s):  (1) All packets include the following parts:
     54          *
     55          *                   (A)  4 1-byte start delimiters, forming the ASCII representation of "uCPr".  These
     56          *                        are the constants PROBE_RS232_PROTOCOL_RX_SD0-PROBE_RS232_PROTOCOL_?X_SD4;
     57          *                   (B)  1 2-byte length, the length of the data segment;
     58          *                   (C)  1 2-byte padding, unused;
     59          *                   (D)  n   bytes of data; and
     60          *                   (E)  1 1-byte checksum; and
     61          *                   (F)  1 1-byte end delimiter, the character '/', which is the constant PROBE_RS232_PROTOCOL_?X_ED.
     62          *
     63          *                                       +-------------------+-------------------+
     64          *                                       |   'u'   |   'C'   |   'P'   |   'r'   |
     65          *                                       +-------------------+-------------------+
     66          *                                       |       Length      |     Padding       |
     67          *                                       +-------------------+-------------------+
     68          *                                       |                  Data                 |   The data segment does not need to end on
     69          *                                       |                   .                   |   a four-byte boundary, as might be inferred
     70          *                                       |                   .                   |   from this diagram.
     71          *                                       |                   .                   |
     72          *                                       +-------------------+-------------------+
     73          *                                       | Checksum|   '/'   |
     74          *                                       +-------------------+
     75          *********************************************************************************************************
     76          */
     77          
     78                                                                              /* ------------- INBOUND PACKET DELIMITERS ------------ */
     79          #define  PROBE_RS232_PROTOCOL_RX_SD0            0x75                /* (A) Start delimiters                                 */
     80          #define  PROBE_RS232_PROTOCOL_RX_SD1            0x43
     81          #define  PROBE_RS232_PROTOCOL_RX_SD2            0x50
     82          #define  PROBE_RS232_PROTOCOL_RX_SD3            0x72
     83          #define  PROBE_RS232_PROTOCOL_RX_ED             0x2F                /* (E) End   delimiter                                  */
     84          
     85                                                                              /* ------------ OUTBOUND PACKET DELIMITERS ------------ */
     86          #define  PROBE_RS232_PROTOCOL_TX_SD0            0x75                /* (A) Start delimiters                                 */
     87          #define  PROBE_RS232_PROTOCOL_TX_SD1            0x43
     88          #define  PROBE_RS232_PROTOCOL_TX_SD2            0x50
     89          #define  PROBE_RS232_PROTOCOL_TX_SD3            0x72
     90          #define  PROBE_RS232_PROTOCOL_TX_ED             0x2F                /* (E) End   delimiter                                  */
     91          
     92                                                                              /* ----------- RECEIVE STATE MACHINE STATES ----------- */
     93          #define  PROBE_RS232_RX_STATE_SD0                  0                /*  (0) waiting for start first  start delimiter (SD0)  */
     94          #define  PROBE_RS232_RX_STATE_SD1                  1                /*  (1) waiting for start second start delimiter (SD1)  */
     95          #define  PROBE_RS232_RX_STATE_SD2                  2                /*  (2) waiting for start third  start delimiter (SD2)  */
     96          #define  PROBE_RS232_RX_STATE_SD3                  3                /*  (3) waiting for start fourth start delimiter (SD3)  */
     97          #define  PROBE_RS232_RX_STATE_LEN1                 4                /*  (4) waiting for length,  first  byte                */
     98          #define  PROBE_RS232_RX_STATE_LEN2                 5                /*  (5) waiting for length,  second byte                */
     99          #define  PROBE_RS232_RX_STATE_PAD1                 6                /*  (6) waiting for padding, first  byte                */
    100          #define  PROBE_RS232_RX_STATE_PAD2                 7                /*  (6) waiting for padding, second byte                */
    101          #define  PROBE_RS232_RX_STATE_DATA                 8                /*  (6) waiting for data                                */
    102          #define  PROBE_RS232_RX_STATE_CHKSUM               9                /*  (7) waiting for checksum                            */
    103          #define  PROBE_RS232_RX_STATE_ED                  10                /*  (8) waiting for end delimiter                       */
    104          
    105                                                                              /* ---------- TRANSMIT STATE MACHINE STATES ----------- */
    106          #define  PROBE_RS232_TX_STATE_SD0                  0                /*  (0) waiting to send start first  start delim. (SD0) */
    107          #define  PROBE_RS232_TX_STATE_SD1                  1                /*  (1) waiting to send start second start delim. (SD1) */
    108          #define  PROBE_RS232_TX_STATE_SD2                  2                /*  (2) waiting to send start third  start delim. (SD2) */
    109          #define  PROBE_RS232_TX_STATE_SD3                  3                /*  (3) waiting to send start fourth start delim. (SD3) */
    110          #define  PROBE_RS232_TX_STATE_LEN1                 4                /*  (4) waiting to send length,  first  byte            */
    111          #define  PROBE_RS232_TX_STATE_LEN2                 5                /*  (5) waiting to send length,  second byte            */
    112          #define  PROBE_RS232_TX_STATE_PAD1                 6                /*  (6) waiting to send padding, first  byte            */
    113          #define  PROBE_RS232_TX_STATE_PAD2                 7                /*  (7) waiting to send padding, second byte            */
    114          #define  PROBE_RS232_TX_STATE_DATA                 8                /*  (8) waiting to send data                            */
    115          #define  PROBE_RS232_TX_STATE_CHKSUM               9                /*  (9) waiting to send checksum                        */
    116          #define  PROBE_RS232_TX_STATE_ED                  10                /* (10) waiting to send end delimiter                   */
    117          
    118          #define  PROBE_RS232_USE_CHECKSUM            DEF_FALSE              /* DO NOT CHANGE                                        */
    119          
    120          /*
    121          *********************************************************************************************************
    122          *                                           LOCAL CONSTANTS
    123          *********************************************************************************************************
    124          */
    125          
    126          
    127          /*
    128          *********************************************************************************************************
    129          *                                          LOCAL DATA TYPES
    130          *********************************************************************************************************
    131          */
    132          
    133          
    134          /*
    135          *********************************************************************************************************
    136          *                                            LOCAL TABLES
    137          *********************************************************************************************************
    138          */
    139          
    140          
    141          /*
    142          *********************************************************************************************************
    143          *                                       LOCAL GLOBAL VARIABLES
    144          *********************************************************************************************************
    145          */
    146          
    147                                                                              /* -------------- RX state variables ------------------ */
    148          static  CPU_INT08U   ProbeRS232_RxState;                            /*  ... Current state of RX state machine               */
    149          static  CPU_INT16U   ProbeRS232_RxRemainLen;                        /*  ... Remaining bytes of data to read                 */
    150          
    151                                                                              /* -------------- RX packet variables ----------------- */
    152          static  CPU_INT16U   ProbeRS232_RxLen;                              /*  ... Length  of data in current packet               */
    153          static  CPU_INT08U   ProbeRS232_RxBuf[PROBE_RS232_RX_BUF_SIZE];     /*  ... Data    of current packet                       */
    154          #if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
    155          static  CPU_INT08U   ProbeRS232_RxChkSum;                           /*  ... Checksum of current packet                      */
    156          #endif
    157          
    158                                                                              /* ------------ RX data buffer variable --------------- */
    159          static  CPU_INT16U   ProbeRS232_RxBufWrIx;                          /*  ... Index of next write; also number of bytes in buf*/
    160          
    161                                                                              /* -------------- TX state variables ------------------ */
    162          static  CPU_INT08U   ProbeRS232_TxState;                            /*  ... Current state of TX state machine               */
    163          static  CPU_BOOLEAN  ProbeRS232_TxActiveFlag;                       /*  ... Indicates TX is currently active                */
    164          
    165                                                                              /* -------------- TX packet variables  ---------------- */
    166          static  CPU_INT16U   ProbeRS232_TxLen;                              /*  ... Length  of data in current packet               */
    167          static  CPU_INT08U   ProbeRS232_TxBuf[PROBE_RS232_TX_BUF_SIZE];     /*  ... Data    of current packet                       */
    168          #if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
    169          static  CPU_INT08U   ProbeRS232_TxChkSum;                           /*  ... Checksum of current packet                      */
    170          #endif
    171          
    172                                                                              /* ----------- TX data buffer variables --------------- */
    173          static  CPU_BOOLEAN  ProbeRS232_TxBufInUse;                         /*  ... Indicates TX buffer currently holds a packet    */
    174          static  CPU_INT16U   ProbeRS232_TxBufRdIx;                          /*  ... Index of next read                              */
    175          
    176          
    177          
    178          /*
    179          *********************************************************************************************************
    180          *                                      LOCAL FUNCTION PROTOTYPES
    181          *********************************************************************************************************
    182          */
    183          
    184          static  CPU_INT16U  ProbeRS232_ParseRxPkt(void);
    185          
    186          static  void        ProbeRS232_RxPkt     (void);
    187          
    188          static  void        ProbeRS232_RxStoINT8U(CPU_INT08U  rx_data);
    189          
    190          static  void        ProbeRS232_RxBufClr  (void);
    191          
    192          static  void        ProbeRS232_TxStart   (void);
    193          
    194          
    195          /*
    196          *********************************************************************************************************
    197          *                                     LOCAL CONFIGURATION ERRORS
    198          *********************************************************************************************************
    199          */
    200          
    201          
    202          /*
    203          *********************************************************************************************************
    204          *********************************************************************************************************
    205          **                                          Initialization
    206          *********************************************************************************************************
    207          *********************************************************************************************************
    208          */
    209          
    210          /*
    211          *********************************************************************************************************
    212          *                                           ProbeRS232_Init()
    213          *
    214          * Description : Initialize the RS-232 communication module.
    215          *
    216          * Argument(s) : baud_rate    The RS-232 baud rate which will be passed to the hardware initialization.
    217          *
    218          * Return(s)   : none.
    219          *********************************************************************************************************
    220          */
    221          
    222          void  ProbeRS232_Init (CPU_INT32U baud_rate)
    223          {
    224              ProbeRS232_RxState      = PROBE_RS232_RX_STATE_SD0;             /* Setup Rx and Tx state machines                       */
    225              ProbeRS232_TxState      = PROBE_RS232_TX_STATE_SD0;
    226          
    227              ProbeRS232_TxLen        = 0;
    228              ProbeRS232_TxActiveFlag = DEF_FALSE;
    229              ProbeRS232_TxBufInUse   = DEF_FALSE;
    230          
    231          #if (PROBE_COM_STAT_EN      > 0)
    232              ProbeRS232_RxCtr        = 0;
    233              ProbeRS232_TxCtr        = 0;
    234          #endif
    235          
    236          #if (PROBE_RS232_PARSE_TASK > 0)
    237              ProbeRS232_OS_Init();
    238          #endif
    239          
    240              ProbeRS232_InitTarget(baud_rate);                               /* Initialize target specific code                      */
    241          }
    242          
    243          
    244          /*
    245          *********************************************************************************************************
    246          *********************************************************************************************************
    247          **                                            Task
    248          *********************************************************************************************************
    249          *********************************************************************************************************
    250          */
    251          
    252          /*
    253          *********************************************************************************************************
    254          *                                        ProbeRS232_Task()
    255          *
    256          * Description : The task whcih parses the received packet, forms a response, and begins transmission.
    257          *
    258          * Argument(s) : p_arg        The argument passed to 'ProbeRS232_Task()' by  'ProbeRS232_OS_Task()'.
    259          *
    260          * Return(s)   : none.
    261          *********************************************************************************************************
    262          */
    263          
    264          #if (PROBE_RS232_PARSE_TASK > 0)
    265          void  ProbeRS232_Task (void *p_arg)
    266          {
    267              CPU_INT16U  len;
    268          
    269          
    270              (void)p_arg;
    271          
    272              while (DEF_TRUE) {
    273                  ProbeRS232_OS_Pend();                                       /* Wait for a packet to be received                     */
    274          
    275                  len = ProbeRS232_ParseRxPkt();                              /* Parse packet and formulate a response                */
    276          
    277                  if (len > 0) {                                              /* If we have a response                                */
    278                      ProbeRS232_TxLen = len;
    279                      ProbeRS232_TxStart();
    280                  }
    281              }
    282          }
    283          #endif
    284          
    285          
    286          /*
    287          *********************************************************************************************************
    288          *********************************************************************************************************
    289          **                                         Rx and Tx Handlers
    290          *********************************************************************************************************
    291          *********************************************************************************************************
    292          */
    293          
    294          /*
    295          *********************************************************************************************************
    296          *                                        ProbeRS232_RxHandler()
    297          *
    298          * Description : Called when a byte is received.
    299          *
    300          * Argument(s) : rx_data     Received data byte.
    301          *
    302          * Return(s)   : none.
    303          *********************************************************************************************************
    304          */
    305          
    306          void  ProbeRS232_RxHandler (CPU_INT08U rx_data)
    307          {
    308          #if (PROBE_COM_STAT_EN > 0)
    309              ProbeRS232_RxCtr++;
    310          #endif
    311          
    312              switch (ProbeRS232_RxState) {
    313          
    314                  case PROBE_RS232_RX_STATE_SD0:                              /* Receive the start first  start delimiter (SD0)       */
    315                       if (rx_data == PROBE_RS232_PROTOCOL_RX_SD0) {
    316                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD1;
    317                           ProbeRS232_RxBufClr();
    318                       }
    319                       break;
    320          
    321                  case PROBE_RS232_RX_STATE_SD1:                              /* Receive the start second start delimiter (SD1)       */
    322                       if (rx_data == PROBE_RS232_PROTOCOL_RX_SD1) {
    323                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD2;
    324                       } else {
    325                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
    326                       }
    327                       break;
    328          
    329                  case PROBE_RS232_RX_STATE_SD2:                              /* Receive the start third  start delimiter (SD2)       */
    330                       if (rx_data == PROBE_RS232_PROTOCOL_RX_SD2) {
    331                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD3;
    332                       } else {
    333                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
    334                       }
    335                       break;
    336          
    337                  case PROBE_RS232_RX_STATE_SD3:                              /* Receive the start fourth start delimiter (SD3)       */
    338                       if (rx_data == PROBE_RS232_PROTOCOL_RX_SD3) {
    339                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_LEN1;
    340                       } else {
    341                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
    342                       }
    343                       break;
    344          
    345          
    346                  case PROBE_RS232_RX_STATE_LEN1:                             /* Receive the first  length byte                       */
    347          #if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
    348                       ProbeRS232_RxChkSum    = rx_data;
    349          #endif
    350                       ProbeRS232_RxRemainLen = rx_data;
    351                       ProbeRS232_RxState     = PROBE_RS232_RX_STATE_LEN2;
    352                       break;
    353          
    354                  case PROBE_RS232_RX_STATE_LEN2:                             /* Receive the second length byte                       */
    355          #if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
    356                       ProbeRS232_RxChkSum    += rx_data;
    357          #endif
    358                       ProbeRS232_RxRemainLen |= rx_data << 8;
    359          
    360                       if ((ProbeRS232_RxRemainLen == 0) || (ProbeRS232_RxRemainLen > PROBE_RS232_RX_BUF_SIZE)) {
    361          
    362                           ProbeRS232_RxState  = PROBE_RS232_RX_STATE_SD0;    /* ... Cannot handle a packet of this size              */
    363                       } else {
    364          
    365                           ProbeRS232_RxLen    = ProbeRS232_RxRemainLen;
    366                           ProbeRS232_RxState  = PROBE_RS232_RX_STATE_PAD1;
    367                       }
    368                       break;
    369          
    370          
    371                  case PROBE_RS232_RX_STATE_PAD1:                             /* Receive the first  padding byte                      */
    372                       ProbeRS232_RxState = PROBE_RS232_RX_STATE_PAD2;
    373                       break;
    374          
    375                  case PROBE_RS232_RX_STATE_PAD2:                             /* Receive the second padding byte                      */
    376                       ProbeRS232_RxState = PROBE_RS232_RX_STATE_DATA;
    377                       break;
    378          
    379          
    380          
    381                  case PROBE_RS232_RX_STATE_DATA:                             /* Receive the data                                     */
    382                       ProbeRS232_RxStoINT8U(rx_data);
    383          #if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
    384                       ProbeRS232_RxChkSum += rx_data;
    385          #endif
    386                       if (--ProbeRS232_RxRemainLen == 0) {
    387                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_CHKSUM;
    388                       }
    389                       break;
    390          
    391          
    392          
    393          
    394                  case PROBE_RS232_RX_STATE_CHKSUM:                           /* Receive the checksum                                 */
    395          #if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
    396                       ProbeRS232_RxChkSum += rx_data;
    397                       if ((ProbeRS232_RxChkSum & 0xFF) == 0x00) {
    398                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_ED;
    399                       } else {
    400                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
    401                       }
    402          #else
    403                       ProbeRS232_RxState   = PROBE_RS232_RX_STATE_ED;
    404          #endif
    405                       break;
    406          
    407          
    408          
    409          
    410                  case PROBE_RS232_RX_STATE_ED:                               /* Receive the end delimiter                            */
    411                       if (rx_data == PROBE_RS232_PROTOCOL_RX_ED) {
    412                           ProbeRS232_RxPkt();                                /* ... Parse received packet                            */
    413                       }
    414                       ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
    415                       break;
    416          
    417          
    418          
    419          
    420                  default:
    421                       ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
    422                       break;
    423              }
    424          }
    425          
    426          
    427          /*
    428          *********************************************************************************************************
    429          *                                        ProbeRS232_TxHandler()
    430          *
    431          * Description : Called when a byte has been transmitted.
    432          *
    433          * Argument(s) : none.
    434          *
    435          * Return(s)   : none.
    436          *********************************************************************************************************
    437          */
    438          
    439          void  ProbeRS232_TxHandler (void)
    440          {
    441              CPU_INT08U  tx_data;
    442          
    443          
    444          #if (PROBE_COM_STAT_EN > 0)
    445              if ((ProbeRS232_TxState != PROBE_RS232_TX_STATE_SD0) ||
    446                  (ProbeRS232_TxLen    > 0                       )) {
    447          
    448                  ProbeRS232_TxCtr++;
    449          
    450              }
    451          #endif
    452          
    453              switch (ProbeRS232_TxState) {
    454                  case PROBE_RS232_TX_STATE_SD0:
    455                       if (ProbeRS232_TxLen > 0) {                            /* If packet is waiting to be sent                      */
    456                           ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD0);       /*  ... Transmit start first  start delimiter (SD0)     */
    457                           ProbeRS232_TxActiveFlag = DEF_TRUE;                /*  ... Transmit in process                             */
    458                           ProbeRS232_TxState      = PROBE_RS232_TX_STATE_SD1;
    459                           ProbeRS232_TxBufRdIx    = 0;
    460          
    461                       } else {                                               /* If no packet is waiting to be sent                   */
    462                           ProbeRS232_TxActiveFlag = DEF_FALSE;               /*  ... Transmission not active                         */
    463                           ProbeRS232_TxIntDis();                             /*  ... Disable transmit interrupts                     */
    464                       }
    465                       break;
    466          
    467          
    468                  case PROBE_RS232_TX_STATE_SD1:                              /* Transmit start second start delimiter (SD1)          */
    469                       ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD1);
    470                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_SD2;
    471                       break;
    472          
    473                  case PROBE_RS232_TX_STATE_SD2:                              /* Transmit start third  start delimiter (SD2)          */
    474                       ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD2);
    475                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_SD3;
    476                       break;
    477          
    478                  case PROBE_RS232_TX_STATE_SD3:                              /* Transmit start fourth start delimiter (SD3)          */
    479                       ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD3);
    480                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_LEN1;
    481                       break;
    482          
    483          
    484                  case PROBE_RS232_TX_STATE_LEN1:                             /* Transmit first  length byte                          */
    485                       tx_data             = ProbeRS232_TxLen & 0xFF;
    486                       ProbeRS232_Tx1(tx_data);
    487                       ProbeRS232_TxState  = PROBE_RS232_TX_STATE_LEN2;
    488          #if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
    489                       ProbeRS232_TxChkSum = tx_data;
    490          #endif
    491                       break;
    492          
    493                  case PROBE_RS232_TX_STATE_LEN2:                             /* Transmit second length byte                          */
    494                       tx_data              = ProbeRS232_TxLen >> 8;
    495                       ProbeRS232_Tx1(tx_data);
    496                       ProbeRS232_TxState   = PROBE_RS232_TX_STATE_PAD1;
    497          #if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
    498                       ProbeRS232_TxChkSum += tx_data;
    499          #endif
    500                       break;
    501          
    502          
    503                  case PROBE_RS232_TX_STATE_PAD1:                             /* Transmit first  padding byte                         */
    504                       ProbeRS232_Tx1(0);
    505                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_PAD2;
    506                       break;
    507          
    508                  case PROBE_RS232_TX_STATE_PAD2:                             /* Transmit second padding byte                         */
    509                       ProbeRS232_Tx1(0);
    510                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_DATA;
    511                       break;
    512          
    513          
    514                  case PROBE_RS232_TX_STATE_DATA:                             /* Transmit data                                        */
    515                       tx_data = ProbeRS232_TxBuf[ProbeRS232_TxBufRdIx];
    516                       ProbeRS232_Tx1(tx_data);
    517          #if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
    518                       ProbeRS232_TxChkSum += tx_data;
    519          #endif
    520                       ProbeRS232_TxBufRdIx++;
    521                       if (ProbeRS232_TxBufRdIx >= ProbeRS232_TxLen) {        /* ... If all data has been sent                        */
    522                           ProbeRS232_TxState = PROBE_RS232_TX_STATE_CHKSUM;
    523                           ProbeRS232_TxLen   = 0;
    524                       }
    525                       break;
    526          
    527          
    528                  case PROBE_RS232_TX_STATE_CHKSUM:                           /* Transmit checksum                                    */
    529          #if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
    530                       ProbeRS232_Tx1(ProbeRS232_TxChkSum);
    531          #else
    532                       ProbeRS232_Tx1(0);
    533          #endif
    534                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_ED;
    535                       break;
    536          
    537          
    538                  case PROBE_RS232_TX_STATE_ED:                               /* Transmit end delimiter                               */
    539                       ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_ED);
    540                       ProbeRS232_TxState    = PROBE_RS232_TX_STATE_SD0;
    541                       ProbeRS232_TxBufInUse = DEF_FALSE;
    542                       break;
    543          
    544          
    545                  default:
    546                       ProbeRS232_TxState      = PROBE_RS232_TX_STATE_SD0;
    547                       ProbeRS232_TxActiveFlag = DEF_FALSE;
    548                       ProbeRS232_TxIntDis();                                 /* No more data to send, disable Tx interrupts          */
    549                       break;
    550              }
    551          }
    552          
    553          
    554          /*
    555          *********************************************************************************************************
    556          *********************************************************************************************************
    557          **                                  Static Packet-Handling Functions
    558          *********************************************************************************************************
    559          *********************************************************************************************************
    560          */
    561          
    562          /*
    563          *********************************************************************************************************
    564          *                                       ProbeRS232_ParseRxPkt()
    565          *
    566          * Description : Parse a received packet & formulate a response.
    567          *
    568          * Argument(s) : none.
    569          *
    570          * Return(s)   : The number of bytes in the data segment of the packet to transmit in response.
    571          *********************************************************************************************************
    572          */
    573          
    574          static  CPU_INT16U  ProbeRS232_ParseRxPkt (void)
    575          {
    576              CPU_INT16U  temp;
    577          
    578          
    579              if (ProbeRS232_TxBufInUse == DEF_TRUE) {                        /* Do cmds only if Tx buffer is free                    */
    580                  return (0);
    581              }
    582          
    583              ProbeRS232_TxBufInUse = DEF_TRUE;
    584              temp                  = ProbeCom_ParseRxPkt((void     *)ProbeRS232_RxBuf,
    585                                                          (void     *)ProbeRS232_TxBuf,
    586                                                          (CPU_INT16U)ProbeRS232_RxLen,
    587                                                          (CPU_INT16U)PROBE_RS232_TX_BUF_SIZE);
    588          
    589              return (temp);
    590          }
    591          
    592          
    593          /*
    594          *********************************************************************************************************
    595          *********************************************************************************************************
    596          **                                         Static Rx Functions
    597          *********************************************************************************************************
    598          *********************************************************************************************************
    599          */
    600          
    601          /*
    602          *********************************************************************************************************
    603          *                                           ProbeRS232_RxPkt()
    604          *
    605          * Description : Handle a received packet.
    606          *
    607          * Argument(s) : none.
    608          *
    609          * Return(s)   : none.
    610          *********************************************************************************************************
    611          */
    612          
    613          static  void  ProbeRS232_RxPkt (void)
    614          {
    615          #if (PROBE_RS232_PARSE_TASK > 0)
    616              ProbeRS232_OS_Post();                                           /* We have a whole packet, signal task to parse it      */
    617          
    618          
    619          
    620          #else
    621          
    622          
    623          
    624          #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
    625              CPU_SR      cpu_sr = 0;
    626          #endif
    627              CPU_INT16U  len;
    628          
    629          
    630              len = ProbeRS232_ParseRxPkt();                                  /* We have a whole packet, parse it                     */
    631              if (len > 0) {
    632                  CPU_CRITICAL_ENTER();
    633                  ProbeRS232_TxLen = len;
    634                  ProbeRS232_TxStart();
    635                  CPU_CRITICAL_EXIT();
    636              }
    637          #endif
    638          }
    639          
    640          
    641          /*
    642          *********************************************************************************************************
    643          *                                   ProbeRS232_RxStoINT8U()
    644          *
    645          * Description : Store a byte in the receive buffer.
    646          *
    647          * Argument(s) : rx_data     Byte of data to store in the buffer.
    648          *
    649          * Return(s)   : none.
    650          *********************************************************************************************************
    651          */
    652          
    653          static  void  ProbeRS232_RxStoINT8U (CPU_INT08U rx_data)
    654          {
    655              if (ProbeRS232_RxBufWrIx < PROBE_RS232_RX_BUF_SIZE) {
    656                  ProbeRS232_RxBuf[ProbeRS232_RxBufWrIx++] = rx_data;
    657              }
    658          }
    659          
    660          
    661          /*
    662          *********************************************************************************************************
    663          *                                           ProbeRS232_RxBufClr()
    664          *
    665          * Description : Clear the data segment buffer write index.
    666          *
    667          * Argument(s) : none.
    668          *
    669          * Return(s)   : none.
    670          *********************************************************************************************************
    671          */
    672          
    673          static  void  ProbeRS232_RxBufClr (void)
    674          {
    675              ProbeRS232_RxBufWrIx = 0;
    676          }
    677          
    678          
    679          /*
    680          *********************************************************************************************************
    681          *********************************************************************************************************
    682          **                                       Static Tx Functions
    683          *********************************************************************************************************
    684          *********************************************************************************************************
    685          */
    686          
    687          /*
    688          *********************************************************************************************************
    689          *                                        ProbeRS232_TxStart()
    690          *
    691          * Description : Cause transmission to begin.
    692          *
    693          * Argument(s) : none.
    694          *
    695          * Return(s)   : none.
    696          *********************************************************************************************************
    697          */
    698          
    699          static  void  ProbeRS232_TxStart (void)
    700          {
    701              if (ProbeRS232_TxActiveFlag == DEF_FALSE) {                     /* If no other transmission is in progress              */
    702                  ProbeRS232_TxHandler();                                     /*  ... Handle transmit                                 */
    703                  ProbeRS232_TxIntEn();                                       /*  ... Enable transmit interrupts                      */
    704              }
    705          }
    706          
    707          
    708          #endif

   Maximum stack usage in bytes:

     Function                   CSTACK
     --------                   ------
     ProbeRS232_Init                4
       -> ProbeRS232_OS_Init        8
       -> ProbeRS232_InitTarget     8
     ProbeRS232_ParseRxPkt          2
       -> ProbeCom_ParseRxPkt       0
     ProbeRS232_RxBufClr            2
     ProbeRS232_RxHandler           2
       -> ProbeRS232_RxBufClr       0
       -> ProbeRS232_RxStoINT8U     0
       -> ProbeRS232_RxPkt          0
     ProbeRS232_RxPkt               2
       -> ProbeRS232_OS_Post        0
     ProbeRS232_RxStoINT8U          2
     ProbeRS232_Task                2
       -> ProbeRS232_OS_Pend        0
       -> ProbeRS232_ParseRxPkt     0
       -> ProbeRS232_TxStart        0
     ProbeRS232_TxHandler           2
       -> ProbeRS232_Tx1            0
       -> ProbeRS232_TxIntDis       0
       -> ProbeRS232_Tx1            0
       -> ProbeRS232_Tx1            0
       -> ProbeRS232_Tx1            0
       -> ProbeRS232_Tx1            0
       -> ProbeRS232_Tx1            0
       -> ProbeRS232_Tx1            0
       -> ProbeRS232_Tx1            0
       -> ProbeRS232_Tx1            0
       -> ProbeRS232_Tx1            0
       -> ProbeRS232_Tx1            0
       -> ProbeRS232_TxIntDis       0
     ProbeRS232_TxStart             2
       -> ProbeRS232_TxHandler      0
       -> ProbeRS232_TxIntEn        0


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     WREG0                      2
     WREG1                      2
     WREG2                      2
     WREG3                      2
     WREG4                      2
     WREG5                      2
     WREG6                      2
     WREG7                      2
     WREG8                      2
     WREG9                      2
     WREG10                     2
     WREG11                     2
     WREG12                     2
     WREG13                     2
     WREG14                     2
     WREG15                     2
     SPLIM                      2
     ACCAL                      2
     ACCAH                      2
     ACCAU                      2
     ACCBL                      2
     ACCBH                      2
     ACCBU                      2
     PCL                        2
     DOSTARTL                   2
     DOENDL                     2
     XMODSRT                    2
     XMODEND                    2
     YMODSRT                    2
     YMODEND                    2
     TMR1                       2
     PR1                        2
     TMR2                       2
     TMR3HLD                    2
     TMR3                       2
     PR2                        2
     PR3                        2
     TMR4                       2
     TMR5HLD                    2
     TMR5                       2
     PR4                        2
     PR5                        2
     TMR6                       2
     TMR7HLD                    2
     TMR7                       2
     PR6                        2
     PR7                        2
     TMR8                       2
     TMR9HLD                    2
     TMR9                       2
     PR8                        2
     PR9                        2
     IC1BUF                     2
     IC2BUF                     2
     IC3BUF                     2
     IC4BUF                     2
     IC5BUF                     2
     IC6BUF                     2
     IC7BUF                     2
     IC8BUF                     2
     OC1RS                      2
     OC1R                       2
     OC2RS                      2
     OC2R                       2
     OC3RS                      2
     OC3R                       2
     OC4RS                      2
     OC4R                       2
     OC5RS                      2
     OC5R                       2
     OC6RS                      2
     OC6R                       2
     OC7RS                      2
     OC7R                       2
     OC8RS                      2
     OC8R                       2
     U1BRG                      2
     U2BRG                      2
     SPI1BUF                    2
     SPI2BUF                    2
     RXBUF0                     2
     RXBUF1                     2
     RXBUF2                     2
     RXBUF3                     2
     TXBUF0                     2
     TXBUF1                     2
     TXBUF2                     2
     TXBUF3                     2
     AD1CSSH                    2
     DMA0STA                    2
     DMA0STB                    2
     DMA0PAD                    2
     DMA0CNT                    2
     DMA1STA                    2
     DMA1STB                    2
     DMA1PAD                    2
     DMA1CNT                    2
     DMA2STA                    2
     DMA2STB                    2
     DMA2PAD                    2
     DMA2CNT                    2
     DMA3STA                    2
     DMA3STB                    2
     DMA3PAD                    2
     DMA3CNT                    2
     DMA4STA                    2
     DMA4STB                    2
     DMA4PAD                    2
     DMA4CNT                    2
     DMA5STA                    2
     DMA5STB                    2
     DMA5PAD                    2
     DMA5CNT                    2
     DMA6STA                    2
     DMA6STB                    2
     DMA6PAD                    2
     DMA6CNT                    2
     DMA7STA                    2
     DMA7STB                    2
     DMA7PAD                    2
     DMA7CNT                    2
     DSADR                      2
     ProbeRS232_RxCtr           4
     ProbeRS232_TxCtr           4
     ProbeRS232_RxState         1
     ProbeRS232_RxRemainLen     2
     ProbeRS232_RxLen           2
     ProbeRS232_RxBuf          64
     ProbeRS232_RxBufWrIx       2
     ProbeRS232_TxState         1
     ProbeRS232_TxActiveFlag    1
     ProbeRS232_TxLen           2
     ProbeRS232_TxBuf          64
     ProbeRS232_TxBufInUse      1
     ProbeRS232_TxBufRdIx       2
     ProbeRS232_Init          104
     ??ProbeRS232_Task_0       40
     ProbeRS232_RxHandler     396
     ProbeRS232_TxHandler     496
     ProbeRS232_ParseRxPkt     72
     ProbeRS232_RxPkt          12
     ProbeRS232_RxStoINT8U     40
     ProbeRS232_RxBufClr       12
     ProbeRS232_TxStart        32
     _A_TRISB                   2
     _A_LATA                    2
     _A_PORTA                   2
     _A_TRISA                   2
     _A_C1RXF5SID               2
     _A_C1RXF5EID               2
     _A_C1RXF6SID               2
     _A_C1RXF6EID               2
     _A_C1RXF7SID               2
     _A_C1RXF7EID               2
     _A_C1RXF8SID               2
     _A_C1RXF8EID               2
     _A_RSCON                   2
     _A_TSCON                   2
     _A_DCISTAT                 2
     _A_DCICON3                 2
     _A_DCICON2                 2
     _A_DCICON1                 2
     _A_ODCA                    2
     _A_LATG                    2
     _A_PORTG                   2
     _A_TRISG                   2
     _A_LATF                    2
     _A_PORTF                   2
     _A_TRISF                   2
     _A_LATE                    2
     _A_PORTE                   2
     _A_TRISE                   2
     _A_LATD                    2
     _A_PORTD                   2
     _A_TRISD                   2
     _A_LATC                    2
     _A_PORTC                   2
     _A_TRISC                   2
     _A_LATB                    2
     _A_PORTB                   2
     _A_I2C2MSK                 2
     _A_I2C2ADD                 2
     _A_I2C2STAT                2
     _A_I2C2CON                 2
     _A_I2C2BRG                 2
     _A_I2C2TRN                 2
     _A_I2C2RCV                 2
     _A_I2C1MSK                 2
     _A_I2C1ADD                 2
     _A_I2C1STAT                2
     _A_I2C1CON                 2
     _A_I2C1BRG                 2
     _A_I2C1TRN                 2
     _A_I2C1RCV                 2
     _A_OC8CON                  2
     _A_C1RXF11SID              2
     _A_C1RXF11EID              2
     _A_OC7CON                  2
     _A_C1RXF9SID               2
     _A_SPI2CON2                2
     _A_SPI2CON1                2
     _A_SPI2STAT                2
     _A_C1RXF9EID               2
     _A_SPI1CON2                2
     _A_SPI1CON1                2
     _A_SPI1STAT                2
     _A_C1RXF10SID              2
     _A_U2RXREG                 2
     _A_U2TXREG                 2
     _A_U2STA                   2
     _A_U2MODE                  2
     _A_C1RXF10EID              2
     _A_U1RXREG                 2
     _A_U1TXREG                 2
     _A_U1STA                   2
     _A_U1MODE                  2
     _A_C1RXFUL1                2
     _A_DMA5REQ                 2
     _A_DMA5CON                 2
     _A_C1RXFUL2                2
     _A_C1BUFPNT3               2
     _A_C1BUFPNT4               2
     _A_C1RXOVF1                2
     _A_DMA4REQ                 2
     _A_DMA4CON                 2
     _A_C1RXOVF2                2
     _A_C1TR01CON               2
     _A_C1TR23CON               2
     _A_C1TR45CON               2
     _A_DMA3REQ                 2
     _A_DMA3CON                 2
     _A_C1TR67CON               2
     _A_C1RXM2SID               2
     _A_C1RXM2EID               2
     _A_C1CTRL1                 2
     _A_DMACS1                  2
     _A_DMACS0                  2
     _A_C1CTRL2                 2
     _A_C1VEC                   2
     _A_C1FCTRL                 2
     _A_C1FIFO                  2
     _A_DMA7REQ                 2
     _A_DMA7CON                 2
     _A_C1INTF                  2
     _A_C1INTE                  2
     _A_C1CFG1                  2
     _A_C1CFG2                  2
     _A_DMA6REQ                 2
     _A_DMA6CON                 2
     _A_C1FEN1                  2
     _A_C1FMSKSEL1              2
     _A_C1FMSKSEL2              2
     _A_AD2CHS0                 2
     _A_AD2CHS123               2
     _A_AD2CON3                 2
     _A_AD2CON2                 2
     _A_AD2CON1                 2
     _A_AD2BUF0                 2
     _A_AD1CON4                 2
     _A_AD1CSSL                 2
     _A_C1RXF4EID               2
     _A_AD1PCFGL                2
     _A_AD1PCFGH                2
     _A_AD1CHS0                 2
     _A_AD1CHS123               2
     _A_AD1CON3                 2
     _A_AD1CON2                 2
     _A_AD1CON1                 2
     _A_AD1BUF0                 2
     _A_ODCF                    2
     _A_C1RXF0SID               2
     _A_DMA2REQ                 2
     _A_DMA2CON                 2
     _A_C1RXF0EID               2
     _A_C1RXF1SID               2
     _A_C1RXF1EID               2
     _A_C1RXF2SID               2
     _A_DMA1REQ                 2
     _A_DMA1CON                 2
     _A_C1RXF2EID               2
     _A_C1RXF3SID               2
     _A_C1RXF3EID               2
     _A_C1RXF4SID               2
     _A_DMA0REQ                 2
     _A_DMA0CON                 2
     _A_AD2CON4                 2
     _A_AD2CSSL                 2
     _A_AD2PCFG                 2
     _A_IEC0                    2
     _A_IFS4                    2
     _A_IFS3                    2
     _A_IFS2                    2
     _A_IFS1                    2
     _A_IFS0                    2
     _A_INTCON2                 2
     _A_INTCON1                 2
     _A_CNPU2                   2
     _A_CNPU1                   2
     _A_CNEN2                   2
     _A_CNEN1                   2
     _A_DISICNT                 2
     _A_XBREV                   2
     _A_C2RXF6SID               2
     _A_C2RXF6EID               2
     _A_C2RXF7SID               2
     _A_C2RXF7EID               2
     _A_IPC13                   2
     _A_IPC12                   2
     _A_IPC11                   2
     _A_IPC10                   2
     _A_IPC9                    2
     _A_IPC8                    2
     _A_IPC7                    2
     _A_IPC6                    2
     _A_IPC5                    2
     _A_IPC4                    2
     _A_IPC3                    2
     _A_IPC2                    2
     _A_IPC1                    2
     _A_IPC0                    2
     _A_IEC4                    2
     _A_IEC3                    2
     _A_IEC2                    2
     _A_IEC1                    2
     _A_C2RXF12SID              2
     _A_C2RXF12EID              2
     _A_C2RXF13SID              2
     _A_C2RXF13EID              2
     _A_C2RXF14SID              2
     _A_C2RXF14EID              2
     _A_C2RXF15SID              2
     _A_C2RXF15EID              2
     _A_RCON                    2
     _A_OSCCON                  2
     _A_CLKDIV                  2
     _A_PLLFBD                  2
     _A_OSCTUN                  2
     _A_NVMCON                  2
     _A_NVMKEY                  2
     _A_PMD1                    2
     _A_PMD2                    2
     _A_PMD3                    2
     _A_MODCON                  2
     _A_CORCON                  2
     _A_SR                      2
     _A_DOENDH                  2
     _A_C2RXF8SID               2
     _A_DOSTARTH                2
     _A_C2RXF8EID               2
     _A_DCOUNT                  2
     _A_RCOUNT                  2
     _A_PSVPAG                  2
     _A_TBLPAG                  2
     _A_PCH                     2
     _A_C2RXF9SID               2
     _A_C2RXF9EID               2
     _A_C2RXF10SID              2
     _A_C2RXF10EID              2
     _A_C2RXF11SID              2
     _A_C2RXF11EID              2
     _A_C2FIFO                  2
     _A_C2INTF                  2
     _A_IC8CON                  2
     _A_C2INTE                  2
     _A_IC7CON                  2
     _A_C2CFG1                  2
     _A_IC6CON                  2
     _A_C2CFG2                  2
     _A_IC5CON                  2
     _A_C2FEN1                  2
     _A_IC4CON                  2
     _A_C2FMSKSEL1              2
     _A_IC3CON                  2
     _A_C2FMSKSEL2              2
     _A_IC2CON                  2
     _A_C2RXFUL1                2
     _A_IC1CON                  2
     _A_C2RXFUL2                2
     _A_C1RXF12SID              2
     _A_C1RXF12EID              2
     _A_OC6CON                  2
     _A_C1RXF13SID              2
     _A_C1RXF13EID              2
     _A_OC5CON                  2
     _A_C1RXF14SID              2
     _A_C1RXF14EID              2
     _A_OC4CON                  2
     _A_C1RXF15SID              2
     _A_C1RXF15EID              2
     _A_OC3CON                  2
     _A_C2CTRL1                 2
     _A_C2CTRL2                 2
     _A_OC2CON                  2
     _A_C2VEC                   2
     _A_C2FCTRL                 2
     _A_OC1CON                  2
     _A_C2RXF1SID               2
     _A_C2RXF1EID               2
     _A_C2RXF2SID               2
     _A_T3CON                   2
     _A_T2CON                   2
     _A_C2RXF2EID               2
     _A_C2RXF3SID               2
     _A_C2RXF3EID               2
     _A_C2RXF4SID               2
     _A_C2RXF4EID               2
     _A_T1CON                   2
     _A_C2RXF5SID               2
     _A_C2RXF5EID               2
     _A_INTREG                  2
     _A_IPC17                   2
     _A_IPC16                   2
     _A_IPC15                   2
     _A_IPC14                   2
     _A_T9CON                   2
     _A_T8CON                   2
     _A_C2BUFPNT3               2
     _A_C2BUFPNT4               2
     _A_C2RXOVF1                2
     _A_C2RXOVF2                2
     _A_C2TR01CON               2
     _A_T7CON                   2
     _A_T6CON                   2
     _A_C2TR23CON               2
     _A_C2TR45CON               2
     _A_C2TR67CON               2
     _A_C2RXM2SID               2
     _A_C2RXM2EID               2
     _A_T5CON                   2
     _A_T4CON                   2
     _A_C2RXF0SID               2
     _A_C2RXF0EID               2

 
 602 words in segment CODE
 150 bytes in segment MEM_Z
 820 bytes in segment SFR_A
 
 602 words of CODE memory
 150 bytes of DATA memory (+ 820 bytes shared)

Errors: none
Warnings: none
