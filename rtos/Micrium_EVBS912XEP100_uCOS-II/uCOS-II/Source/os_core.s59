//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR dsPIC C/EC++ Compiler V1.30B/W32                13/Dec/2007  20:41:43 /
// Copyright 2001-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu          =  dsPIC                                                  /
//    Data model   =  Large                                                  /
//    Double size  =  32 bits                                                /
//                 =                                                         /
//    Source file  =  os_core.c                                              /
//    Command line =  -D__dsPIC33FJ256GP710__ os_core.c                      /
//                    -oC:\Micrium\Software\EVALBO~1\MICROC~1\EXPLOR~1\PIC33 /
//                    F~1\MPLAB_~1\OS-Probe\Output\os_core.r59               /
//                    -fC:\Micrium\Software\EvalBoards\Microchip\Explorer16\ /
//                    PIC33FJ256\MPLAB_IAR\OS-Probe\ExtPath.xcl (-I          /
//                    "C:\Program Files\IAR Systems\Embedded Workbench       /
//                    3.2\dsPIC\inc\clib" -I "C:\Program Files\IAR           /
//                    Systems\Embedded Workbench 3.2\dsPIC\inc" -I           /
//                    C:\Micrium\Software\uC-CPU -I                          /
//                    C:\Micrium\Software\uC-CPU\Microchip\PIC33FJ256\MPLAB_ /
//                    IAR -I C:\Micrium\Software\uC-LIB -I                   /
//                    C:\Micrium\Software\uCOS-II\Source -I                  /
//                    C:\Micrium\Software\uCOS-II\Ports\Microchip\PIC33FJ256 /
//                    \MPLAB_IAR -I C:\Micrium\Software\uC-Probe\Target\Comm /
//                    unication\Generic\RS-232\Ports\Microchip\dsPIC33\IAR_i /
//                    ccDSPIC -I C:\Micrium\Software\uC-Probe\Target\Communi /
//                    cation\Generic\RS-232\Source -I                        /
//                    C:\Micrium\Software\uC-Probe\Target\Communication\Gene /
//                    ric\Source -I C:\Micrium\Software\uC-Probe\Target\Plug /
//                    ins\uCOS-II -I C:\Micrium\Software\EvalBoards\Microchi /
//                    p\Explorer16\PIC33FJ256\MPLAB_IAR\OS-Probe -I          /
//                    C:\Micrium\Software\EvalBoards\Microchip\Explorer16\PI /
//                    C33FJ256\MPLAB_IAR\BSP) -r -e --data_model=l --cpu=0   /
//                    -lc . -la . -z9 --no_cse --no_unroll --no_inline       /
//                    --no_code_motion                                       /
//    List file    =  .\os_core.s59                                          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME os_core

        RTMODEL "__data_model", "l"
        RTMODEL "__double_size", "32"
        RTMODEL "__dspic", "1"
        RTMODEL "__long_double_size", "32"
        RTMODEL "__rt_version", "2"

        RSEG CSTACK:DATA:NOROOT(1)

        EXTERN ?CLDSPIC_1_21_L00
        EXTERN ?CONST_CHAR
        EXTERN ?CONST_LONG
        EXTERN ?CONST_PTR
        EXTERN ?CONST_SHORT
        EXTERN ?L_UDIV
        EXTERN __INIT_MEM_Z
        EXTERN __SETUP_SAT

        PUBWEAK ACCAH
        PUBWEAK ACCAL
        PUBWEAK ACCAU
        PUBWEAK ACCBH
        PUBWEAK ACCBL
        PUBWEAK ACCBU
        PUBWEAK AD1CSSH
        PUBWEAK DMA0CNT
        PUBWEAK DMA0PAD
        PUBWEAK DMA0STA
        PUBWEAK DMA0STB
        PUBWEAK DMA1CNT
        PUBWEAK DMA1PAD
        PUBWEAK DMA1STA
        PUBWEAK DMA1STB
        PUBWEAK DMA2CNT
        PUBWEAK DMA2PAD
        PUBWEAK DMA2STA
        PUBWEAK DMA2STB
        PUBWEAK DMA3CNT
        PUBWEAK DMA3PAD
        PUBWEAK DMA3STA
        PUBWEAK DMA3STB
        PUBWEAK DMA4CNT
        PUBWEAK DMA4PAD
        PUBWEAK DMA4STA
        PUBWEAK DMA4STB
        PUBWEAK DMA5CNT
        PUBWEAK DMA5PAD
        PUBWEAK DMA5STA
        PUBWEAK DMA5STB
        PUBWEAK DMA6CNT
        PUBWEAK DMA6PAD
        PUBWEAK DMA6STA
        PUBWEAK DMA6STB
        PUBWEAK DMA7CNT
        PUBWEAK DMA7PAD
        PUBWEAK DMA7STA
        PUBWEAK DMA7STB
        PUBWEAK DOENDL
        PUBWEAK DOSTARTL
        PUBWEAK DSADR
        PUBWEAK IC1BUF
        PUBWEAK IC2BUF
        PUBWEAK IC3BUF
        PUBWEAK IC4BUF
        PUBWEAK IC5BUF
        PUBWEAK IC6BUF
        PUBWEAK IC7BUF
        PUBWEAK IC8BUF
        PUBWEAK OC1R
        PUBWEAK OC1RS
        PUBWEAK OC2R
        PUBWEAK OC2RS
        PUBWEAK OC3R
        PUBWEAK OC3RS
        PUBWEAK OC4R
        PUBWEAK OC4RS
        PUBWEAK OC5R
        PUBWEAK OC5RS
        PUBWEAK OC6R
        PUBWEAK OC6RS
        PUBWEAK OC7R
        PUBWEAK OC7RS
        PUBWEAK OC8R
        PUBWEAK OC8RS
        PUBLIC OSCPUUsage
        PUBLIC OSCtxSwCtr
        PUBLIC OSEventFreeList
        PUBLIC OSEventNameGet
        FUNCTION OSEventNameGet,021203H
        LOCFRAME CSTACK, 6, STACK
        PUBLIC OSEventNameSet
        FUNCTION OSEventNameSet,021203H
        LOCFRAME CSTACK, 14, STACK
        PUBLIC OSEventPendMulti
        FUNCTION OSEventPendMulti,021203H
        LOCFRAME CSTACK, 28, STACK
        PUBLIC OSEventTbl
        PUBLIC OSFlagFreeList
        PUBLIC OSFlagTbl
        PUBLIC OSIdleCtr
        PUBLIC OSIdleCtrMax
        PUBLIC OSIdleCtrRun
        PUBLIC OSInit
        FUNCTION OSInit,021203H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OSIntEnter
        FUNCTION OSIntEnter,0203H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OSIntExit
        FUNCTION OSIntExit,021203H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OSIntNesting
        PUBLIC OSLockNesting
        PUBLIC OSMemFreeList
        PUBLIC OSMemTbl
        PUBLIC OSPrioCur
        PUBLIC OSPrioHighRdy
        PUBLIC OSQFreeList
        PUBLIC OSQTbl
        PUBLIC OSRdyGrp
        PUBLIC OSRdyTbl
        PUBLIC OSRunning
        PUBLIC OSSchedLock
        FUNCTION OSSchedLock,0203H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OSSchedUnlock
        FUNCTION OSSchedUnlock,021203H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OSStart
        FUNCTION OSStart,021203H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OSStatInit
        FUNCTION OSStatInit,021203H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OSStatRdy
        PUBLIC OSTCBCur
        PUBLIC OSTCBFreeList
        PUBLIC OSTCBHighRdy
        PUBLIC OSTCBList
        PUBLIC OSTCBPrioTbl
        PUBLIC OSTCBTbl
        PUBLIC OSTaskCtr
        PUBLIC OSTaskIdleStk
        PUBLIC OSTaskStatStk
        PUBLIC OSTickStepState
        PUBLIC OSTime
        PUBLIC OSTimeTick
        FUNCTION OSTimeTick,021203H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OSTmrFree
        PUBLIC OSTmrFreeList
        PUBLIC OSTmrSem
        PUBLIC OSTmrSemSignal
        PUBLIC OSTmrTaskStk
        PUBLIC OSTmrTbl
        PUBLIC OSTmrTime
        PUBLIC OSTmrUsed
        PUBLIC OSTmrWheelTbl
        PUBLIC OSUnMapTbl
        PUBLIC OSVersion
        FUNCTION OSVersion,0203H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OS_Dummy
        FUNCTION OS_Dummy,0203H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OS_EventTaskRdy
        FUNCTION OS_EventTaskRdy,021203H
        LOCFRAME CSTACK, 10, STACK
        PUBLIC OS_EventTaskRemove
        FUNCTION OS_EventTaskRemove,0203H
        ARGFRAME CSTACK, 10, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC OS_EventTaskRemoveMulti
        FUNCTION OS_EventTaskRemoveMulti,0203H
        ARGFRAME CSTACK, 28, STACK
        LOCFRAME CSTACK, 6, STACK
        PUBLIC OS_EventTaskWait
        FUNCTION OS_EventTaskWait,0203H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OS_EventTaskWaitMulti
        FUNCTION OS_EventTaskWaitMulti,0203H
        ARGFRAME CSTACK, 28, STACK
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OS_EventWaitListInit
        FUNCTION OS_EventWaitListInit,0203H
        LOCFRAME CSTACK, 2, STACK
        FUNCTION OS_InitEventList,021203H
        LOCFRAME CSTACK, 2, STACK
        FUNCTION OS_InitMisc,0203H
        LOCFRAME CSTACK, 2, STACK
        FUNCTION OS_InitRdyList,0203H
        LOCFRAME CSTACK, 2, STACK
        FUNCTION OS_InitTCBList,021203H
        LOCFRAME CSTACK, 2, STACK
        FUNCTION OS_InitTaskIdle,021203H
        LOCFRAME CSTACK, 10, STACK
        FUNCTION OS_InitTaskStat,021203H
        LOCFRAME CSTACK, 10, STACK
        PUBLIC OS_MemClr
        FUNCTION OS_MemClr,0203H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OS_MemCopy
        FUNCTION OS_MemCopy,0203H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OS_Sched
        FUNCTION OS_Sched,021203H
        ARGFRAME CSTACK, 28, STACK
        LOCFRAME CSTACK, 2, STACK
        FUNCTION OS_SchedNew,0203H
        ARGFRAME CSTACK, 2, STACK
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OS_StrCopy
        FUNCTION OS_StrCopy,0203H
        ARGFRAME CSTACK, 14, STACK
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OS_StrLen
        FUNCTION OS_StrLen,0203H
        ARGFRAME CSTACK, 14, STACK
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OS_TCBInit
        FUNCTION OS_TCBInit,021203H
        LOCFRAME CSTACK, 14, STACK
        PUBLIC OS_TaskIdle
        FUNCTION OS_TaskIdle,021603H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OS_TaskStat
        FUNCTION OS_TaskStat,021603H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OS_TaskStatStkChk
        FUNCTION OS_TaskStatStkChk,021203H
        LOCFRAME CSTACK, 10, STACK
        PUBWEAK PCL
        PUBWEAK PR1
        PUBWEAK PR2
        PUBWEAK PR3
        PUBWEAK PR4
        PUBWEAK PR5
        PUBWEAK PR6
        PUBWEAK PR7
        PUBWEAK PR8
        PUBWEAK PR9
        PUBWEAK RXBUF0
        PUBWEAK RXBUF1
        PUBWEAK RXBUF2
        PUBWEAK RXBUF3
        PUBWEAK SPI1BUF
        PUBWEAK SPI2BUF
        PUBWEAK SPLIM
        PUBWEAK TMR1
        PUBWEAK TMR2
        PUBWEAK TMR3
        PUBWEAK TMR3HLD
        PUBWEAK TMR4
        PUBWEAK TMR5
        PUBWEAK TMR5HLD
        PUBWEAK TMR6
        PUBWEAK TMR7
        PUBWEAK TMR7HLD
        PUBWEAK TMR8
        PUBWEAK TMR9
        PUBWEAK TMR9HLD
        PUBWEAK TXBUF0
        PUBWEAK TXBUF1
        PUBWEAK TXBUF2
        PUBWEAK TXBUF3
        PUBWEAK U1BRG
        PUBWEAK U2BRG
        PUBWEAK WREG0
        PUBWEAK WREG1
        PUBWEAK WREG10
        PUBWEAK WREG11
        PUBWEAK WREG12
        PUBWEAK WREG13
        PUBWEAK WREG14
        PUBWEAK WREG15
        PUBWEAK WREG2
        PUBWEAK WREG3
        PUBWEAK WREG4
        PUBWEAK WREG5
        PUBWEAK WREG6
        PUBWEAK WREG7
        PUBWEAK WREG8
        PUBWEAK WREG9
        PUBWEAK XMODEND
        PUBWEAK XMODSRT
        PUBWEAK YMODEND
        PUBWEAK YMODSRT
        PUBWEAK _A_AD1BUF0
        PUBWEAK _A_AD1CHS0
        PUBWEAK _A_AD1CHS123
        PUBWEAK _A_AD1CON1
        PUBWEAK _A_AD1CON2
        PUBWEAK _A_AD1CON3
        PUBWEAK _A_AD1CON4
        PUBWEAK _A_AD1CSSL
        PUBWEAK _A_AD1PCFGH
        PUBWEAK _A_AD1PCFGL
        PUBWEAK _A_AD2BUF0
        PUBWEAK _A_AD2CHS0
        PUBWEAK _A_AD2CHS123
        PUBWEAK _A_AD2CON1
        PUBWEAK _A_AD2CON2
        PUBWEAK _A_AD2CON3
        PUBWEAK _A_AD2CON4
        PUBWEAK _A_AD2CSSL
        PUBWEAK _A_AD2PCFG
        PUBWEAK _A_C1BUFPNT3
        PUBWEAK _A_C1BUFPNT4
        PUBWEAK _A_C1CFG1
        PUBWEAK _A_C1CFG2
        PUBWEAK _A_C1CTRL1
        PUBWEAK _A_C1CTRL2
        PUBWEAK _A_C1FCTRL
        PUBWEAK _A_C1FEN1
        PUBWEAK _A_C1FIFO
        PUBWEAK _A_C1FMSKSEL1
        PUBWEAK _A_C1FMSKSEL2
        PUBWEAK _A_C1INTE
        PUBWEAK _A_C1INTF
        PUBWEAK _A_C1RXF0EID
        PUBWEAK _A_C1RXF0SID
        PUBWEAK _A_C1RXF10EID
        PUBWEAK _A_C1RXF10SID
        PUBWEAK _A_C1RXF11EID
        PUBWEAK _A_C1RXF11SID
        PUBWEAK _A_C1RXF12EID
        PUBWEAK _A_C1RXF12SID
        PUBWEAK _A_C1RXF13EID
        PUBWEAK _A_C1RXF13SID
        PUBWEAK _A_C1RXF14EID
        PUBWEAK _A_C1RXF14SID
        PUBWEAK _A_C1RXF15EID
        PUBWEAK _A_C1RXF15SID
        PUBWEAK _A_C1RXF1EID
        PUBWEAK _A_C1RXF1SID
        PUBWEAK _A_C1RXF2EID
        PUBWEAK _A_C1RXF2SID
        PUBWEAK _A_C1RXF3EID
        PUBWEAK _A_C1RXF3SID
        PUBWEAK _A_C1RXF4EID
        PUBWEAK _A_C1RXF4SID
        PUBWEAK _A_C1RXF5EID
        PUBWEAK _A_C1RXF5SID
        PUBWEAK _A_C1RXF6EID
        PUBWEAK _A_C1RXF6SID
        PUBWEAK _A_C1RXF7EID
        PUBWEAK _A_C1RXF7SID
        PUBWEAK _A_C1RXF8EID
        PUBWEAK _A_C1RXF8SID
        PUBWEAK _A_C1RXF9EID
        PUBWEAK _A_C1RXF9SID
        PUBWEAK _A_C1RXFUL1
        PUBWEAK _A_C1RXFUL2
        PUBWEAK _A_C1RXM2EID
        PUBWEAK _A_C1RXM2SID
        PUBWEAK _A_C1RXOVF1
        PUBWEAK _A_C1RXOVF2
        PUBWEAK _A_C1TR01CON
        PUBWEAK _A_C1TR23CON
        PUBWEAK _A_C1TR45CON
        PUBWEAK _A_C1TR67CON
        PUBWEAK _A_C1VEC
        PUBWEAK _A_C2BUFPNT3
        PUBWEAK _A_C2BUFPNT4
        PUBWEAK _A_C2CFG1
        PUBWEAK _A_C2CFG2
        PUBWEAK _A_C2CTRL1
        PUBWEAK _A_C2CTRL2
        PUBWEAK _A_C2FCTRL
        PUBWEAK _A_C2FEN1
        PUBWEAK _A_C2FIFO
        PUBWEAK _A_C2FMSKSEL1
        PUBWEAK _A_C2FMSKSEL2
        PUBWEAK _A_C2INTE
        PUBWEAK _A_C2INTF
        PUBWEAK _A_C2RXF0EID
        PUBWEAK _A_C2RXF0SID
        PUBWEAK _A_C2RXF10EID
        PUBWEAK _A_C2RXF10SID
        PUBWEAK _A_C2RXF11EID
        PUBWEAK _A_C2RXF11SID
        PUBWEAK _A_C2RXF12EID
        PUBWEAK _A_C2RXF12SID
        PUBWEAK _A_C2RXF13EID
        PUBWEAK _A_C2RXF13SID
        PUBWEAK _A_C2RXF14EID
        PUBWEAK _A_C2RXF14SID
        PUBWEAK _A_C2RXF15EID
        PUBWEAK _A_C2RXF15SID
        PUBWEAK _A_C2RXF1EID
        PUBWEAK _A_C2RXF1SID
        PUBWEAK _A_C2RXF2EID
        PUBWEAK _A_C2RXF2SID
        PUBWEAK _A_C2RXF3EID
        PUBWEAK _A_C2RXF3SID
        PUBWEAK _A_C2RXF4EID
        PUBWEAK _A_C2RXF4SID
        PUBWEAK _A_C2RXF5EID
        PUBWEAK _A_C2RXF5SID
        PUBWEAK _A_C2RXF6EID
        PUBWEAK _A_C2RXF6SID
        PUBWEAK _A_C2RXF7EID
        PUBWEAK _A_C2RXF7SID
        PUBWEAK _A_C2RXF8EID
        PUBWEAK _A_C2RXF8SID
        PUBWEAK _A_C2RXF9EID
        PUBWEAK _A_C2RXF9SID
        PUBWEAK _A_C2RXFUL1
        PUBWEAK _A_C2RXFUL2
        PUBWEAK _A_C2RXM2EID
        PUBWEAK _A_C2RXM2SID
        PUBWEAK _A_C2RXOVF1
        PUBWEAK _A_C2RXOVF2
        PUBWEAK _A_C2TR01CON
        PUBWEAK _A_C2TR23CON
        PUBWEAK _A_C2TR45CON
        PUBWEAK _A_C2TR67CON
        PUBWEAK _A_C2VEC
        PUBWEAK _A_CLKDIV
        PUBWEAK _A_CNEN1
        PUBWEAK _A_CNEN2
        PUBWEAK _A_CNPU1
        PUBWEAK _A_CNPU2
        PUBWEAK _A_CORCON
        PUBWEAK _A_DCICON1
        PUBWEAK _A_DCICON2
        PUBWEAK _A_DCICON3
        PUBWEAK _A_DCISTAT
        PUBWEAK _A_DCOUNT
        PUBWEAK _A_DISICNT
        PUBWEAK _A_DMA0CON
        PUBWEAK _A_DMA0REQ
        PUBWEAK _A_DMA1CON
        PUBWEAK _A_DMA1REQ
        PUBWEAK _A_DMA2CON
        PUBWEAK _A_DMA2REQ
        PUBWEAK _A_DMA3CON
        PUBWEAK _A_DMA3REQ
        PUBWEAK _A_DMA4CON
        PUBWEAK _A_DMA4REQ
        PUBWEAK _A_DMA5CON
        PUBWEAK _A_DMA5REQ
        PUBWEAK _A_DMA6CON
        PUBWEAK _A_DMA6REQ
        PUBWEAK _A_DMA7CON
        PUBWEAK _A_DMA7REQ
        PUBWEAK _A_DMACS0
        PUBWEAK _A_DMACS1
        PUBWEAK _A_DOENDH
        PUBWEAK _A_DOSTARTH
        PUBWEAK _A_I2C1ADD
        PUBWEAK _A_I2C1BRG
        PUBWEAK _A_I2C1CON
        PUBWEAK _A_I2C1MSK
        PUBWEAK _A_I2C1RCV
        PUBWEAK _A_I2C1STAT
        PUBWEAK _A_I2C1TRN
        PUBWEAK _A_I2C2ADD
        PUBWEAK _A_I2C2BRG
        PUBWEAK _A_I2C2CON
        PUBWEAK _A_I2C2MSK
        PUBWEAK _A_I2C2RCV
        PUBWEAK _A_I2C2STAT
        PUBWEAK _A_I2C2TRN
        PUBWEAK _A_IC1CON
        PUBWEAK _A_IC2CON
        PUBWEAK _A_IC3CON
        PUBWEAK _A_IC4CON
        PUBWEAK _A_IC5CON
        PUBWEAK _A_IC6CON
        PUBWEAK _A_IC7CON
        PUBWEAK _A_IC8CON
        PUBWEAK _A_IEC0
        PUBWEAK _A_IEC1
        PUBWEAK _A_IEC2
        PUBWEAK _A_IEC3
        PUBWEAK _A_IEC4
        PUBWEAK _A_IFS0
        PUBWEAK _A_IFS1
        PUBWEAK _A_IFS2
        PUBWEAK _A_IFS3
        PUBWEAK _A_IFS4
        PUBWEAK _A_INTCON1
        PUBWEAK _A_INTCON2
        PUBWEAK _A_INTREG
        PUBWEAK _A_IPC0
        PUBWEAK _A_IPC1
        PUBWEAK _A_IPC10
        PUBWEAK _A_IPC11
        PUBWEAK _A_IPC12
        PUBWEAK _A_IPC13
        PUBWEAK _A_IPC14
        PUBWEAK _A_IPC15
        PUBWEAK _A_IPC16
        PUBWEAK _A_IPC17
        PUBWEAK _A_IPC2
        PUBWEAK _A_IPC3
        PUBWEAK _A_IPC4
        PUBWEAK _A_IPC5
        PUBWEAK _A_IPC6
        PUBWEAK _A_IPC7
        PUBWEAK _A_IPC8
        PUBWEAK _A_IPC9
        PUBWEAK _A_LATA
        PUBWEAK _A_LATB
        PUBWEAK _A_LATC
        PUBWEAK _A_LATD
        PUBWEAK _A_LATE
        PUBWEAK _A_LATF
        PUBWEAK _A_LATG
        PUBWEAK _A_MODCON
        PUBWEAK _A_NVMCON
        PUBWEAK _A_NVMKEY
        PUBWEAK _A_OC1CON
        PUBWEAK _A_OC2CON
        PUBWEAK _A_OC3CON
        PUBWEAK _A_OC4CON
        PUBWEAK _A_OC5CON
        PUBWEAK _A_OC6CON
        PUBWEAK _A_OC7CON
        PUBWEAK _A_OC8CON
        PUBWEAK _A_ODCA
        PUBWEAK _A_ODCF
        PUBWEAK _A_OSCCON
        PUBWEAK _A_OSCTUN
        PUBWEAK _A_PCH
        PUBWEAK _A_PLLFBD
        PUBWEAK _A_PMD1
        PUBWEAK _A_PMD2
        PUBWEAK _A_PMD3
        PUBWEAK _A_PORTA
        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTC
        PUBWEAK _A_PORTD
        PUBWEAK _A_PORTE
        PUBWEAK _A_PORTF
        PUBWEAK _A_PORTG
        PUBWEAK _A_PSVPAG
        PUBWEAK _A_RCON
        PUBWEAK _A_RCOUNT
        PUBWEAK _A_RSCON
        PUBWEAK _A_SPI1CON1
        PUBWEAK _A_SPI1CON2
        PUBWEAK _A_SPI1STAT
        PUBWEAK _A_SPI2CON1
        PUBWEAK _A_SPI2CON2
        PUBWEAK _A_SPI2STAT
        PUBWEAK _A_SR
        PUBWEAK _A_T1CON
        PUBWEAK _A_T2CON
        PUBWEAK _A_T3CON
        PUBWEAK _A_T4CON
        PUBWEAK _A_T5CON
        PUBWEAK _A_T6CON
        PUBWEAK _A_T7CON
        PUBWEAK _A_T8CON
        PUBWEAK _A_T9CON
        PUBWEAK _A_TBLPAG
        PUBWEAK _A_TRISA
        PUBWEAK _A_TRISB
        PUBWEAK _A_TRISC
        PUBWEAK _A_TRISD
        PUBWEAK _A_TRISE
        PUBWEAK _A_TRISF
        PUBWEAK _A_TRISG
        PUBWEAK _A_TSCON
        PUBWEAK _A_U1MODE
        PUBWEAK _A_U1RXREG
        PUBWEAK _A_U1STA
        PUBWEAK _A_U1TXREG
        PUBWEAK _A_U2MODE
        PUBWEAK _A_U2RXREG
        PUBWEAK _A_U2STA
        PUBWEAK _A_U2TXREG
        PUBWEAK _A_XBREV
        
        CFI Names cfiNames0
        CFI StackFrame CFA W15 DATA
        CFI Resource W0:16, W1:16, W2:16, W3:16, W4:16, W5:16, W6:16, W7:16
        CFI Resource W8:16, W9:16, W10:16, W11:16, W12:16, W13:16, W14:16
        CFI Resource W15:16
        CFI VirtualResource ACCAU:8, ACCBU:8, ACCAH:16, ACCBH:16, ACCAL:16
        CFI VirtualResource ACCBL:16, ?RET1:1, ?RET:24, ?RET25:25
        CFI ResourceParts ?RET25 ?RET, ?RET1
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign -2
        CFI ReturnAddress ?RET25 CODE
        CFI CFA W15+-4
        CFI W0 Undefined
        CFI W1 Undefined
        CFI W2 Undefined
        CFI W3 Undefined
        CFI W4 Undefined
        CFI W5 Undefined
        CFI W6 Undefined
        CFI W7 Undefined
        CFI W8 Undefined
        CFI W9 Undefined
        CFI W10 SameValue
        CFI W11 SameValue
        CFI W12 SameValue
        CFI W13 SameValue
        CFI W14 Undefined
        CFI ACCAU Undefined
        CFI ACCBU SameValue
        CFI ACCAH Undefined
        CFI ACCBH SameValue
        CFI ACCAL Undefined
        CFI ACCBL SameValue
        CFI ?RET1 0
        CFI ?RET Frame(CFA, 0)
        CFI ?RET25 Concat
        CFI EndCommon cfiCommon0
        
        EXTERN OSInitHookBegin
        FUNCTION OSInitHookBegin,0202H
        EXTERN OS_FlagInit
        FUNCTION OS_FlagInit,0202H
        EXTERN OS_MemInit
        FUNCTION OS_MemInit,0202H
        EXTERN OS_QInit
        FUNCTION OS_QInit,0202H
        EXTERN OSTmr_Init
        FUNCTION OSTmr_Init,0202H
        EXTERN OSInitHookEnd
        FUNCTION OSInitHookEnd,0202H
        EXTERN OSDebugInit
        FUNCTION OSDebugInit,0202H
        EXTERN OSIntCtxSw
        FUNCTION OSIntCtxSw,0202H
        ARGFRAME CSTACK, 2, STACK
        EXTERN OSStartHighRdy
        FUNCTION OSStartHighRdy,0202H
        EXTERN OSTimeDly
        FUNCTION OSTimeDly,0202H
        EXTERN OSTimeTickHook
        FUNCTION OSTimeTickHook,0202H
        EXTERN OSTaskCreateExt
        FUNCTION OSTaskCreateExt,0202H
        ARGFRAME CSTACK, 10, STACK
        EXTERN OSTaskNameSet
        FUNCTION OSTaskNameSet,0202H
        ARGFRAME CSTACK, 10, STACK
        EXTERN OSCtxSw
        FUNCTION OSCtxSw,0202H
        ARGFRAME CSTACK, 2, STACK
        EXTERN OSTaskIdleHook
        FUNCTION OSTaskIdleHook,0202H
        EXTERN OSTaskSuspend
        FUNCTION OSTaskSuspend,0202H
        EXTERN OSTaskStatHook
        FUNCTION OSTaskStatHook,0202H
        EXTERN OSTaskStkChk
        FUNCTION OSTaskStkChk,0202H
        ARGFRAME CSTACK, 10, STACK
        EXTERN OSTCBInitHook
        FUNCTION OSTCBInitHook,0202H
        ARGFRAME CSTACK, 14, STACK
        EXTERN OSTaskCreateHook
        FUNCTION OSTaskCreateHook,0202H
        ARGFRAME CSTACK, 14, STACK


        ASEGN SFR_A:DATA:ROOT,00H
// unsigned short volatile __sfr WREG0
WREG0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02H
// unsigned short volatile __sfr WREG1
WREG1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,04H
// unsigned short volatile __sfr WREG2
WREG2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,06H
// unsigned short volatile __sfr WREG3
WREG3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,08H
// unsigned short volatile __sfr WREG4
WREG4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0aH
// unsigned short volatile __sfr WREG5
WREG5:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0cH
// unsigned short volatile __sfr WREG6
WREG6:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0eH
// unsigned short volatile __sfr WREG7
WREG7:
        DS 2

        ASEGN SFR_A:DATA:ROOT,010H
// unsigned short volatile __sfr WREG8
WREG8:
        DS 2

        ASEGN SFR_A:DATA:ROOT,012H
// unsigned short volatile __sfr WREG9
WREG9:
        DS 2

        ASEGN SFR_A:DATA:ROOT,014H
// unsigned short volatile __sfr WREG10
WREG10:
        DS 2

        ASEGN SFR_A:DATA:ROOT,016H
// unsigned short volatile __sfr WREG11
WREG11:
        DS 2

        ASEGN SFR_A:DATA:ROOT,018H
// unsigned short volatile __sfr WREG12
WREG12:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01aH
// unsigned short volatile __sfr WREG13
WREG13:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01cH
// unsigned short volatile __sfr WREG14
WREG14:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01eH
// unsigned short volatile __sfr WREG15
WREG15:
        DS 2

        ASEGN SFR_A:DATA:ROOT,020H
// unsigned short volatile __sfr SPLIM
SPLIM:
        DS 2

        ASEGN SFR_A:DATA:ROOT,022H
// unsigned short volatile __sfr ACCAL
ACCAL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,024H
// unsigned short volatile __sfr ACCAH
ACCAH:
        DS 2

        ASEGN SFR_A:DATA:ROOT,026H
// unsigned short volatile __sfr ACCAU
ACCAU:
        DS 2

        ASEGN SFR_A:DATA:ROOT,028H
// unsigned short volatile __sfr ACCBL
ACCBL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02aH
// unsigned short volatile __sfr ACCBH
ACCBH:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02cH
// unsigned short volatile __sfr ACCBU
ACCBU:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02eH
// unsigned short volatile __sfr PCL
PCL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03aH
// unsigned short volatile __sfr DOSTARTL
DOSTARTL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03eH
// unsigned short volatile __sfr DOENDL
DOENDL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,048H
// unsigned short volatile __sfr XMODSRT
XMODSRT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,04aH
// unsigned short volatile __sfr XMODEND
XMODEND:
        DS 2

        ASEGN SFR_A:DATA:ROOT,04cH
// unsigned short volatile __sfr YMODSRT
YMODSRT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,04eH
// unsigned short volatile __sfr YMODEND
YMODEND:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0100H
// unsigned short volatile __sfr TMR1
TMR1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0102H
// unsigned short volatile __sfr PR1
PR1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0106H
// unsigned short volatile __sfr TMR2
TMR2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0108H
// unsigned short volatile __sfr TMR3HLD
TMR3HLD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,010aH
// unsigned short volatile __sfr TMR3
TMR3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,010cH
// unsigned short volatile __sfr PR2
PR2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,010eH
// unsigned short volatile __sfr PR3
PR3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0114H
// unsigned short volatile __sfr TMR4
TMR4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0116H
// unsigned short volatile __sfr TMR5HLD
TMR5HLD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0118H
// unsigned short volatile __sfr TMR5
TMR5:
        DS 2

        ASEGN SFR_A:DATA:ROOT,011aH
// unsigned short volatile __sfr PR4
PR4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,011cH
// unsigned short volatile __sfr PR5
PR5:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0122H
// unsigned short volatile __sfr TMR6
TMR6:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0124H
// unsigned short volatile __sfr TMR7HLD
TMR7HLD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0126H
// unsigned short volatile __sfr TMR7
TMR7:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0128H
// unsigned short volatile __sfr PR6
PR6:
        DS 2

        ASEGN SFR_A:DATA:ROOT,012aH
// unsigned short volatile __sfr PR7
PR7:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0130H
// unsigned short volatile __sfr TMR8
TMR8:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0132H
// unsigned short volatile __sfr TMR9HLD
TMR9HLD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0134H
// unsigned short volatile __sfr TMR9
TMR9:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0136H
// unsigned short volatile __sfr PR8
PR8:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0138H
// unsigned short volatile __sfr PR9
PR9:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0140H
// unsigned short volatile __sfr IC1BUF
IC1BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0144H
// unsigned short volatile __sfr IC2BUF
IC2BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0148H
// unsigned short volatile __sfr IC3BUF
IC3BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,014cH
// unsigned short volatile __sfr IC4BUF
IC4BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0150H
// unsigned short volatile __sfr IC5BUF
IC5BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0154H
// unsigned short volatile __sfr IC6BUF
IC6BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0158H
// unsigned short volatile __sfr IC7BUF
IC7BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,015cH
// unsigned short volatile __sfr IC8BUF
IC8BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0180H
// unsigned short volatile __sfr OC1RS
OC1RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0182H
// unsigned short volatile __sfr OC1R
OC1R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0186H
// unsigned short volatile __sfr OC2RS
OC2RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0188H
// unsigned short volatile __sfr OC2R
OC2R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,018cH
// unsigned short volatile __sfr OC3RS
OC3RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,018eH
// unsigned short volatile __sfr OC3R
OC3R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0192H
// unsigned short volatile __sfr OC4RS
OC4RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0194H
// unsigned short volatile __sfr OC4R
OC4R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0198H
// unsigned short volatile __sfr OC5RS
OC5RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,019aH
// unsigned short volatile __sfr OC5R
OC5R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,019eH
// unsigned short volatile __sfr OC6RS
OC6RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01a0H
// unsigned short volatile __sfr OC6R
OC6R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01a4H
// unsigned short volatile __sfr OC7RS
OC7RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01a6H
// unsigned short volatile __sfr OC7R
OC7R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01aaH
// unsigned short volatile __sfr OC8RS
OC8RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01acH
// unsigned short volatile __sfr OC8R
OC8R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0228H
// unsigned short volatile __sfr U1BRG
U1BRG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0238H
// unsigned short volatile __sfr U2BRG
U2BRG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0248H
// unsigned short volatile __sfr SPI1BUF
SPI1BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0268H
// unsigned short volatile __sfr SPI2BUF
SPI2BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0290H
// unsigned short volatile __sfr RXBUF0
RXBUF0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0292H
// unsigned short volatile __sfr RXBUF1
RXBUF1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0294H
// unsigned short volatile __sfr RXBUF2
RXBUF2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0296H
// unsigned short volatile __sfr RXBUF3
RXBUF3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0298H
// unsigned short volatile __sfr TXBUF0
TXBUF0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,029aH
// unsigned short volatile __sfr TXBUF1
TXBUF1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,029cH
// unsigned short volatile __sfr TXBUF2
TXBUF2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,029eH
// unsigned short volatile __sfr TXBUF3
TXBUF3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,032eH
// unsigned short volatile __sfr AD1CSSH
AD1CSSH:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0384H
// unsigned short volatile __sfr DMA0STA
DMA0STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0386H
// unsigned short volatile __sfr DMA0STB
DMA0STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0388H
// unsigned short volatile __sfr DMA0PAD
DMA0PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,038aH
// unsigned short volatile __sfr DMA0CNT
DMA0CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0390H
// unsigned short volatile __sfr DMA1STA
DMA1STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0392H
// unsigned short volatile __sfr DMA1STB
DMA1STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0394H
// unsigned short volatile __sfr DMA1PAD
DMA1PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0396H
// unsigned short volatile __sfr DMA1CNT
DMA1CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,039cH
// unsigned short volatile __sfr DMA2STA
DMA2STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,039eH
// unsigned short volatile __sfr DMA2STB
DMA2STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03a0H
// unsigned short volatile __sfr DMA2PAD
DMA2PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03a2H
// unsigned short volatile __sfr DMA2CNT
DMA2CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03a8H
// unsigned short volatile __sfr DMA3STA
DMA3STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03aaH
// unsigned short volatile __sfr DMA3STB
DMA3STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03acH
// unsigned short volatile __sfr DMA3PAD
DMA3PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03aeH
// unsigned short volatile __sfr DMA3CNT
DMA3CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03b4H
// unsigned short volatile __sfr DMA4STA
DMA4STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03b6H
// unsigned short volatile __sfr DMA4STB
DMA4STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03b8H
// unsigned short volatile __sfr DMA4PAD
DMA4PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03baH
// unsigned short volatile __sfr DMA4CNT
DMA4CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03c0H
// unsigned short volatile __sfr DMA5STA
DMA5STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03c2H
// unsigned short volatile __sfr DMA5STB
DMA5STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03c4H
// unsigned short volatile __sfr DMA5PAD
DMA5PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03c6H
// unsigned short volatile __sfr DMA5CNT
DMA5CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03ccH
// unsigned short volatile __sfr DMA6STA
DMA6STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03ceH
// unsigned short volatile __sfr DMA6STB
DMA6STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03d0H
// unsigned short volatile __sfr DMA6PAD
DMA6PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03d2H
// unsigned short volatile __sfr DMA6CNT
DMA6CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03d8H
// unsigned short volatile __sfr DMA7STA
DMA7STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03daH
// unsigned short volatile __sfr DMA7STB
DMA7STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03dcH
// unsigned short volatile __sfr DMA7PAD
DMA7PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03deH
// unsigned short volatile __sfr DMA7CNT
DMA7CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03e4H
// unsigned short volatile __sfr DSADR
DSADR:
        DS 2

        RSEG MEM_Z:DATA:NOROOT(1)
// INT32U __mem OSCtxSwCtr
OSCtxSwCtr:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// struct os_event *__mem OSEventFreeList
OSEventFreeList:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// OS_EVENT __mem OSEventTbl[20]
OSEventTbl:
        DS 680
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// OS_FLAG_GRP __mem OSFlagTbl[5]
OSFlagTbl:
        DS 120
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// struct os_flag_grp *__mem OSFlagFreeList
OSFlagFreeList:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(0)
// INT8U __mem OSCPUUsage
OSCPUUsage:
        DS 1
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// INT32U __mem OSIdleCtrMax
OSIdleCtrMax:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// INT32U __mem OSIdleCtrRun
OSIdleCtrRun:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(0)
// BOOLEAN __mem OSStatRdy
OSStatRdy:
        DS 1
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// OS_STK __mem OSTaskStatStk[160]
OSTaskStatStk:
        DS 320
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(0)
// INT8U __mem OSIntNesting
OSIntNesting:
        DS 1
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(0)
// INT8U __mem OSLockNesting
OSLockNesting:
        DS 1
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(0)
// INT8U __mem OSPrioCur
OSPrioCur:
        DS 1
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(0)
// INT8U __mem OSPrioHighRdy
OSPrioHighRdy:
        DS 1
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(0)
// INT8U __mem OSRdyGrp
OSRdyGrp:
        DS 1
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(0)
// INT8U __mem OSRdyTbl[8]
OSRdyTbl:
        DS 8
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(0)
// BOOLEAN __mem OSRunning
OSRunning:
        DS 1
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(0)
// INT8U __mem OSTaskCtr
OSTaskCtr:
        DS 1
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// INT32U volatile __mem OSIdleCtr
OSIdleCtr:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// OS_STK __mem OSTaskIdleStk[128]
OSTaskIdleStk:
        DS 256
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// struct os_tcb *__mem OSTCBCur
OSTCBCur:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// struct os_tcb *__mem OSTCBFreeList
OSTCBFreeList:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// struct os_tcb *__mem OSTCBHighRdy
OSTCBHighRdy:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// struct os_tcb *__mem OSTCBList
OSTCBList:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// struct os_tcb *__mem OSTCBPrioTbl[64]
OSTCBPrioTbl:
        DS 256
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// OS_TCB __mem OSTCBTbl[22]
OSTCBTbl:
        DS 2024
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(0)
// INT8U __mem OSTickStepState
OSTickStepState:
        DS 1
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// struct os_mem *__mem OSMemFreeList
OSMemFreeList:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// OS_MEM __mem OSMemTbl[5]
OSMemTbl:
        DS 180
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// OS_Q *__mem OSQFreeList
OSQFreeList:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// OS_Q __mem OSQTbl[4]
OSQTbl:
        DS 96
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// INT32U volatile __mem OSTime
OSTime:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// INT16U __mem OSTmrFree
OSTmrFree:
        DS 2
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// INT16U __mem OSTmrUsed
OSTmrUsed:
        DS 2
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// INT32U __mem OSTmrTime
OSTmrTime:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// struct os_event *__mem OSTmrSem
OSTmrSem:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// struct os_event *__mem OSTmrSemSignal
OSTmrSemSignal:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// OS_TMR __mem OSTmrTbl[16]
OSTmrTbl:
        DS 768
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// struct os_tmr *__mem OSTmrFreeList
OSTmrFreeList:
        DS 4
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// OS_STK __mem OSTmrTaskStk[160]
OSTmrTaskStk:
        DS 320
	REQUIRE __INIT_MEM_Z

        RSEG MEM_Z:DATA:NOROOT(1)
// OS_TMR_WHEEL __mem OSTmrWheelTbl[8]
OSTmrWheelTbl:
        DS 48
	REQUIRE __INIT_MEM_Z

        RSEG CONST:CODE:REORDER:NOROOT(1)
OSUnMapTbl:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 4
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 5
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 4
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 6
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 4
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 5
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 4
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 7
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 4
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 5
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 4
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 6
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 4
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 5
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 4
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0

        RSEG CODE:CODE:NOROOT(2)
OSEventNameGet:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function OSEventNameGet
        FUNCALL OSEventNameGet, OS_StrCopy
        LOCFRAME CSTACK, 6, STACK
        ARGFRAME CSTACK, 6, STACK
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV       W12,[W15++]
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-10
        ; Saved register size: 6
        ; Auto size: 0
        MOV.D     W0,W6
        MOV.D     W2,W8
        MOV.D     W4,W10
        MOV       #OSIntNesting,W0
        CP0.b     [W0]
        BRA       Z, ??OS_TCBInit_0
        BTST.C    W11,#7
        BRA       NC, ??OS_TCBInit_1
        MOV.b     #17,W11
        MOV.b     W11,[W10]
        BRA       ??OS_TCBInit_1
??OS_TCBInit_0:
        MOV.D     W6,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_2
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_3
??OS_TCBInit_2:
        MOV.b     [W0],W2
??OS_TCBInit_3:
        SUB.b     #1,W2
        CP.b      W2,#4
        BRA       NC, ??OS_TCBInit_4
        BRA       ??OS_TCBInit_5
??OS_TCBInit_4:
        MOV       0x0042,W12
        MOV       #0x0042,W0
        MOV       #224,W1
        IOR       W1,[W0],[W0]
        ; Setup parameters for call to function OS_StrCopy
        ADD       #17,W6
        ADDC.b    W7,#0,W7
        MOV.D     W6,W2
        MOV.D     W8,W0
        CALL      OS_StrCopy
        ; DSP MODE; unknown 
        MOV       #0x0042,W1
        MOV       W12,[W1]
        BTST.C    W11,#7
        BRA       NC, ??OS_TCBInit_6
        CLR.b     [W10]
        BRA       ??OS_TCBInit_6
??OS_TCBInit_5:
        BTST.C    W11,#7
        BRA       NC, ??OS_TCBInit_1
        MOV.b     #1,W11
        MOV.b     W11,[W10]
??OS_TCBInit_1:
        MOV       #0,W0
??OS_TCBInit_6:
        MOV       [--W15],W12
        CFI W12 SameValue
        CFI CFA W15+-8
        MOV.D     [--W15],W10
        CFI W10 SameValue
        CFI W11 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock0
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSEventNameSet:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function OSEventNameSet
        FUNCALL OSEventNameSet, OS_StrLen
        LOCFRAME CSTACK, 14, STACK
        ARGFRAME CSTACK, 14, STACK
        FUNCALL OSEventNameSet, OS_StrCopy
        LOCFRAME CSTACK, 14, STACK
        ARGFRAME CSTACK, 14, STACK
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV       W12,[W15++]
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-10
        ; Saved register size: 6
        ; Auto size: 8
        ADD       #8,W15
        CFI CFA W15+-18
        MOV       W0,[W15-4]
        MOV       W1,[W15-2]
        MOV       W2,[W15-8]
        MOV       W3,[W15-6]
        MOV.D     W4,W10
        MOV       #OSIntNesting,W0
        CP0.b     [W0]
        BRA       Z, ??OS_TCBInit_7
        BTST.C    W11,#7
        BRA       NC, ??OS_TCBInit_8
        MOV.b     #18,W11
        MOV.b     W11,[W10]
        BRA       ??OS_TCBInit_8
??OS_TCBInit_7:
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_9
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_10
??OS_TCBInit_9:
        MOV.b     [W0],W2
??OS_TCBInit_10:
        SUB.b     #1,W2
        CP.b      W2,#4
        BRA       NC, ??OS_TCBInit_11
        BRA       ??OS_TCBInit_12
??OS_TCBInit_11:
        MOV       0x0042,W12
        MOV       #0x0042,W0
        MOV       #224,W1
        IOR       W1,[W0],[W0]
        ; Setup parameters for call to function OS_StrLen
        SUB       W15,#8,W0
        MOV.D     [W0],W0
        CALL      OS_StrLen
        ; DSP MODE; unknown 
        CP.b      W0,#16
        BRA       NC, ??OS_TCBInit_13
        MOV       #0x0042,W0
        MOV       W12,[W0]
        BTST.C    W11,#7
        BRA       NC, ??OS_TCBInit_8
        MOV.b     #11,W11
        MOV.b     W11,[W10]
        BRA       ??OS_TCBInit_8
??OS_TCBInit_12:
        BTST.C    W11,#7
        BRA       NC, ??OS_TCBInit_8
        MOV.b     #1,W11
        MOV.b     W11,[W10]
        BRA       ??OS_TCBInit_8
??OS_TCBInit_13:
        ; Setup parameters for call to function OS_StrCopy
        SUB       W15,#8,W0
        MOV.D     [W0],W2
        ADD       #4,W0
        MOV.D     [W0],W0
        ADD       #17,W0
        ADDC.b    W1,#0,W1
        CALL      OS_StrCopy
        ; DSP MODE; unknown 
        MOV       #0x0042,W0
        MOV       W12,[W0]
        BTST.C    W11,#7
        BRA       NC, ??OS_TCBInit_8
        CLR.b     [W10]
        CFI EndBlock cfiBlock1
??OS_TCBInit_8:
	REQUIRE ?CLDSPIC_1_21_L00
	REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG CODE:CODE:NOROOT(2)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA W15+-18
        CFI W10 Frame(CFA, 0)
        CFI W11 Frame(CFA, 2)
        CFI W12 Frame(CFA, 4)
        CFI Invalid
        SUB       #8,W15
        CFI CFA W15+-10
        MOV       [--W15],W12
        CFI CFA W15+-8
        CFI W12 SameValue
        MOV.D     [--W15],W10
        CFI CFA W15+-4
        CFI W10 SameValue
        CFI W11 SameValue
        RETURN    
        CFI EndBlock cfiBlock2
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSEventPendMulti:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function OSEventPendMulti
        FUNCALL OSEventPendMulti, OS_EventTaskWaitMulti
        LOCFRAME CSTACK, 28, STACK
        ARGFRAME CSTACK, 28, STACK
        FUNCALL OSEventPendMulti, OS_Sched
        LOCFRAME CSTACK, 28, STACK
        ARGFRAME CSTACK, 28, STACK
        FUNCALL OSEventPendMulti, OS_EventTaskRemoveMulti
        LOCFRAME CSTACK, 28, STACK
        ARGFRAME CSTACK, 28, STACK
        FUNCALL OSEventPendMulti, OS_EventTaskRemoveMulti
        LOCFRAME CSTACK, 28, STACK
        ARGFRAME CSTACK, 28, STACK
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV.D     W12,[W15++]
        CFI W13 Frame(CFA, 6)
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-12
        ; Saved register size: 8
        ; Auto size: 20
        ADD       #20,W15
        CFI CFA W15+-32
        MOV       W0,[W15-20]
        MOV       W1,[W15-18]
        MOV       W2,[W15-4]
        MOV       W3,[W15-2]
        MOV       W4,[W15-8]
        MOV       W5,[W15-6]
        MOV       W8,[W15-12]
        MOV       W9,[W15-10]
        MOV       W6,W9
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_14
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_14:
        SUB       W15,#20,W0
        MOV.D     [W0],W0
        MOV       W0,[W15-16]
        MOV       W1,[W15-14]
        SUB       W15,#16,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_15
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_16
??OS_TCBInit_15:
        MOV.D     [W0],W2
        BRA       ??OS_TCBInit_16
??OSEventPendMulti_0:
        MOV       #4,W0
        MOV       #0,W1
        SUB       W15,#16,W2
        ADD       W0,[W2++],W0
        ADDC.b    W1,[W2],W1
        MOV.b     W1,[W15-14]
        MOV       W0,[--W2]
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_17
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_16
??OS_TCBInit_17:
        MOV.D     [W0],W2
??OS_TCBInit_16:
        MOV.D     W2,W10
        CP0       W10
        CPB.b     W11,#0
        BRA       Z, ??OS_TCBInit_18
        MOV.D     W10,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_19
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_20
??OS_TCBInit_19:
        MOV.b     [W0],W2
??OS_TCBInit_20:
        SUB.b     #1,W2
        CP.b      W2,#3
        BRA       NC, ??OSEventPendMulti_0
        SUB       W15,#12,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_21
        MOV.b     #1,W1
        MOV.b     W1,[W0]
??OS_TCBInit_21:
        MOV       #0,W0
        BRA       ??OS_TCBInit_22
??OS_TCBInit_18:
        MOV       #OSIntNesting,W0
        CP0.b     [W0]
        BRA       Z, ??OS_TCBInit_23
        SUB       W15,#12,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_21
        MOV.b     #2,W1
        MOV.b     W1,[W0]
        BRA       ??OS_TCBInit_21
??OS_TCBInit_23:
        MOV       #OSLockNesting,W0
        CP0.b     [W0]
        BRA       Z, ??OS_TCBInit_24
        SUB       W15,#12,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_21
        MOV.b     #13,W1
        MOV.b     W1,[W0]
        BRA       ??OS_TCBInit_21
??OS_TCBInit_24:
        MOV       0x0042,W12
        MOV       #0x0042,W0
        MOV       #224,W1
        IOR       W1,[W0],[W0]
        MOV       #0,W6
        MOV       #0,W13
        MOV       #0,W8
        SUB       W15,#20,W0
        MOV.D     [W0],W0
        MOV       W0,[W15-16]
        MOV       W1,[W15-14]
        SUB       W15,#16,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_25
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_26
??OS_TCBInit_25:
        MOV.D     [W0],W2
        BRA       ??OS_TCBInit_26
??OSEventPendMulti_1:
        MOV.D     W10,W0
        ADD       #6,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_27
        CALL      ?CONST_SHORT
        BRA       ??OS_TCBInit_28
??OS_TCBInit_27:
        MOV       [W0],W2
??OS_TCBInit_28:
        DEC       W2,W2
        MOV.D     W10,W0
        ADD       #6,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_29
        MOV       W2,[W0]
??OS_TCBInit_29:
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_30
        MOV.D     W10,[W0]
??OS_TCBInit_30:
        MOV       #4,W0
        MOV       #0,W1
        SUB       W15,#4,W2
        ADD       W0,[W2],[W2++]
        ADDC.b    W1,[W2],[W2]
        MOV       #1,W6
        SUB       W15,#8,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_31
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_31:
        MOV       #4,W0
        MOV       #0,W1
        SUB       W15,#8,W2
        ADD       W0,[W2],[W2++]
        ADDC.b    W1,[W2],[W2]
??OSEventPendMulti_2:
        INC       W13,W13
??OSEventPendMulti_3:
        MOV       #4,W0
        MOV       #0,W1
        SUB       W15,#16,W2
        ADD       W0,[W2++],W0
        ADDC.b    W1,[W2],W1
        MOV.b     W1,[W15-14]
        MOV       W0,[--W2]
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_32
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_26
??OS_TCBInit_32:
        MOV.D     [W0],W2
??OS_TCBInit_26:
        MOV.D     W2,W10
        CP0       W10
        CPB.b     W11,#0
        BRA       Z, ??OS_TCBInit_33
        MOV.D     W10,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_34
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_35
??OS_TCBInit_34:
        MOV.b     [W0],W2
??OS_TCBInit_35:
        XOR.b     #1,W2
        BRA       Z, ??OS_TCBInit_36
        XOR.b     #3,W2
        BRA       Z, ??OS_TCBInit_37
        XOR.b     #1,W2
        BRA       Z, ??OS_TCBInit_38
        BRA       ??OS_TCBInit_39
??OS_TCBInit_38:
        MOV.D     W10,W0
        ADD       #6,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_40
        CALL      ?CONST_SHORT
        BRA       ??OS_TCBInit_41
??OS_TCBInit_40:
        MOV       [W0],W2
??OS_TCBInit_41:
        CP0       W2
        BRA       NZ, ??OSEventPendMulti_1
        IOR.b     #1,W8
        BRA       ??OSEventPendMulti_3
??OS_TCBInit_36:
        MOV.D     W10,W0
        INC2      W0,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_42
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_43
??OS_TCBInit_42:
        MOV.D     [W0],W2
??OS_TCBInit_43:
        CP0       W2
        CPB.b     W3,#0
        BRA       Z, ??OS_TCBInit_44
        MOV.D     W10,W0
        INC2      W0,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_45
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_46
??OS_TCBInit_45:
        MOV.D     [W0],W2
??OS_TCBInit_46:
        SUB       W15,#8,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_47
        MOV.D     W2,[W0]
??OS_TCBInit_47:
        MOV       #4,W0
        MOV       #0,W1
        SUB       W15,#8,W2
        ADD       W0,[W2],[W2++]
        ADDC.b    W1,[W2],[W2]
        MOV.D     W10,W0
        INC2      W0,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_48
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_48:
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_49
        MOV.D     W10,[W0]
??OS_TCBInit_49:
        MOV       #4,W0
        MOV       #0,W1
        INC2      W2,W2
??OSEventPendMulti_4:
        ADD       W0,[W2],[W2++]
        ADDC.b    W1,[W2],[W2]
        MOV       #1,W6
        BRA       ??OSEventPendMulti_2
??OS_TCBInit_44:
        IOR.b     #2,W8
        BRA       ??OSEventPendMulti_3
??OS_TCBInit_37:
        MOV.D     W10,W0
        INC2      W0,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_50
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_51
??OS_TCBInit_50:
        MOV.D     [W0],W2
??OS_TCBInit_51:
        MOV.D     W2,W4
        MOV.D     W2,W0
        ADD       #22,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_52
        CALL      ?CONST_SHORT
        BRA       ??OS_TCBInit_53
??OS_TCBInit_52:
        MOV       [W0],W2
??OS_TCBInit_53:
        CP0       W2
        BRA       Z, ??OS_TCBInit_54
        MOV       W4,W0
        MOV       W3,W1
        ADD       #16,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_55
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_56
??OS_TCBInit_55:
        MOV.D     [W0],W2
??OS_TCBInit_56:
        MOV.D     W2,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_57
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_58
??OS_TCBInit_57:
        MOV.D     [W0],W2
??OS_TCBInit_58:
        SUB       W15,#8,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_59
        MOV.D     W2,[W0]
??OS_TCBInit_59:
        MOV.D     W4,W0
        ADD       #16,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_60
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_61
??OS_TCBInit_60:
        MOV.D     [W0],W2
??OS_TCBInit_61:
        ADD       #4,W2
        ADDC.b    W3,#0,W3
        MOV.D     W4,W0
        ADD       #16,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_62
        MOV.D     W2,[W0]
??OS_TCBInit_62:
        MOV       #4,W0
        MOV       #0,W1
        SUB       W15,#8,W2
        ADD       W0,[W2],[W2++]
        ADDC.b    W1,[W2],[W2]
        MOV.D     W4,W0
        ADD       #16,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_63
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_64
??OS_TCBInit_63:
        MOV.D     [W0],W2
??OS_TCBInit_64:
        MOV.D     W2,W6
        MOV.D     W4,W0
        ADD       #8,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_65
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_66
??OS_TCBInit_65:
        MOV.D     [W0],W2
??OS_TCBInit_66:
        CP        W6,W2
        CPB.b     W7,W3
        BRA       NZ, ??OS_TCBInit_67
        MOV.D     W4,W0
        ADD       #4,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_68
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_69
??OS_TCBInit_68:
        MOV.D     [W0],W2
??OS_TCBInit_69:
        MOV.D     W4,W0
        ADD       #16,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_67
        MOV.D     W2,[W0]
??OS_TCBInit_67:
        MOV.D     W4,W0
        ADD       #22,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_70
        CALL      ?CONST_SHORT
        BRA       ??OS_TCBInit_71
??OS_TCBInit_70:
        MOV       [W0],W2
??OS_TCBInit_71:
        DEC       W2,W0
        ADD       #22,W4
        ADDC.b    W5,#0,W5
        BTST.C    W5,#7
        BRA       NC, ??OS_TCBInit_72
        MOV       W0,[W4]
??OS_TCBInit_72:
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_73
        MOV.D     W10,[W0]
??OS_TCBInit_73:
        MOV       #4,W0
        MOV       #0,W1
        SUB       W15,#4,W2
        BRA       ??OSEventPendMulti_4
??OS_TCBInit_54:
        IOR.b     #4,W8
        BRA       ??OSEventPendMulti_3
??OS_TCBInit_39:
        MOV       #0x0042,W0
        MOV       W12,[W0]
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_74
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_74:
        SUB       W15,#12,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_75
        MOV.b     #1,W1
        MOV.b     W1,[W0]
        BRA       ??OS_TCBInit_75
??OS_TCBInit_33:
        CP.b      W6,#1
        BRA       NZ, ??OS_TCBInit_76
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_77
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_77:
        MOV       #0x0042,W0
        MOV       W12,[W0]
        SUB       W15,#12,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_75
        MOV.b     #0,W1
        CLR.b     [W0]
        BRA       ??OS_TCBInit_75
??OS_TCBInit_76:
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #48,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_78
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_79
??OS_TCBInit_78:
        MOV.b     [W0],W2
??OS_TCBInit_79:
        MOV       #-128,W0
        IOR.b     W0,W8,W0
        IOR.b     W0,W2,W0
        MOV       #OSTCBCur,W1
        MOV.D     [W1],W2
        ADD       #48,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_80
        MOV.b     W0,[W2]
??OS_TCBInit_80:
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #49,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_81
        CLR.b     [W0]
??OS_TCBInit_81:
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #46,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_82
        MOV       W9,[W0]
??OS_TCBInit_82:
        ; Setup parameters for call to function OS_EventTaskWaitMulti
        SUB       W15,#20,W0
        MOV.D     [W0],W0
        CALL      OS_EventTaskWaitMulti
        MOV       #0x0042,W0
        MOV       W12,[W0]
        ; Setup parameters for call to function OS_Sched
        CALL      OS_Sched
        ; DSP MODE; unknown 
        MOV       0x0042,W12
        MOV       #0x0042,W0
        MOV       #224,W1
        IOR       W1,[W0],[W0]
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #49,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_83
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_84
??OS_TCBInit_83:
        MOV.b     [W0],W2
??OS_TCBInit_84:
        XOR.b     #0,W2
        BRA       Z, ??OS_TCBInit_85
        XOR.b     #2,W2
        BRA       Z, ??OS_TCBInit_85
        BRA       ??OS_TCBInit_86
??OS_TCBInit_85:
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #28,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_87
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_88
??OS_TCBInit_87:
        MOV.D     [W0],W2
??OS_TCBInit_88:
        MOV.D     W2,W10
        CP0       W2
        CPB.b     W3,#0
        BRA       Z, ??OS_TCBInit_89
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_90
        MOV.D     W10,[W0]
??OS_TCBInit_90:
        MOV       #4,W0
        MOV       #0,W1
        SUB       W15,#4,W2
        ADD       W0,[W2++],W0
        ADDC.b    W1,[W2],W1
        MOV.b     W1,[W15-2]
        MOV       W0,[--W2]
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_91
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_91:
        INC       W13,W13
        BRA       ??OS_TCBInit_92
??OS_TCBInit_89:
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #49,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_86
        MOV.b     #1,W1
        MOV.b     W1,[W0]
??OS_TCBInit_86:
        ; Setup parameters for call to function OS_EventTaskRemoveMulti
        ; Setup parameters for call to function OS_EventTaskRemoveMulti
        SUB       W15,#20,W0
        MOV.D     [W0],W2
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        CALL      OS_EventTaskRemoveMulti
        ; DSP MODE; unknown 
??OS_TCBInit_92:
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #49,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_93
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_94
??OS_TCBInit_93:
        MOV.b     [W0],W2
??OS_TCBInit_94:
        XOR.b     #0,W2
        BRA       Z, ??OS_TCBInit_95
        XOR.b     #2,W2
        BRA       Z, ??OS_TCBInit_96
        BRA       ??OS_TCBInit_97
??OS_TCBInit_95:
        MOV.D     W10,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_98
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_99
??OS_TCBInit_98:
        MOV.b     [W0],W2
??OS_TCBInit_99:
        SUB.b     #1,W2
        CP.b      W2,#2
        BRA       NC, ??OS_TCBInit_100
        SUB.b     #2,W2
        BRA       Z, ??OS_TCBInit_101
        BRA       ??OS_TCBInit_102
??OS_TCBInit_101:
        SUB       W15,#8,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_103
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_103:
        SUB       W15,#12,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_104
        CLR.b     [W0]
        BRA       ??OS_TCBInit_104
??OS_TCBInit_100:
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #36,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_105
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_106
??OS_TCBInit_105:
        MOV.D     [W0],W2
??OS_TCBInit_106:
        SUB       W15,#8,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_103
        MOV.D     W2,[W0]
        BRA       ??OS_TCBInit_103
??OS_TCBInit_102:
        MOV       #0x0042,W0
        MOV       W12,[W0]
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_107
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_107:
        SUB       W15,#12,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_75
        MOV.b     #1,W1
        MOV.b     W1,[W0]
        BRA       ??OS_TCBInit_75
??OS_TCBInit_96:
        SUB       W15,#8,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_108
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_108:
        SUB       W15,#12,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_104
        MOV.b     #14,W1
        MOV.b     W1,[W0]
        BRA       ??OS_TCBInit_104
??OS_TCBInit_97:
        SUB       W15,#8,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_109
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_109:
        SUB       W15,#12,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_104
        MOV.b     #10,W1
        MOV.b     W1,[W0]
??OS_TCBInit_104:
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #48,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_110
        CLR.b     [W0]
??OS_TCBInit_110:
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #49,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_111
        CLR.b     [W0]
??OS_TCBInit_111:
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #28,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_112
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_112:
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #32,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_113
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_113:
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #36,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_114
        CLR       [W0++]
        MOV       #0,W1
        CLR       [W0]
??OS_TCBInit_114:
        MOV       #0x0042,W0
        MOV       W12,[W0]
??OS_TCBInit_75:
        MOV       W13,W0
??OS_TCBInit_22:
        SUB       #20,W15
        CFI CFA W15+-12
        MOV.D     [--W15],W12
        CFI W12 SameValue
        CFI W13 SameValue
        CFI CFA W15+-8
        MOV.D     [--W15],W10
        CFI W10 SameValue
        CFI W11 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock3
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSInit:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function OSInit
        FUNCALL OSInit, OSInitHookBegin
        FUNCALL OSInit, OS_InitMisc
        FUNCALL OSInit, OS_InitRdyList
        FUNCALL OSInit, OS_InitTCBList
        FUNCALL OSInit, OS_InitEventList
        FUNCALL OSInit, OS_FlagInit
        FUNCALL OSInit, OS_MemInit
        FUNCALL OSInit, OS_QInit
        FUNCALL OSInit, OS_InitTaskIdle
        FUNCALL OSInit, OS_InitTaskStat
        FUNCALL OSInit, OSTmr_Init
        FUNCALL OSInit, OSInitHookEnd
        FUNCALL OSInit, OSDebugInit
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function OSInitHookBegin
        CALL      OSInitHookBegin
        ; Setup parameters for call to function OS_InitMisc
        CALL      OS_InitMisc
        ; Setup parameters for call to function OS_InitRdyList
        CALL      OS_InitRdyList
        ; Setup parameters for call to function OS_InitTCBList
        CALL      OS_InitTCBList
        ; Setup parameters for call to function OS_InitEventList
        CALL      OS_InitEventList
        ; Setup parameters for call to function OS_FlagInit
        CALL      OS_FlagInit
        ; Setup parameters for call to function OS_MemInit
        CALL      OS_MemInit
        ; Setup parameters for call to function OS_QInit
        CALL      OS_QInit
        ; Setup parameters for call to function OS_InitTaskIdle
        CALL      OS_InitTaskIdle
        ; Setup parameters for call to function OS_InitTaskStat
        CALL      OS_InitTaskStat
        ; Setup parameters for call to function OSTmr_Init
        CALL      OSTmr_Init
        ; Setup parameters for call to function OSInitHookEnd
        CALL      OSInitHookEnd
        ; Setup parameters for call to function OSDebugInit
        CALL      OSDebugInit
        ; DSP MODE; unknown 
        RETURN    
        CFI EndBlock cfiBlock4
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSIntEnter:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function OSIntEnter
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV       #OSRunning,W0
        MOV.b     [W0],W0
        CP.b      W0,#1
        BRA       NZ, ??OS_TCBInit_115
        MOV       #OSIntNesting,W0
        MOV       #-1,W1
        CP.b      W1,[W0]
        BRA       Z, ??OS_TCBInit_115
        INC.b     [W0],[W0]
??OS_TCBInit_115:
        RETURN    
        CFI EndBlock cfiBlock5
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSIntExit:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function OSIntExit
        FUNCALL OSIntExit, OS_SchedNew
        LOCFRAME CSTACK, 2, STACK
        ARGFRAME CSTACK, 2, STACK
        FUNCALL OSIntExit, OSIntCtxSw
        LOCFRAME CSTACK, 2, STACK
        ARGFRAME CSTACK, 2, STACK
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV       W10,[W15++]
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-6
        ; Saved register size: 2
        ; Auto size: 0
        MOV       #OSRunning,W0
        MOV.b     [W0],W0
        CP.b      W0,#1
        BRA       NZ, ??OS_TCBInit_116
        MOV       0x0042,W10
        MOV       #0x0042,W0
        MOV       #224,W1
        IOR       W1,[W0],[W0]
        MOV       #OSIntNesting,W0
        CP0.b     [W0]
        BRA       Z, ??OS_TCBInit_117
        DEC.b     [W0],[W0]
??OS_TCBInit_117:
        CP0.b     [W0]
        BRA       NZ, ??OS_TCBInit_118
        MOV       #OSLockNesting,W0
        CP0.b     [W0]
        BRA       NZ, ??OS_TCBInit_118
        ; Setup parameters for call to function OS_SchedNew
        CALL      OS_SchedNew
        ; DSP MODE; unknown 
        MOV       #OSPrioHighRdy,W0
        MOV.b     [W0],W0
        MOV       #OSPrioCur,W1
        CP.b      W0,[W1]
        BRA       Z, ??OS_TCBInit_118
        MOV       #OSPrioHighRdy,W0
        ZE        [W0],W0
        SL        W0,#2,W0
        MOV       #OSTCBPrioTbl,W1
        ADD       W1,W0,W1
        MOV       #OSTCBHighRdy,W0
        MOV       [W1++],[W0++]
        MOV       [W1--],[W0--]
        MOV.D     [W0],W0
        ADD       #56,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_119
        CALL      ?CONST_LONG
        BRA       ??OS_TCBInit_120
??OS_TCBInit_119:
        MOV.D     [W0],W2
??OS_TCBInit_120:
        ADD       W2,#1,W0
        ADDC      W3,#0,W1
        MOV       #OSTCBHighRdy,W2
        MOV.D     [W2],W2
        ADD       #56,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_121
        MOV.D     W0,[W2]
??OS_TCBInit_121:
        MOV       #OSCtxSwCtr,W0
        MOV       #0,W3
        INC       [W0],[W0++]
        ADDC      W3,[W0],[W0--]
        ; Setup parameters for call to function OSIntCtxSw
        CALL      OSIntCtxSw
        ; DSP MODE; unknown 
??OS_TCBInit_118:
        MOV       #0x0042,W0
        MOV       W10,[W0]
??OS_TCBInit_116:
        MOV       [--W15],W10
        CFI W10 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock6
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSSchedLock:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function OSSchedLock
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV       #OSRunning,W0
        MOV.b     [W0],W0
        CP.b      W0,#1
        BRA       NZ, ??OS_TCBInit_122
        MOV       0x0042,W0
        MOV       #0x0042,W1
        MOV       #224,W2
        IOR       W2,[W1],[W1]
        MOV       #OSIntNesting,W1
        CP0.b     [W1]
        BRA       NZ, ??OS_TCBInit_123
        MOV       #OSLockNesting,W1
        MOV       #-1,W2
        CP.b      W2,[W1]
        BRA       Z, ??OS_TCBInit_123
        INC.b     [W1],[W1]
??OS_TCBInit_123:
        MOV       #0x0042,W1
        MOV       W0,[W1]
??OS_TCBInit_122:
        RETURN    
        CFI EndBlock cfiBlock7
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSSchedUnlock:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function OSSchedUnlock
        FUNCALL OSSchedUnlock, OS_Sched
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV       #OSRunning,W0
        MOV.b     [W0],W0
        CP.b      W0,#1
        BRA       NZ, ??OS_TCBInit_124
        MOV       0x0042,W0
        MOV       #0x0042,W1
        MOV       #224,W2
        IOR       W2,[W1],[W1]
        MOV       #OSLockNesting,W1
        CP0.b     [W1]
        BRA       Z, ??OS_TCBInit_125
        MOV       #-1,W2
        DEC.b     [W1],[W1]
        MOV.b     [W1],W1
        CP0.b     W1
        BRA       NZ, ??OS_TCBInit_125
        MOV       #OSIntNesting,W1
        CP0.b     [W1]
        BRA       NZ, ??OS_TCBInit_125
        MOV       #0x0042,W1
        MOV       W0,[W1]
        ; Setup parameters for call to function OS_Sched
        CALL      OS_Sched
        ; DSP MODE; unknown 
        RETURN    
??OS_TCBInit_125:
        MOV       #0x0042,W1
        MOV       W0,[W1]
??OS_TCBInit_124:
        RETURN    
        CFI EndBlock cfiBlock8
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSStart:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function OSStart
        FUNCALL OSStart, OS_SchedNew
        FUNCALL OSStart, OSStartHighRdy
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV       #OSRunning,W0
        CP0.b     [W0]
        BRA       NZ, ??OS_TCBInit_126
        ; Setup parameters for call to function OS_SchedNew
        CALL      OS_SchedNew
        MOV       #OSPrioHighRdy,W0
        MOV       #OSPrioCur,W1
        MOV.b     [W0],[W1]
        ZE        [W0],W0
        SL        W0,#2,W0
        MOV       #OSTCBPrioTbl,W1
        ADD       W1,W0,W1
        MOV       #OSTCBHighRdy,W0
        MOV       [W1++],[W0++]
        MOV       [W1--],[W0--]
        MOV       #OSTCBCur,W1
        MOV       [W0++],[W1++]
        MOV       [W0--],[W1--]
        ; Setup parameters for call to function OSStartHighRdy
        CALL      OSStartHighRdy
        ; DSP MODE; unknown 
??OS_TCBInit_126:
        RETURN    
        CFI EndBlock cfiBlock9
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSStatInit:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function OSStatInit
        FUNCALL OSStatInit, OSTimeDly
        FUNCALL OSStatInit, OSTimeDly
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function OSTimeDly
        MOV       #2,W0
        CALL      OSTimeDly
        MOV       0x0042,W0
        MOV       #0x0042,W1
        MOV       #224,W2
        IOR       W2,[W1],[W1]
        MOV       #OSIdleCtr,W1
        MOV       #0,W2
        CLR       [W1]
        MOV       W2,[W1+2]
        MOV       #0x0042,W1
        MOV       W0,[W1]
        ; Setup parameters for call to function OSTimeDly
        MOV       #100,W0
        CALL      OSTimeDly
        ; DSP MODE; unknown 
        MOV       0x0042,W0
        MOV       #0x0042,W1
        MOV       #224,W2
        IOR       W2,[W1],[W1]
        MOV       OSIdleCtr,W1
        MOV       W1,OSIdleCtrMax
        MOV       OSIdleCtr+2,W1
        MOV       W1,OSIdleCtrMax+2
        MOV       #1,W1
        MOV       #OSStatRdy,W2
        MOV.b     W1,[W2]
        MOV       #0x0042,W1
        MOV       W0,[W1]
        RETURN    
        CFI EndBlock cfiBlock10
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTimeTick:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function OSTimeTick
        FUNCALL OSTimeTick, OSTimeTickHook
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function OSTimeTickHook
        CALL      OSTimeTickHook
        ; DSP MODE; unknown 
        MOV       0x0042,W6
        MOV       #0x0042,W0
        MOV       #224,W1
        IOR       W1,[W0],[W0]
        MOV       #OSTime,W0
        MOV       #1,W2
        MOV       #0,W3
        INC       [W0],[W0++]
        ADDC      W3,[W0],[W0--]
        MOV       #0x0042,W0
        MOV       W6,[W0]
        MOV       #OSRunning,W0
        MOV.b     [W0],W0
        CP.b      W0,#1
        BRA       NZ, ??OS_TCBInit_127
        MOV       #OSTickStepState,W0
        MOV.b     [W0],W0
        XOR.b     #0,W0
        BRA       Z, ??OS_TCBInit_128
        XOR.b     #1,W0
        BRA       Z, ??OS_TCBInit_127
        XOR.b     #3,W0
        BRA       Z, ??OS_TCBInit_129
        BRA       ??OS_TCBInit_130
??OS_TCBInit_129:
        MOV       #1,W0
        MOV       #OSTickStepState,W1
        MOV.b     W0,[W1]
        BRA       ??OS_TCBInit_128
??OS_TCBInit_130:
        MOV       #OSTickStepState,W0
        CLR.b     [W0]
??OS_TCBInit_128:
        MOV       #OSTCBList,W0
        MOV.D     [W0],W4
        BRA       ??OS_TCBInit_131
??OSTimeTick_0:
        ADD       #49,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_132
        CLR.b     [W0]
??OS_TCBInit_132:
        MOV.D     W4,W0
        ADD       #48,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_133
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_134
??OS_TCBInit_133:
        MOV.b     [W0],W2
??OS_TCBInit_134:
        AND.b     W2,#8,W0
        BRA       NZ, ??OS_TCBInit_135
        MOV       #OSRdyGrp,W3
        MOV.D     W4,W0
        ADD       #54,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_136
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_137
??OS_TCBInit_136:
        MOV.b     [W0],W2
??OS_TCBInit_137:
        IOR.b     W2,[W3],[W3]
        MOV.D     W4,W0
        ADD       #52,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_138
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_139
??OS_TCBInit_138:
        MOV.b     [W0],W2
??OS_TCBInit_139:
        ZE        W2,W0
        MOV       #OSRdyTbl,W3
        ADD       W3,W0,W3
        MOV.D     W4,W0
        ADD       #53,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_140
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_141
??OS_TCBInit_140:
        MOV.b     [W0],W2
??OS_TCBInit_141:
        IOR.b     W2,[W3],[W3]
??OS_TCBInit_135:
        ADD       #20,W4
        ADDC.b    W5,#0,W5
        MOV.D     W4,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_142
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_143
??OS_TCBInit_142:
        MOV.D     [W0],W2
??OS_TCBInit_143:
        MOV.D     W2,W4
        MOV       #0x0042,W0
        MOV       W6,[W0]
??OS_TCBInit_131:
        MOV.D     W4,W0
        ADD       #50,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_144
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_145
??OS_TCBInit_144:
        MOV.b     [W0],W2
??OS_TCBInit_145:
        MOV       #63,W0
        CP.b      W2,W0
        BRA       Z, ??OS_TCBInit_127
        MOV       0x0042,W6
        MOV       #0x0042,W0
        MOV       #224,W1
        IOR       W1,[W0],[W0]
        MOV.D     W4,W0
        ADD       #46,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_146
        CALL      ?CONST_SHORT
        BRA       ??OS_TCBInit_147
??OS_TCBInit_146:
        MOV       [W0],W2
??OS_TCBInit_147:
        CP0       W2
        BRA       Z, ??OS_TCBInit_135
        MOV.D     W4,W0
        ADD       #46,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_148
        CALL      ?CONST_SHORT
        BRA       ??OS_TCBInit_149
??OS_TCBInit_148:
        MOV       [W0],W2
??OS_TCBInit_149:
        DEC       W2,W0
        MOV.D     W4,W2
        ADD       #46,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_150
        MOV       W0,[W2]
??OS_TCBInit_150:
        MOV.D     W4,W0
        ADD       #46,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_151
        CALL      ?CONST_SHORT
        BRA       ??OS_TCBInit_152
??OS_TCBInit_151:
        MOV       [W0],W2
??OS_TCBInit_152:
        CP0       W2
        BRA       NZ, ??OS_TCBInit_135
        MOV.D     W4,W0
        ADD       #48,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_153
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_154
??OS_TCBInit_153:
        MOV.b     [W0],W2
??OS_TCBInit_154:
        AND.b     #55,W2
        MOV.D     W4,W0
        BRA       Z, ??OSTimeTick_0
        ADD       #48,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_155
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_156
??OS_TCBInit_155:
        MOV.b     [W0],W2
??OS_TCBInit_156:
        MOV       #-56,W0
        AND.b     W0,W2,W0
        MOV.D     W4,W2
        ADD       #48,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_157
        MOV.b     W0,[W2]
??OS_TCBInit_157:
        MOV.D     W4,W0
        ADD       #49,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_132
        MOV.b     #1,W1
        MOV.b     W1,[W0]
        BRA       ??OS_TCBInit_132
??OS_TCBInit_127:
        RETURN    
        CFI EndBlock cfiBlock11
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSVersion:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function OSVersion
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV       #286,W0
        RETLW     #286,W0
        CFI EndBlock cfiBlock12
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_Dummy:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function OS_Dummy
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        RETURN    
        CFI EndBlock cfiBlock13
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_EventTaskRdy:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function OS_EventTaskRdy
        FUNCALL OS_EventTaskRdy, OS_EventTaskRemove
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
        FUNCALL OS_EventTaskRdy, OS_EventTaskRemoveMulti
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV       W12,[W15++]
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-10
        ; Saved register size: 6
        ; Auto size: 4
        ADD       #4,W15
        CFI CFA W15+-14
        MOV       W0,[W15-4]
        MOV       W1,[W15-2]
        MOV.D     W2,W6
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        ADD       #8,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_158
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_159
??OS_TCBInit_158:
        MOV.b     [W0],W2
??OS_TCBInit_159:
        ZE        W2,W2
        MOV       #LWRD((OSUnMapTbl)/2),W0
        MOV       #HWRD((OSUnMapTbl)/2),W1
        ADD       W0,W2,W0
        ADDC.b    W1,#0,W1
        CALL      ?CONST_CHAR
        SL        W2,#3,W10
        MOV       W2,W3
        ZE        W3,W8
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        ADD       #9,W0
        ADDC.b    W1,#0,W1
        ADD       W0,W8,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_160
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_161
??OS_TCBInit_160:
        MOV.b     [W0],W2
??OS_TCBInit_161:
        ZE        W2,W8
        MOV       #LWRD((OSUnMapTbl)/2),W0
        MOV       #HWRD((OSUnMapTbl)/2),W1
        ADD       W0,W8,W0
        ADDC.b    W1,#0,W1
        CALL      ?CONST_CHAR
        ADD.b     W2,W10,W12
        ZE        W12,W0
        SL        W0,#2,W0
        MOV       #OSTCBPrioTbl,W1
        ADD       W1,W0,W1
        MOV.D     [W1],W10
        MOV.D     W10,W0
        ADD       #46,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_162
        CLR       [W0]
??OS_TCBInit_162:
        MOV.D     W10,W0
        ADD       #36,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_163
        MOV.D     W6,[W0]
??OS_TCBInit_163:
        MOV.D     W10,W0
        ADD       #48,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_164
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_165
??OS_TCBInit_164:
        MOV.b     [W0],W2
??OS_TCBInit_165:
        COM.b     W4,W0
        AND.b     W0,W2,W0
        MOV.D     W10,W6
        ADD       #48,W6
        ADDC.b    W7,#0,W7
        BTST.C    W7,#7
        BRA       NC, ??OS_TCBInit_166
        MOV.b     W0,[W6]
??OS_TCBInit_166:
        MOV.D     W10,W0
        ADD       #49,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_167
        MOV.b     W5,[W0]
??OS_TCBInit_167:
        MOV.D     W10,W0
        ADD       #48,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_168
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_169
??OS_TCBInit_168:
        MOV.b     [W0],W2
??OS_TCBInit_169:
        AND.b     W2,#8,W0
        BRA       NZ, ??OS_TCBInit_170
        MOV       #OSRdyGrp,W4
        MOV.D     W10,W0
        ADD       #54,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_171
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_172
??OS_TCBInit_171:
        MOV.b     [W0],W2
??OS_TCBInit_172:
        IOR.b     W2,[W4],[W4]
        ZE        W3,W0
        MOV       #OSRdyTbl,W3
        ADD       W3,W0,W3
        MOV.D     W10,W0
        ADD       #53,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_173
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_174
??OS_TCBInit_173:
        MOV.b     [W0],W2
??OS_TCBInit_174:
        IOR.b     W2,[W3],[W3]
??OS_TCBInit_170:
        ; Setup parameters for call to function OS_EventTaskRemove
        SUB       W15,#4,W0
        MOV.D     [W0],W2
        MOV.D     W10,W0
        CALL      OS_EventTaskRemove
        ; DSP MODE; unknown 
        MOV.D     W10,W0
        ADD       #32,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_175
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_176
??OS_TCBInit_175:
        MOV.D     [W0],W2
??OS_TCBInit_176:
        MOV       #0,W1
        CP0       W2
        CPB.b     W3,#0
        BRA       Z, ??OS_TCBInit_177
        ; Setup parameters for call to function OS_EventTaskRemoveMulti
        MOV.D     W10,W0
        ADD       #32,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_178
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_179
??OS_TCBInit_178:
        MOV.D     [W0],W2
??OS_TCBInit_179:
        MOV.D     W10,W0
        CALL      OS_EventTaskRemoveMulti
        ; DSP MODE; unknown 
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        ADD       #28,W10
        ADDC.b    W11,#0,W11
        BTST.C    W11,#7
        BRA       NC, ??OS_TCBInit_177
        MOV.D     W0,[W10]
??OS_TCBInit_177:
        MOV       W12,W0
        SUB       #4,W15
        CFI CFA W15+-10
        MOV       [--W15],W12
        CFI W12 SameValue
        CFI CFA W15+-8
        MOV.D     [--W15],W10
        CFI W10 SameValue
        CFI W11 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock14
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_EventTaskWait:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function OS_EventTaskWait
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV.D     W0,W4
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #28,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_180
        MOV.D     W4,[W0]
??OS_TCBInit_180:
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #52,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_181
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_182
??OS_TCBInit_181:
        MOV.b     [W0],W2
??OS_TCBInit_182:
        ZE        W2,W2
        MOV.D     W4,W0
        ADD       #9,W0
        ADDC.b    W1,#0,W1
        ADD       W0,W2,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_183
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_184
??OS_TCBInit_183:
        MOV.b     [W0],W2
??OS_TCBInit_184:
        MOV       W2,W3
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #53,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_185
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_186
??OS_TCBInit_185:
        MOV.b     [W0],W2
??OS_TCBInit_186:
        IOR.b     W2,W3,W3
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #52,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_187
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_188
??OS_TCBInit_187:
        MOV.b     [W0],W2
??OS_TCBInit_188:
        ZE        W2,W0
        MOV.D     W4,W6
        ADD       #9,W6
        ADDC.b    W5,#0,W7
        ADD       W6,W0,W6
        ADDC.b    W7,#0,W7
        BTST.C    W7,#7
        BRA       NC, ??OS_TCBInit_189
        MOV.b     W3,[W6]
??OS_TCBInit_189:
        MOV.D     W4,W0
        ADD       #8,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_190
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_191
??OS_TCBInit_190:
        MOV.b     [W0],W2
??OS_TCBInit_191:
        MOV       W2,W3
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #54,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_192
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_193
??OS_TCBInit_192:
        MOV.b     [W0],W2
??OS_TCBInit_193:
        IOR.b     W2,W3,W0
        ADD       #8,W4
        ADDC.b    W5,#0,W5
        BTST.C    W5,#7
        BRA       NC, ??OS_TCBInit_194
        MOV.b     W0,[W4]
??OS_TCBInit_194:
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #52,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_195
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_196
??OS_TCBInit_195:
        MOV.b     [W0],W2
??OS_TCBInit_196:
        MOV       W2,W3
        ZE        W3,W0
        MOV       #OSRdyTbl,W4
        ADD       W4,W0,W4
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #53,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_197
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_198
??OS_TCBInit_197:
        MOV.b     [W0],W2
??OS_TCBInit_198:
        COM.b     W2,W0
        AND.b     W0,[W4],[W4]
        ZE        W3,W0
        MOV       #OSRdyTbl,W1
        MOV.b     [W1+W0],W0
        CP0.b     W0
        BRA       NZ, ??OS_TCBInit_199
        MOV       #OSRdyGrp,W3
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #54,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_200
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_201
??OS_TCBInit_200:
        MOV.b     [W0],W2
??OS_TCBInit_201:
        COM.b     W2,W0
        AND.b     W0,[W3],[W3]
??OS_TCBInit_199:
        RETURN    
        CFI EndBlock cfiBlock15
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_EventTaskWaitMulti:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function OS_EventTaskWaitMulti
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV       #OSTCBCur,W2
        MOV.D     [W2],W2
        ADD       #28,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_202
        CLR       [W2++]
        CLR       [W2]
??OS_TCBInit_202:
        MOV       #OSTCBCur,W2
        MOV.D     [W2],W2
        ADD       #32,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_203
        MOV.D     W0,[W2]
??OS_TCBInit_203:
        MOV.D     W0,W6
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_204
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_205
??OS_TCBInit_204:
        MOV.D     [W0],W2
        BRA       ??OS_TCBInit_205
??OS_EventTaskWaitMulti_0:
        ADD       #52,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_206
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_207
??OS_TCBInit_206:
        MOV.b     [W0],W2
??OS_TCBInit_207:
        ZE        W2,W2
        MOV.D     W4,W0
        ADD       #9,W0
        ADDC.b    W1,#0,W1
        ADD       W0,W2,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_208
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_209
??OS_TCBInit_208:
        MOV.b     [W0],W2
??OS_TCBInit_209:
        MOV       W2,W3
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #53,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_210
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_211
??OS_TCBInit_210:
        MOV.b     [W0],W2
??OS_TCBInit_211:
        IOR.b     W2,W3,W3
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #52,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_212
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_213
??OS_TCBInit_212:
        MOV.b     [W0],W2
??OS_TCBInit_213:
        ZE        W2,W0
        MOV.D     W4,W8
        ADD       #9,W8
        ADDC.b    W5,#0,W9
        ADD       W8,W0,W8
        ADDC.b    W9,#0,W9
        BTST.C    W9,#7
        BRA       NC, ??OS_TCBInit_214
        MOV.b     W3,[W8]
??OS_TCBInit_214:
        MOV.D     W4,W0
        ADD       #8,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_215
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_216
??OS_TCBInit_215:
        MOV.b     [W0],W2
??OS_TCBInit_216:
        MOV       W2,W3
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #54,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_217
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_218
??OS_TCBInit_217:
        MOV.b     [W0],W2
??OS_TCBInit_218:
        IOR.b     W2,W3,W0
        ADD       #8,W4
        ADDC.b    W5,#0,W5
        BTST.C    W5,#7
        BRA       NC, ??OS_TCBInit_219
        MOV.b     W0,[W4]
??OS_TCBInit_219:
        MOV       #0,W1
        ADD       #4,W6
        ADDC.b    W7,#0,W7
        MOV.b     W7,W1
        MOV       W6,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_220
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_205
??OS_TCBInit_220:
        MOV.D     [W0],W2
??OS_TCBInit_205:
        MOV.D     W2,W4
        CP0       W4
        CPB.b     W5,#0
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        BRA       NZ, ??OS_EventTaskWaitMulti_0
        ADD       #52,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_221
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_222
??OS_TCBInit_221:
        MOV.b     [W0],W2
??OS_TCBInit_222:
        MOV       W2,W3
        ZE        W3,W0
        MOV       #OSRdyTbl,W4
        ADD       W4,W0,W4
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #53,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_223
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_224
??OS_TCBInit_223:
        MOV.b     [W0],W2
??OS_TCBInit_224:
        COM.b     W2,W0
        AND.b     W0,[W4],[W4]
        ZE        W3,W0
        MOV       #OSRdyTbl,W1
        MOV.b     [W1+W0],W0
        CP0.b     W0
        BRA       NZ, ??OS_TCBInit_225
        MOV       #OSRdyGrp,W3
        MOV       #OSTCBCur,W0
        MOV.D     [W0],W0
        ADD       #54,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_226
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_227
??OS_TCBInit_226:
        MOV.b     [W0],W2
??OS_TCBInit_227:
        COM.b     W2,W0
        AND.b     W0,[W3],[W3]
??OS_TCBInit_225:
        RETURN    
        CFI EndBlock cfiBlock16
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_EventTaskRemove:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function OS_EventTaskRemove
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        ; Saved register size: 4
        ; Auto size: 0
        MOV.D     W0,W6
        MOV.D     W2,W4
        ADD       #52,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_228
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_229
??OS_TCBInit_228:
        MOV.b     [W0],W2
??OS_TCBInit_229:
        MOV       W2,W8
        ZE        W8,W2
        MOV       W4,W0
        MOV       W3,W1
        ADD       #9,W0
        ADDC.b    W1,#0,W1
        ADD       W0,W2,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_230
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_231
??OS_TCBInit_230:
        MOV.b     [W0],W2
??OS_TCBInit_231:
        MOV       W2,W3
        MOV.D     W6,W0
        ADD       #53,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_232
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_233
??OS_TCBInit_232:
        MOV.b     [W0],W2
??OS_TCBInit_233:
        COM.b     W2,W0
        AND.b     W0,W3,W2
        ZE        W8,W0
        MOV.D     W4,W10
        ADD       #9,W10
        ADDC.b    W5,#0,W11
        ADD       W10,W0,W10
        ADDC.b    W11,#0,W11
        BTST.C    W11,#7
        BRA       NC, ??OS_TCBInit_234
        MOV.b     W2,[W10]
??OS_TCBInit_234:
        ZE        W8,W2
        MOV       #0,W3
        MOV.D     W4,W0
        ADD       #9,W0
        ADDC.b    W1,#0,W1
        ADD       W0,W2,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_235
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_236
??OS_TCBInit_235:
        MOV.b     [W0],W2
??OS_TCBInit_236:
        CP0.b     W2
        BRA       NZ, ??OS_TCBInit_237
        MOV.D     W4,W0
        ADD       #8,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_238
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_239
??OS_TCBInit_238:
        MOV.b     [W0],W2
??OS_TCBInit_239:
        MOV       W2,W3
        ADD       #54,W6
        ADDC.b    W7,#0,W7
        MOV.D     W6,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_240
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_241
??OS_TCBInit_240:
        MOV.b     [W0],W2
??OS_TCBInit_241:
        COM.b     W2,W0
        AND.b     W0,W3,W0
        ADD       #8,W4
        ADDC.b    W5,#0,W5
        BTST.C    W5,#7
        BRA       NC, ??OS_TCBInit_237
        MOV.b     W0,[W4]
??OS_TCBInit_237:
        MOV.D     [--W15],W10
        CFI W10 SameValue
        CFI W11 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock17
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_EventTaskRemoveMulti:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function OS_EventTaskRemoveMulti
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV       W12,[W15++]
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-10
        ; Saved register size: 6
        ; Auto size: 0
        MOV.D     W0,W6
        MOV       W2,W4
        ADD       #52,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_242
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_243
??OS_TCBInit_242:
        MOV.b     [W0],W2
??OS_TCBInit_243:
        MOV       W2,W8
        MOV.D     W6,W0
        ADD       #54,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_244
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_245
??OS_TCBInit_244:
        MOV.b     [W0],W2
??OS_TCBInit_245:
        MOV       W2,W9
        ADD       #53,W6
        ADDC.b    W7,#0,W7
        MOV.D     W6,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_246
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_247
??OS_TCBInit_246:
        MOV.b     [W0],W2
??OS_TCBInit_247:
        MOV       W2,W10
        MOV       W4,W6
        MOV       W3,W7
        MOV.D     W6,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_248
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_249
??OS_TCBInit_248:
        MOV.D     [W0],W2
        BRA       ??OS_TCBInit_249
??OS_EventTaskRemoveMulti_0:
        ZE        W8,W2
        MOV.D     W4,W0
        ADD       #9,W0
        ADDC.b    W1,#0,W1
        ADD       W0,W2,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_250
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_251
??OS_TCBInit_250:
        MOV.b     [W0],W2
??OS_TCBInit_251:
        COM.b     W10,W0
        AND.b     W0,W2,W11
        ZE        W8,W0
        MOV.D     W4,W2
        ADD       #9,W2
        ADDC.b    W3,#0,W3
        ADD       W2,W0,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_252
        MOV.b     W11,[W2]
??OS_TCBInit_252:
        ZE        W8,W2
        MOV.D     W4,W0
        ADD       #9,W0
        ADDC.b    W1,#0,W1
        ADD       W0,W2,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_253
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_254
??OS_TCBInit_253:
        MOV.b     [W0],W2
??OS_TCBInit_254:
        CP0.b     W2
        BRA       NZ, ??OS_TCBInit_255
        MOV.D     W4,W0
        ADD       #8,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_256
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_257
??OS_TCBInit_256:
        MOV.b     [W0],W2
??OS_TCBInit_257:
        COM.b     W9,W0
        AND.b     W0,W2,W0
        ADD       #8,W4
        ADDC.b    W5,#0,W5
        BTST.C    W5,#7
        BRA       NC, ??OS_TCBInit_255
        MOV.b     W0,[W4]
??OS_TCBInit_255:
        MOV       #0,W1
        ADD       #4,W6
        ADDC.b    W7,#0,W7
        MOV.b     W7,W1
        MOV       W6,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_258
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_249
??OS_TCBInit_258:
        MOV.D     [W0],W2
??OS_TCBInit_249:
        MOV.D     W2,W4
        MOV       #0,W0
        MOV       #0,W1
        CP0       W4
        CPB.b     W5,#0
        BRA       NZ, ??OS_EventTaskRemoveMulti_0
        MOV       [--W15],W12
        CFI W12 SameValue
        CFI CFA W15+-8
        MOV.D     [--W15],W10
        CFI W10 SameValue
        CFI W11 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock18
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_EventWaitListInit:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function OS_EventWaitListInit
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV.D     W0,W2
        ADD       #8,W2
        ADDC.b    W1,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_259
        CLR.b     [W2]
??OS_TCBInit_259:
        ADD       #9,W0
        ADDC.b    W1,#0,W1
        MOV       #8,W2
??OS_EventWaitListInit_0:
        MOV.D     W0,W4
        BTST.C    W5,#7
        BRA       NC, ??OS_TCBInit_260
        MOV.b     #0,W5
        CLR.b     [W4]
??OS_TCBInit_260:
        INC       W0,W0
        ADDC.b    #0,W1
        MOV       #-1,W3
        DEC.b     W2,W2
        BRA       NZ, ??OS_EventWaitListInit_0
        RETURN    
        CFI EndBlock cfiBlock19
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_InitEventList:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function OS_InitEventList
        FUNCALL OS_InitEventList, OS_MemClr
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function OS_MemClr
        MOV       #680,W2
        MOV       #OSEventTbl,W0
        MOV       #255,W1
        CALL      OS_MemClr
        ; DSP MODE; unknown 
        MOV       #OSEventTbl,W4
        MOV       #255,W5
        MOV       #OSEventTbl+34,W2
        MOV       #255,W3
        MOV       #19,W0
??OS_InitEventList_0:
        MOV.D     W4,W6
        BTST.C    W7,#7
        BRA       NC, ??OS_TCBInit_261
        CLR.b     [W6]
??OS_TCBInit_261:
        INC2      W6,W6
        ADDC.b    W5,#0,W7
        BTST.C    W7,#7
        BRA       NC, ??OS_TCBInit_262
        MOV.D     W2,[W6]
??OS_TCBInit_262:
        MOV       W4,W6
        ADD       #17,W6
        ADDC.b    W5,#0,W7
        BTST.C    W7,#7
        BRA       NC, ??OS_TCBInit_263
        MOV.b     #63,W7
        MOV.b     W7,[W6]
??OS_TCBInit_263:
        MOV       W4,W6
        ADD       #18,W6
        ADDC.b    W5,#0,W7
        BTST.C    W7,#7
        BRA       NC, ??OS_TCBInit_264
        MOV.b     #0,W7
        CLR.b     [W6]
??OS_TCBInit_264:
        ADD       #34,W4
        ADDC.b    #0,W5
        ADD       #34,W2
        ADDC.b    #0,W3
        DEC.b     W0,W0
        BRA       NZ, ??OS_InitEventList_0
        MOV.D     W4,W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_265
        CLR.b     [W0]
??OS_TCBInit_265:
        INC2      W0,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_266
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_266:
        MOV.D     W4,W0
        ADD       #17,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_267
        MOV.b     #63,W1
        MOV.b     W1,[W0]
??OS_TCBInit_267:
        MOV.D     W4,W0
        ADD       #18,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_268
        CLR.b     [W0]
??OS_TCBInit_268:
        MOV       #OSEventTbl,W0
        MOV       #255,W1
        MOV       #OSEventFreeList,W6
        MOV.D     W0,[W6]
        RETURN    
        CFI EndBlock cfiBlock20
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_InitMisc:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function OS_InitMisc
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV       #OSTime,W0
        MOV       #0,W1
        CLR       [W0]
        MOV       W1,[W0+2]
        MOV       #OSIntNesting,W0
        CLR.b     [W0]
        MOV       #OSLockNesting,W0
        CLR.b     [W0]
        MOV       #OSTaskCtr,W0
        CLR.b     [W0]
        MOV       #OSRunning,W0
        CLR.b     [W0]
        MOV       #OSCtxSwCtr,W0
        CLR       [W0]
        MOV       W1,[W0+2]
        MOV       #OSIdleCtr,W0
        CLR       [W0]
        MOV       W1,[W0+2]
        MOV       #OSIdleCtrRun,W0
        CLR       [W0]
        MOV       W1,[W0+2]
        MOV       #OSIdleCtrMax,W0
        CLR       [W0]
        MOV       W1,[W0+2]
        MOV       #OSStatRdy,W0
        CLR.b     [W0]
        RETURN    
        CFI EndBlock cfiBlock21
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_InitRdyList:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function OS_InitRdyList
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV       #OSRdyGrp,W0
        CLR.b     [W0]
        MOV       #OSRdyTbl,W0
        MOV       #255,W1
        MOV       #8,W2
??OS_InitRdyList_0:
        MOV.D     W0,W4
        BTST.C    W5,#7
        BRA       NC, ??OS_TCBInit_269
        MOV.b     #0,W5
        CLR.b     [W4]
??OS_TCBInit_269:
        INC       W0,W0
        ADDC.b    #0,W1
        DEC.b     W2,W2
        BRA       NZ, ??OS_InitRdyList_0
        MOV       #OSPrioCur,W2
        CLR.b     [W2]
        MOV       #OSPrioHighRdy,W2
        CLR.b     [W2]
        MOV       #OSTCBHighRdy,W2
        MOV       #0,W3
        CLR       [W2]
        MOV       W3,[W2+2]
        MOV       #OSTCBCur,W2
        CLR       [W2]
        MOV       W3,[W2+2]
        RETURN    
        CFI EndBlock cfiBlock22
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_InitTaskIdle:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function OS_InitTaskIdle
        FUNCALL OS_InitTaskIdle, OSTaskCreateExt
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
        FUNCALL OS_InitTaskIdle, OSTaskNameSet
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 2
        INC2      W15,W15
        CFI CFA W15+-6
        ; Setup parameters for call to function OSTaskCreateExt
        CLR       [W15++]
        CFI CFA W15+-8
        CLR       [W15++]
        CFI CFA W15+-10
        MOV       #128,W0
        MOV       W0,[W15++]
        CFI CFA W15+-12
        CLR       [W15++]
        CFI CFA W15+-14
        MOV       #3,W14
        MOV       #OSTaskIdleStk+254,W8
        MOV       #255,W9
        MOV       #-1,W7
        MOV       #63,W6
        MOV       #OSTaskIdleStk,W4
        MOV       #255,W5
        MOV       #0,W2
        MOV       #0,W3
        MOV       #LWRD((OS_TaskIdle)/2),W0
        MOV       #HWRD((OS_TaskIdle)/2),W1
        CALL      OSTaskCreateExt
        ; Setup parameters for call to function OSTaskNameSet
        SUB       W15,#10,W4
        MOV       #255,W5
        MOV       #LWRD((`?<Constant "uC/OS-II Idle">`)/2),W2
        MOV       #HWRD((`?<Constant "uC/OS-II Idle">`)/2),W3
        MOV       #63,W0
        CFI EndBlock cfiBlock23
	REQUIRE ?CLDSPIC_1_21_L00
	REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG CODE:CODE:NOROOT(2)
?Subroutine1:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        CFI CFA W15+-14
        CFI Invalid
        CALL      OSTaskNameSet
        ; DSP MODE; unknown 
        SUB       #10,W15
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock24
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_InitTaskStat:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function OS_InitTaskStat
        FUNCALL OS_InitTaskStat, OSTaskCreateExt
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
        FUNCALL OS_InitTaskStat, OSTaskNameSet
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 2
        INC2      W15,W15
        CFI CFA W15+-6
        ; Setup parameters for call to function OSTaskCreateExt
        CLR       [W15++]
        CFI CFA W15+-8
        CLR       [W15++]
        CFI CFA W15+-10
        MOV       #160,W0
        MOV       W0,[W15++]
        CFI CFA W15+-12
        CLR       [W15++]
        CFI CFA W15+-14
        MOV       #3,W14
        MOV       #OSTaskStatStk+318,W8
        MOV       #255,W9
        MOV       #-2,W7
        MOV       #62,W6
        MOV       #OSTaskStatStk,W4
        MOV       #255,W5
        MOV       #0,W2
        MOV       #0,W3
        MOV       #LWRD((OS_TaskStat)/2),W0
        MOV       #HWRD((OS_TaskStat)/2),W1
        CALL      OSTaskCreateExt
        ; Setup parameters for call to function OSTaskNameSet
        SUB       W15,#10,W4
        MOV       #255,W5
        MOV       #LWRD((`?<Constant "uC/OS-II Stat">`)/2),W2
        MOV       #HWRD((`?<Constant "uC/OS-II Stat">`)/2),W3
        MOV       #62,W0
        BRA       ?Subroutine1
        CFI EndBlock cfiBlock25
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_InitTCBList:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function OS_InitTCBList
        FUNCALL OS_InitTCBList, OS_MemClr
        FUNCALL OS_InitTCBList, OS_MemClr
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function OS_MemClr
        MOV       #2024,W2
        MOV       #OSTCBTbl,W0
        MOV       #255,W1
        CALL      OS_MemClr
        ; Setup parameters for call to function OS_MemClr
        MOV       #256,W2
        MOV       #OSTCBPrioTbl,W0
        MOV       #255,W1
        CALL      OS_MemClr
        ; DSP MODE; unknown 
        MOV       #OSTCBTbl,W4
        MOV       #255,W5
        MOV       #OSTCBTbl+92,W2
        MOV       #255,W3
        MOV       #21,W0
??OS_InitTCBList_0:
        MOV.D     W4,W6
        ADD       #20,W6
        ADDC.b    W5,#0,W7
        BTST.C    W7,#7
        BRA       NC, ??OS_TCBInit_270
        MOV.D     W2,[W6]
??OS_TCBInit_270:
        MOV       W4,W6
        ADD       #76,W6
        ADDC.b    W5,#0,W7
        BTST.C    W7,#7
        BRA       NC, ??OS_TCBInit_271
        MOV.b     #63,W7
        MOV.b     W7,[W6]
??OS_TCBInit_271:
        MOV       W4,W6
        ADD       #77,W6
        ADDC.b    W5,#0,W7
        BTST.C    W7,#7
        BRA       NC, ??OS_TCBInit_272
        MOV.b     #0,W7
        CLR.b     [W6]
??OS_TCBInit_272:
        ADD       #92,W4
        ADDC.b    #0,W5
        ADD       #92,W2
        ADDC.b    #0,W3
        DEC.b     W0,W0
        BRA       NZ, ??OS_InitTCBList_0
        MOV.D     W4,W0
        ADD       #20,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_273
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_273:
        MOV.D     W4,W0
        ADD       #76,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_274
        MOV.b     #63,W1
        MOV.b     W1,[W0]
??OS_TCBInit_274:
        MOV.D     W4,W0
        ADD       #77,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_275
        CLR.b     [W0]
??OS_TCBInit_275:
        MOV       #OSTCBList,W0
        MOV       #0,W1
        CLR       [W0]
        MOV       W1,[W0+2]
        MOV       #OSTCBTbl,W0
        MOV       #255,W1
        MOV       #OSTCBFreeList,W6
        MOV.D     W0,[W6]
        RETURN    
        CFI EndBlock cfiBlock26
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_MemClr:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI Function OS_MemClr
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        BRA       ??OS_TCBInit_276
??OS_MemClr_0:
        MOV.D     W0,W4
        BTST.C    W5,#7
        BRA       NC, ??OS_TCBInit_277
        MOV.b     #0,W5
        CLR.b     [W4]
??OS_TCBInit_277:
        INC       W0,W0
        ADDC.b    #0,W1
        MOV       #-1,W3
        DEC       W2,W2
??OS_TCBInit_276:
        CP0       W2
        BRA       NZ, ??OS_MemClr_0
        RETURN    
        CFI EndBlock cfiBlock27
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_MemCopy:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function OS_MemCopy
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV.D     W0,W8
        MOV.D     W2,W6
        BRA       ??OS_TCBInit_278
??OS_MemCopy_0:
        MOV.D     W6,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_279
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_280
??OS_TCBInit_279:
        MOV.b     [W0],W2
??OS_TCBInit_280:
        BTST.C    W9,#7
        BRA       NC, ??OS_TCBInit_281
        MOV.b     W2,[W8]
??OS_TCBInit_281:
        INC       W6,W6
        ADDC.b    #0,W7
        INC       W8,W8
        ADDC.b    #0,W9
        MOV       #-1,W0
        DEC       W4,W4
??OS_TCBInit_278:
        CP0       W4
        BRA       NZ, ??OS_MemCopy_0
        RETURN    
        CFI EndBlock cfiBlock28
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_Sched:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI Function OS_Sched
        FUNCALL OS_Sched, OS_SchedNew
        LOCFRAME CSTACK, 2, STACK
        ARGFRAME CSTACK, 2, STACK
        FUNCALL OS_Sched, OSCtxSw
        LOCFRAME CSTACK, 2, STACK
        ARGFRAME CSTACK, 2, STACK
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV       W10,[W15++]
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-6
        ; Saved register size: 2
        ; Auto size: 0
        MOV       0x0042,W10
        MOV       #0x0042,W0
        MOV       #224,W1
        IOR       W1,[W0],[W0]
        MOV       #OSIntNesting,W0
        CP0.b     [W0]
        BRA       NZ, ??OS_TCBInit_282
        MOV       #OSLockNesting,W0
        CP0.b     [W0]
        BRA       NZ, ??OS_TCBInit_282
        ; Setup parameters for call to function OS_SchedNew
        CALL      OS_SchedNew
        ; DSP MODE; unknown 
        MOV       #OSPrioHighRdy,W0
        MOV.b     [W0],W0
        MOV       #OSPrioCur,W1
        CP.b      W0,[W1]
        BRA       Z, ??OS_TCBInit_282
        MOV       #OSPrioHighRdy,W0
        ZE        [W0],W0
        SL        W0,#2,W0
        MOV       #OSTCBPrioTbl,W1
        ADD       W1,W0,W1
        MOV       #OSTCBHighRdy,W0
        MOV       [W1++],[W0++]
        MOV       [W1--],[W0--]
        MOV.D     [W0],W0
        ADD       #56,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_283
        CALL      ?CONST_LONG
        BRA       ??OS_TCBInit_284
??OS_TCBInit_283:
        MOV.D     [W0],W2
??OS_TCBInit_284:
        ADD       W2,#1,W0
        ADDC      W3,#0,W1
        MOV       #OSTCBHighRdy,W2
        MOV.D     [W2],W2
        ADD       #56,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_285
        MOV.D     W0,[W2]
??OS_TCBInit_285:
        MOV       #OSCtxSwCtr,W0
        MOV       #0,W3
        INC       [W0],[W0++]
        ADDC      W3,[W0],[W0--]
        ; Setup parameters for call to function OSCtxSw
        CALL      OSCtxSw
        ; DSP MODE; unknown 
??OS_TCBInit_282:
        MOV       #0x0042,W0
        MOV       W10,[W0]
        MOV       [--W15],W10
        CFI W10 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock29
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_SchedNew:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI Function OS_SchedNew
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV       #OSRdyGrp,W0
        ZE        [W0],W2
        MOV       #0,W3
        MOV       #LWRD((OSUnMapTbl)/2),W0
        MOV       #HWRD((OSUnMapTbl)/2),W1
        ADD       W0,W2,W0
        ADDC.b    W1,#0,W1
        CALL      ?CONST_CHAR
        SL        W2,#3,W4
        ZE        W4,W4
        MOV       #OSRdyGrp,W0
        ZE        [W0],W2
        MOV       #LWRD((OSUnMapTbl)/2),W0
        MOV       #HWRD((OSUnMapTbl)/2),W1
        ADD       W0,W2,W0
        ADDC.b    W1,#0,W1
        CALL      ?CONST_CHAR
        ZE        W2,W0
        MOV       #OSRdyTbl,W1
        MOV.b     [W1+W0],W0
        ZE        W0,W2
        MOV       #LWRD((OSUnMapTbl)/2),W0
        MOV       #HWRD((OSUnMapTbl)/2),W1
        ADD       W0,W2,W0
        ADDC.b    W1,#0,W1
        CALL      ?CONST_CHAR
        MOV       #OSPrioHighRdy,W0
        ADD.b     W2,W4,[W0]
        RETURN    
        CFI EndBlock cfiBlock30
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_StrCopy:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function OS_StrCopy
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV.D     W0,W6
        MOV.D     W2,W4
        MOV       #0,W3
        BRA       ??OS_TCBInit_286
??OS_StrCopy_0:
        MOV.D     W4,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_287
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_288
??OS_TCBInit_287:
        MOV.b     [W0],W2
??OS_TCBInit_288:
        BTST.C    W7,#7
        BRA       NC, ??OS_TCBInit_289
        MOV.b     W2,[W6]
??OS_TCBInit_289:
        INC       W4,W4
        ADDC.b    #0,W5
        INC       W6,W6
        ADDC.b    #0,W7
        INC.b     W3,W3
??OS_TCBInit_286:
        MOV.D     W4,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_290
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_291
??OS_TCBInit_290:
        MOV.b     [W0],W2
??OS_TCBInit_291:
        CP0.b     W2
        BRA       NZ, ??OS_StrCopy_0
        MOV.D     W6,W0
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_292
        MOV.b     #0,W1
        CLR.b     [W0]
??OS_TCBInit_292:
        MOV       W3,W0
        RETURN    
        CFI EndBlock cfiBlock31
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_StrLen:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function OS_StrLen
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV.D     W0,W4
        MOV       #0,W3
        BRA       ??OS_TCBInit_293
??OS_StrLen_0:
        INC       W4,W4
        ADDC.b    #0,W5
        INC.b     W3,W3
??OS_TCBInit_293:
        MOV.D     W4,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_294
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_295
??OS_TCBInit_294:
        MOV.b     [W0],W2
??OS_TCBInit_295:
        CP0.b     W2
        BRA       NZ, ??OS_StrLen_0
        MOV       W3,W0
        RETURN    
        CFI EndBlock cfiBlock32
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_TaskIdle:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function OS_TaskIdle
        FUNCALL OS_TaskIdle, OSTaskIdleHook
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
??OS_TaskIdle_0:
        MOV       0x0042,W0
        MOV       #0x0042,W1
        MOV       #224,W2
        IOR       W2,[W1],[W1]
        MOV       #OSIdleCtr,W1
        MOV       #0,W3
        INC       [W1],[W1++]
        ADDC      W3,[W1],[W1--]
        MOV       #0x0042,W1
        MOV       W0,[W1]
        ; Setup parameters for call to function OSTaskIdleHook
        CALL      OSTaskIdleHook
        BRA       ??OS_TaskIdle_0
        CFI EndBlock cfiBlock33
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_TaskStat:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function OS_TaskStat
        FUNCALL OS_TaskStat, OSTimeDly
        FUNCALL OS_TaskStat, OSTaskSuspend
        FUNCALL OS_TaskStat, OSTaskStatHook
        FUNCALL OS_TaskStat, OS_TaskStatStkChk
        FUNCALL OS_TaskStat, OSTimeDly
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        BRA       ??OS_TCBInit_296
??OS_TaskStat_0:
        ; Setup parameters for call to function OSTimeDly
        MOV       #200,W0
        CALL      OSTimeDly
??OS_TCBInit_296:
        MOV       #OSStatRdy,W0
        CP0.b     [W0]
        BRA       Z, ??OS_TaskStat_0
        MOV       OSIdleCtrMax,W0
        MOV       OSIdleCtrMax+2,W1
        MOV       #100,W2
        MOV       #0,W3
        CALL      ?L_UDIV
        MOV       W0,OSIdleCtrMax
        MOV       W1,OSIdleCtrMax+2
        MOV       #OSIdleCtrMax,W0
        MOV       #0,W1
        CP        W1,[W0++]
        CPB       W1,[W0--]
        BRA       NZ, ??OS_TCBInit_297
        MOV       #OSCPUUsage,W0
        CLR.b     [W0]
        ; Setup parameters for call to function OSTaskSuspend
        MOV       #-1,W0
        CALL      OSTaskSuspend
??OS_TCBInit_297:
        MOV       0x0042,W0
        MOV       #0x0042,W1
        MOV       #224,W2
        IOR       W2,[W1],[W1]
        MOV       OSIdleCtr,W1
        MOV       W1,OSIdleCtrRun
        MOV       OSIdleCtr+2,W1
        MOV       W1,OSIdleCtrRun+2
        MOV       #OSIdleCtr,W1
        MOV       #0,W2
        CLR       [W1]
        MOV       W2,[W1+2]
        MOV       #0x0042,W1
        MOV       W0,[W1]
        MOV       #100,W6
        MOV       OSIdleCtrRun,W0
        MOV       OSIdleCtrRun+2,W1
        MOV       OSIdleCtrMax,W2
        MOV       OSIdleCtrMax+2,W3
        CALL      ?L_UDIV
        MOV       #OSCPUUsage,W1
        SUB.b     W6,W0,[W1]
        ; Setup parameters for call to function OSTaskStatHook
        CALL      OSTaskStatHook
        ; Setup parameters for call to function OS_TaskStatStkChk
        CALL      OS_TaskStatStkChk
        ; Setup parameters for call to function OSTimeDly
        MOV       #100,W0
        CALL      OSTimeDly
        BRA       ??OS_TCBInit_297
        CFI EndBlock cfiBlock34
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_TaskStatStkChk:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function OS_TaskStatStkChk
        FUNCALL OS_TaskStatStkChk, OSTaskStkChk
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV       W10,[W15++]
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-6
        ; Saved register size: 2
        ; Auto size: 8
        ADD       #8,W15
        CFI CFA W15+-14
        MOV       #0,W10
??OS_TaskStatStkChk_0:
        ; Setup parameters for call to function OSTaskStkChk
        SUB       W15,#8,W2
        MOV       #255,W3
        MOV       W10,W0
        CALL      OSTaskStkChk
        ; DSP MODE; unknown 
        CP0.b     W0
        BRA       NZ, ??OS_TCBInit_298
        ZE        W10,W0
        SL        W0,#2,W0
        MOV       #OSTCBPrioTbl,W1
        ADD       W1,W0,W1
        MOV.D     [W1],W4
        MOV       #0,W1
        CP0       W4
        CPB.b     W5,#0
        BRA       Z, ??OS_TCBInit_298
        CP        W4,#1
        CPB.b     W5,#0
        BRA       Z, ??OS_TCBInit_298
        MOV.D     W4,W0
        ADD       #12,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_299
        CALL      ?CONST_LONG
        BRA       ??OS_TCBInit_300
??OS_TCBInit_299:
        MOV.D     [W0],W2
??OS_TCBInit_300:
        MOV       #0,W9
        MUL.UU    W3,#2,W6
        MOV       W6,W8
        MUL.UU    W2,#2,W6
        ADD       W7,W8,W7
        MOV.D     W4,W0
        ADD       #8,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_301
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_302
??OS_TCBInit_301:
        MOV.D     [W0],W2
??OS_TCBInit_302:
        SUB       W2,W6,W2
        SUBB.b    W3,W7,W3
        MOV.D     W4,W0
        ADD       #68,W0
        MOV       #0,W6
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_303
        MOV.D     W2,[W0]
??OS_TCBInit_303:
        MOV       #-4,W0
        ADD       W15,W0,W0
        MOV.D     [W0],W0
        ADD       #72,W4
        MOV       #0,W2
        ADDC.b    W5,#0,W5
        BTST.C    W5,#7
        BRA       NC, ??OS_TCBInit_298
        MOV.D     W0,[W4]
??OS_TCBInit_298:
        INC.b     W10,W10
        MOV       #64,W0
        CP.b      W10,W0
        BRA       NC, ??OS_TaskStatStkChk_0
        SUB       #8,W15
        CFI CFA W15+-6
        MOV       [--W15],W10
        CFI W10 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock35
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OS_TCBInit:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function OS_TCBInit
        FUNCALL OS_TCBInit, OSTCBInitHook
        LOCFRAME CSTACK, 14, STACK
        ARGFRAME CSTACK, 14, STACK
        FUNCALL OS_TCBInit, OSTaskCreateHook
        LOCFRAME CSTACK, 14, STACK
        ARGFRAME CSTACK, 14, STACK
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV       W12,[W15++]
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-10
        ; Saved register size: 6
        ; Auto size: 8
        ADD       #8,W15
        CFI CFA W15+-18
        MOV.b     W0,[W15-2]
        MOV       W1,[W15-4]
        MOV       W6,[W15-8]
        MOV       W7,[W15-6]
        MOV.D     W2,W6
        MOV       0x0042,W12
        MOV       #0x0042,W0
        MOV       #224,W1
        IOR       W1,[W0],[W0]
        MOV       #OSTCBFreeList,W0
        MOV.D     [W0],W10
        MOV       #0,W1
        CP0       W10
        CPB.b     W11,#0
        BRA       Z, ??OS_TCBInit_304
        MOV.D     W10,W0
        ADD       #20,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_305
        CALL      ?CONST_PTR
        BRA       ??OS_TCBInit_306
??OS_TCBInit_305:
        MOV.D     [W0],W2
??OS_TCBInit_306:
        MOV       #OSTCBFreeList,W0
        MOV.D     W2,[W0]
        MOV       #0x0042,W0
        MOV       W12,[W0]
        BTST.C    W11,#7
        BRA       NC, ??OS_TCBInit_307
        MOV.D     W6,[W10]
??OS_TCBInit_307:
        MOV.b     [W15-2],W0
        MOV.D     W10,W2
        ADD       #50,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_308
        MOV.b     W0,[W2]
??OS_TCBInit_308:
        MOV.D     W10,W0
        ADD       #48,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_309
        CLR.b     [W0]
??OS_TCBInit_309:
        MOV.D     W10,W0
        ADD       #49,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_310
        CLR.b     [W0]
??OS_TCBInit_310:
        MOV.D     W10,W0
        ADD       #46,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_311
        CLR       [W0]
??OS_TCBInit_311:
        MOV.D     W10,W0
        ADD       #4,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_312
        MOV.D     W8,[W0]
??OS_TCBInit_312:
        SUB       W15,#8,W0
        MOV.D     [W0],W0
        MOV.D     W10,W2
        ADD       #12,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_313
        MOV.D     W0,[W2]
??OS_TCBInit_313:
        MOV.D     W10,W0
        ADD       #8,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_314
        MOV.D     W4,[W0]
??OS_TCBInit_314:
        MOV.D     W10,W0
        ADD       #16,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_315
        MOV       W14,[W0]
??OS_TCBInit_315:
        MOV       [W15-4],W1
        MOV.D     W10,W2
        ADD       #18,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_316
        MOV       W1,[W2]
??OS_TCBInit_316:
        MOV.D     W10,W0
        ADD       #55,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_317
        CLR.b     [W0]
??OS_TCBInit_317:
        MOV.b     [W15-2],W0
        ZE        W0,W0
        LSR       W0,#3,W0
        MOV.D     W10,W2
        ADD       #52,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_318
        MOV.b     W0,[W2]
??OS_TCBInit_318:
        MOV.b     [W15-2],W0
        AND.b     W0,#7,W0
        MOV.D     W10,W2
        ADD       #51,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_319
        MOV.b     W0,[W2]
??OS_TCBInit_319:
        MOV       #1,W3
        MOV.D     W10,W0
        ADD       #52,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_320
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_321
??OS_TCBInit_320:
        MOV.b     [W0],W2
??OS_TCBInit_321:
        ZE        W2,W2
        SL        W3,W2,W0
        MOV.D     W10,W2
        ADD       #54,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_322
        MOV.b     W0,[W2]
??OS_TCBInit_322:
        MOV       #1,W3
        MOV.D     W10,W0
        ADD       #51,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_323
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_324
??OS_TCBInit_323:
        MOV.b     [W0],W2
??OS_TCBInit_324:
        ZE        W2,W2
        SL        W3,W2,W0
        MOV.D     W10,W2
        ADD       #53,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_325
        MOV.b     W0,[W2]
??OS_TCBInit_325:
        MOV.D     W10,W0
        ADD       #28,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_326
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_326:
        MOV.D     W10,W0
        ADD       #32,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_327
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_327:
        MOV.D     W10,W0
        ADD       #40,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_328
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_328:
        MOV.D     W10,W0
        ADD       #36,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_329
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_329:
        MOV.D     W10,W0
        ADD       #56,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_330
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_330:
        MOV.D     W10,W0
        ADD       #64,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_331
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_331:
        MOV.D     W10,W0
        ADD       #60,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_332
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_332:
        MOV.D     W10,W0
        ADD       #68,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_333
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_333:
        MOV.D     W10,W0
        ADD       #72,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_334
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_334:
        MOV.D     W10,W0
        ADD       #76,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_335
        MOV.b     #63,W1
        MOV.b     W1,[W0]
??OS_TCBInit_335:
        MOV.D     W10,W0
        ADD       #77,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_336
        CLR.b     [W0]
??OS_TCBInit_336:
        ; Setup parameters for call to function OSTCBInitHook
        MOV.D     W10,W0
        CALL      OSTCBInitHook
        ; Setup parameters for call to function OSTaskCreateHook
        MOV.D     W10,W0
        CALL      OSTaskCreateHook
        ; DSP MODE; unknown 
        MOV       0x0042,W12
        MOV       #0x0042,W0
        MOV       #224,W1
        IOR       W1,[W0],[W0]
        MOV.b     [W15-2],W0
        SL        W0,#2,W0
        MOV       #OSTCBPrioTbl,W1
        ADD       W1,W0,W1
        MOV.D     W10,[W1]
        MOV       #OSTCBList,W0
        MOV.D     [W0],W0
        MOV.D     W10,W2
        ADD       #20,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OS_TCBInit_337
        MOV.D     W0,[W2]
??OS_TCBInit_337:
        MOV.D     W10,W0
        ADD       #24,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_338
        CLR       [W0++]
        CLR       [W0]
??OS_TCBInit_338:
        MOV       #OSTCBList,W0
        MOV.D     [W0],W0
        CP0       W0
        CPB.b     W1,#0
        BRA       Z, ??OS_TCBInit_339
        MOV       #OSTCBList,W0
        MOV.D     [W0],W0
        ADD       #24,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OS_TCBInit_339
        MOV.D     W10,[W0]
??OS_TCBInit_339:
        MOV       #OSTCBList,W0
        MOV.D     W10,[W0]
        MOV       #OSRdyGrp,W3
        MOV.D     W10,W0
        ADD       #54,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_340
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_341
??OS_TCBInit_340:
        MOV.b     [W0],W2
??OS_TCBInit_341:
        IOR.b     W2,[W3],[W3]
        MOV.D     W10,W0
        ADD       #52,W0
        MOV       #0,W2
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_342
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_343
??OS_TCBInit_342:
        MOV.b     [W0],W2
??OS_TCBInit_343:
        ZE        W2,W0
        MOV       #OSRdyTbl,W3
        ADD       W3,W0,W3
        ADD       #53,W10
        ADDC.b    W11,#0,W11
        MOV.D     W10,W0
        BTST.C    W1,#7
        BRA       C, ??OS_TCBInit_344
        CALL      ?CONST_CHAR
        BRA       ??OS_TCBInit_345
??OS_TCBInit_344:
        MOV.b     [W0],W2
??OS_TCBInit_345:
        IOR.b     W2,[W3],[W3]
        MOV       #OSTaskCtr,W0
        INC.b     [W0],[W0]
        MOV       #0x0042,W0
        MOV       W12,[W0]
        MOV       #0,W0
        BRA       ??OS_TCBInit_346
??OS_TCBInit_304:
        MOV       #0x0042,W0
        MOV       W12,[W0]
??OS_TCBInit_346:
        BRA       ?Subroutine0
        CFI EndBlock cfiBlock36
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CONST:CODE:REORDER:NOROOT(1)
`?<Constant "uC/OS-II Stat">`:
        DB 'u'
        DB 0
        DB 'C'
        DB 0
        DB 2FH
        DB 0
        DB 'O'
        DB 0
        DB 'S'
        DB 0
        DB 2DH
        DB 0
        DB 'I'
        DB 0
        DB 'I'
        DB 0
        DB ' '
        DB 0
        DB 'S'
        DB 0
        DB 't'
        DB 0
        DB 'a'
        DB 0
        DB 't'
        DB 0
        DB 0H
        DB 0

        RSEG CONST:CODE:REORDER:NOROOT(1)
`?<Constant "uC/OS-II Idle">`:
        DB 'u'
        DB 0
        DB 'C'
        DB 0
        DB 2FH
        DB 0
        DB 'O'
        DB 0
        DB 'S'
        DB 0
        DB 2DH
        DB 0
        DB 'I'
        DB 0
        DB 'I'
        DB 0
        DB ' '
        DB 0
        DB 'I'
        DB 0
        DB 'd'
        DB 0
        DB 'l'
        DB 0
        DB 'e'
        DB 0
        DB 0H
        DB 0

        ASEGN SFR_A:DATA:ROOT,0410H
// union <unnamed> volatile __sfr _A_C1CFG1
_A_C1CFG1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,040cH
// union <unnamed> volatile __sfr _A_C1INTE
_A_C1INTE:
        DS 2

        ASEGN SFR_A:DATA:ROOT,040aH
// union <unnamed> volatile __sfr _A_C1INTF
_A_C1INTF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0408H
// union <unnamed> volatile __sfr _A_C1FIFO
_A_C1FIFO:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0406H
// union <unnamed> volatile __sfr _A_C1FCTRL
_A_C1FCTRL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0404H
// union <unnamed> volatile __sfr _A_C1VEC
_A_C1VEC:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0402H
// union <unnamed> volatile __sfr _A_C1CTRL2
_A_C1CTRL2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0400H
// union <unnamed> volatile __sfr _A_C1CTRL1
_A_C1CTRL1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03e2H
// union <unnamed> volatile __sfr _A_DMACS1
_A_DMACS1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03e0H
// union <unnamed> volatile __sfr _A_DMACS0
_A_DMACS0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03d6H
// union <unnamed> volatile __sfr _A_DMA7REQ
_A_DMA7REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03d4H
// union <unnamed> volatile __sfr _A_DMA7CON
_A_DMA7CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03caH
// union <unnamed> volatile __sfr _A_DMA6REQ
_A_DMA6REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03c8H
// union <unnamed> volatile __sfr _A_DMA6CON
_A_DMA6CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03beH
// union <unnamed> volatile __sfr _A_DMA5REQ
_A_DMA5REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03bcH
// union <unnamed> volatile __sfr _A_DMA5CON
_A_DMA5CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03b2H
// union <unnamed> volatile __sfr _A_DMA4REQ
_A_DMA4REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03b0H
// union <unnamed> volatile __sfr _A_DMA4CON
_A_DMA4CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03a6H
// union <unnamed> volatile __sfr _A_DMA3REQ
_A_DMA3REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03a4H
// union <unnamed> volatile __sfr _A_DMA3CON
_A_DMA3CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,039aH
// union <unnamed> volatile __sfr _A_DMA2REQ
_A_DMA2REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0398H
// union <unnamed> volatile __sfr _A_DMA2CON
_A_DMA2CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,038eH
// union <unnamed> volatile __sfr _A_DMA1REQ
_A_DMA1REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,044cH
// union <unnamed> volatile __sfr _A_C1RXF3SID
_A_C1RXF3SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,044aH
// union <unnamed> volatile __sfr _A_C1RXF2EID
_A_C1RXF2EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0448H
// union <unnamed> volatile __sfr _A_C1RXF2SID
_A_C1RXF2SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0446H
// union <unnamed> volatile __sfr _A_C1RXF1EID
_A_C1RXF1EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0444H
// union <unnamed> volatile __sfr _A_C1RXF1SID
_A_C1RXF1SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0442H
// union <unnamed> volatile __sfr _A_C1RXF0EID
_A_C1RXF0EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0440H
// union <unnamed> volatile __sfr _A_C1RXF0SID
_A_C1RXF0SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,043aH
// union <unnamed> volatile __sfr _A_C1RXM2EID
_A_C1RXM2EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0438H
// union <unnamed> volatile __sfr _A_C1RXM2SID
_A_C1RXM2SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0436H
// union <unnamed> volatile __sfr _A_C1TR67CON
_A_C1TR67CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0434H
// union <unnamed> volatile __sfr _A_C1TR45CON
_A_C1TR45CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0432H
// union <unnamed> volatile __sfr _A_C1TR23CON
_A_C1TR23CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0430H
// union <unnamed> volatile __sfr _A_C1TR01CON
_A_C1TR01CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,042aH
// union <unnamed> volatile __sfr _A_C1RXOVF2
_A_C1RXOVF2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0428H
// union <unnamed> volatile __sfr _A_C1RXOVF1
_A_C1RXOVF1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0426H
// union <unnamed> volatile __sfr _A_C1BUFPNT4
_A_C1BUFPNT4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0424H
// union <unnamed> volatile __sfr _A_C1BUFPNT3
_A_C1BUFPNT3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0422H
// union <unnamed> volatile __sfr _A_C1RXFUL2
_A_C1RXFUL2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0420H
// union <unnamed> volatile __sfr _A_C1RXFUL1
_A_C1RXFUL1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,041aH
// union <unnamed> volatile __sfr _A_C1FMSKSEL2
_A_C1FMSKSEL2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0418H
// union <unnamed> volatile __sfr _A_C1FMSKSEL1
_A_C1FMSKSEL1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0414H
// union <unnamed> volatile __sfr _A_C1FEN1
_A_C1FEN1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0412H
// union <unnamed> volatile __sfr _A_C1CFG2
_A_C1CFG2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,06c0H
// union <unnamed> volatile __sfr _A_ODCA
_A_ODCA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02e8H
// union <unnamed> volatile __sfr _A_LATG
_A_LATG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02e6H
// union <unnamed> volatile __sfr _A_PORTG
_A_PORTG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02e4H
// union <unnamed> volatile __sfr _A_TRISG
_A_TRISG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02e2H
// union <unnamed> volatile __sfr _A_LATF
_A_LATF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02e0H
// union <unnamed> volatile __sfr _A_PORTF
_A_PORTF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02deH
// union <unnamed> volatile __sfr _A_TRISF
_A_TRISF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02dcH
// union <unnamed> volatile __sfr _A_LATE
_A_LATE:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02daH
// union <unnamed> volatile __sfr _A_PORTE
_A_PORTE:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02d8H
// union <unnamed> volatile __sfr _A_TRISE
_A_TRISE:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02d6H
// union <unnamed> volatile __sfr _A_LATD
_A_LATD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02d4H
// union <unnamed> volatile __sfr _A_PORTD
_A_PORTD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02d2H
// union <unnamed> volatile __sfr _A_TRISD
_A_TRISD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02d0H
// union <unnamed> volatile __sfr _A_LATC
_A_LATC:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02ceH
// union <unnamed> volatile __sfr _A_PORTC
_A_PORTC:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02ccH
// union <unnamed> volatile __sfr _A_TRISC
_A_TRISC:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02caH
// union <unnamed> volatile __sfr _A_LATB
_A_LATB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02c8H
// union <unnamed> volatile __sfr _A_PORTB
_A_PORTB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02c6H
// union <unnamed> volatile __sfr _A_TRISB
_A_TRISB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02c4H
// union <unnamed> volatile __sfr _A_LATA
_A_LATA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02c2H
// union <unnamed> volatile __sfr _A_PORTA
_A_PORTA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02c0H
// union <unnamed> volatile __sfr _A_TRISA
_A_TRISA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,028cH
// union <unnamed> volatile __sfr _A_RSCON
_A_RSCON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,038cH
// union <unnamed> volatile __sfr _A_DMA1CON
_A_DMA1CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0382H
// union <unnamed> volatile __sfr _A_DMA0REQ
_A_DMA0REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0380H
// union <unnamed> volatile __sfr _A_DMA0CON
_A_DMA0CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0372H
// union <unnamed> volatile __sfr _A_AD2CON4
_A_AD2CON4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0370H
// union <unnamed> volatile __sfr _A_AD2CSSL
_A_AD2CSSL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,036cH
// union <unnamed> volatile __sfr _A_AD2PCFG
_A_AD2PCFG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0368H
// union <unnamed> volatile __sfr _A_AD2CHS0
_A_AD2CHS0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0366H
// union <unnamed> volatile __sfr _A_AD2CHS123
_A_AD2CHS123:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0364H
// union <unnamed> volatile __sfr _A_AD2CON3
_A_AD2CON3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0362H
// union <unnamed> volatile __sfr _A_AD2CON2
_A_AD2CON2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0360H
// union <unnamed> volatile __sfr _A_AD2CON1
_A_AD2CON1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0340H
// union <unnamed> volatile __sfr _A_AD2BUF0
_A_AD2BUF0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0332H
// union <unnamed> volatile __sfr _A_AD1CON4
_A_AD1CON4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0330H
// union <unnamed> volatile __sfr _A_AD1CSSL
_A_AD1CSSL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,032cH
// union <unnamed> volatile __sfr _A_AD1PCFGL
_A_AD1PCFGL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,032aH
// union <unnamed> volatile __sfr _A_AD1PCFGH
_A_AD1PCFGH:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0328H
// union <unnamed> volatile __sfr _A_AD1CHS0
_A_AD1CHS0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0326H
// union <unnamed> volatile __sfr _A_AD1CHS123
_A_AD1CHS123:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0324H
// union <unnamed> volatile __sfr _A_AD1CON3
_A_AD1CON3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0322H
// union <unnamed> volatile __sfr _A_AD1CON2
_A_AD1CON2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0320H
// union <unnamed> volatile __sfr _A_AD1CON1
_A_AD1CON1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0300H
// union <unnamed> volatile __sfr _A_AD1BUF0
_A_AD1BUF0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,06deH
// union <unnamed> volatile __sfr _A_ODCF
_A_ODCF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0568H
// union <unnamed> volatile __sfr _A_C2RXF10SID
_A_C2RXF10SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0566H
// union <unnamed> volatile __sfr _A_C2RXF9EID
_A_C2RXF9EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0564H
// union <unnamed> volatile __sfr _A_C2RXF9SID
_A_C2RXF9SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0562H
// union <unnamed> volatile __sfr _A_C2RXF8EID
_A_C2RXF8EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0560H
// union <unnamed> volatile __sfr _A_C2RXF8SID
_A_C2RXF8SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,055eH
// union <unnamed> volatile __sfr _A_C2RXF7EID
_A_C2RXF7EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,055cH
// union <unnamed> volatile __sfr _A_C2RXF7SID
_A_C2RXF7SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,055aH
// union <unnamed> volatile __sfr _A_C2RXF6EID
_A_C2RXF6EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0558H
// union <unnamed> volatile __sfr _A_C2RXF6SID
_A_C2RXF6SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0556H
// union <unnamed> volatile __sfr _A_C2RXF5EID
_A_C2RXF5EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0554H
// union <unnamed> volatile __sfr _A_C2RXF5SID
_A_C2RXF5SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0552H
// union <unnamed> volatile __sfr _A_C2RXF4EID
_A_C2RXF4EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0550H
// union <unnamed> volatile __sfr _A_C2RXF4SID
_A_C2RXF4SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,054eH
// union <unnamed> volatile __sfr _A_C2RXF3EID
_A_C2RXF3EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,054cH
// union <unnamed> volatile __sfr _A_C2RXF3SID
_A_C2RXF3SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,054aH
// union <unnamed> volatile __sfr _A_C2RXF2EID
_A_C2RXF2EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0548H
// union <unnamed> volatile __sfr _A_C2RXF2SID
_A_C2RXF2SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0546H
// union <unnamed> volatile __sfr _A_C2RXF1EID
_A_C2RXF1EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0544H
// union <unnamed> volatile __sfr _A_C2RXF1SID
_A_C2RXF1SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0542H
// union <unnamed> volatile __sfr _A_C2RXF0EID
_A_C2RXF0EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0540H
// union <unnamed> volatile __sfr _A_C2RXF0SID
_A_C2RXF0SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,053aH
// union <unnamed> volatile __sfr _A_C2RXM2EID
_A_C2RXM2EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0538H
// union <unnamed> volatile __sfr _A_C2RXM2SID
_A_C2RXM2SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0774H
// union <unnamed> volatile __sfr _A_PMD3
_A_PMD3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0772H
// union <unnamed> volatile __sfr _A_PMD2
_A_PMD2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0770H
// union <unnamed> volatile __sfr _A_PMD1
_A_PMD1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0766H
// union <unnamed> volatile __sfr _A_NVMKEY
_A_NVMKEY:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0760H
// union <unnamed> volatile __sfr _A_NVMCON
_A_NVMCON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0748H
// union <unnamed> volatile __sfr _A_OSCTUN
_A_OSCTUN:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0746H
// union <unnamed> volatile __sfr _A_PLLFBD
_A_PLLFBD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0744H
// union <unnamed> volatile __sfr _A_CLKDIV
_A_CLKDIV:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0742H
// union <unnamed> volatile __sfr _A_OSCCON
_A_OSCCON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0740H
// union <unnamed> volatile __sfr _A_RCON
_A_RCON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,057eH
// union <unnamed> volatile __sfr _A_C2RXF15EID
_A_C2RXF15EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,057cH
// union <unnamed> volatile __sfr _A_C2RXF15SID
_A_C2RXF15SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,057aH
// union <unnamed> volatile __sfr _A_C2RXF14EID
_A_C2RXF14EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0578H
// union <unnamed> volatile __sfr _A_C2RXF14SID
_A_C2RXF14SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0576H
// union <unnamed> volatile __sfr _A_C2RXF13EID
_A_C2RXF13EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0574H
// union <unnamed> volatile __sfr _A_C2RXF13SID
_A_C2RXF13SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0572H
// union <unnamed> volatile __sfr _A_C2RXF12EID
_A_C2RXF12EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0570H
// union <unnamed> volatile __sfr _A_C2RXF12SID
_A_C2RXF12SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,056eH
// union <unnamed> volatile __sfr _A_C2RXF11EID
_A_C2RXF11EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,056cH
// union <unnamed> volatile __sfr _A_C2RXF11SID
_A_C2RXF11SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,056aH
// union <unnamed> volatile __sfr _A_C2RXF10EID
_A_C2RXF10EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,047aH
// union <unnamed> volatile __sfr _A_C1RXF14EID
_A_C1RXF14EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0478H
// union <unnamed> volatile __sfr _A_C1RXF14SID
_A_C1RXF14SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0476H
// union <unnamed> volatile __sfr _A_C1RXF13EID
_A_C1RXF13EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0474H
// union <unnamed> volatile __sfr _A_C1RXF13SID
_A_C1RXF13SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0472H
// union <unnamed> volatile __sfr _A_C1RXF12EID
_A_C1RXF12EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0470H
// union <unnamed> volatile __sfr _A_C1RXF12SID
_A_C1RXF12SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,046eH
// union <unnamed> volatile __sfr _A_C1RXF11EID
_A_C1RXF11EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,046cH
// union <unnamed> volatile __sfr _A_C1RXF11SID
_A_C1RXF11SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,046aH
// union <unnamed> volatile __sfr _A_C1RXF10EID
_A_C1RXF10EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0468H
// union <unnamed> volatile __sfr _A_C1RXF10SID
_A_C1RXF10SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0466H
// union <unnamed> volatile __sfr _A_C1RXF9EID
_A_C1RXF9EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0464H
// union <unnamed> volatile __sfr _A_C1RXF9SID
_A_C1RXF9SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0462H
// union <unnamed> volatile __sfr _A_C1RXF8EID
_A_C1RXF8EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0460H
// union <unnamed> volatile __sfr _A_C1RXF8SID
_A_C1RXF8SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,045eH
// union <unnamed> volatile __sfr _A_C1RXF7EID
_A_C1RXF7EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,045cH
// union <unnamed> volatile __sfr _A_C1RXF7SID
_A_C1RXF7SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,045aH
// union <unnamed> volatile __sfr _A_C1RXF6EID
_A_C1RXF6EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0458H
// union <unnamed> volatile __sfr _A_C1RXF6SID
_A_C1RXF6SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0456H
// union <unnamed> volatile __sfr _A_C1RXF5EID
_A_C1RXF5EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0454H
// union <unnamed> volatile __sfr _A_C1RXF5SID
_A_C1RXF5SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0452H
// union <unnamed> volatile __sfr _A_C1RXF4EID
_A_C1RXF4EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0450H
// union <unnamed> volatile __sfr _A_C1RXF4SID
_A_C1RXF4SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,044eH
// union <unnamed> volatile __sfr _A_C1RXF3EID
_A_C1RXF3EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0536H
// union <unnamed> volatile __sfr _A_C2TR67CON
_A_C2TR67CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0534H
// union <unnamed> volatile __sfr _A_C2TR45CON
_A_C2TR45CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0532H
// union <unnamed> volatile __sfr _A_C2TR23CON
_A_C2TR23CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0530H
// union <unnamed> volatile __sfr _A_C2TR01CON
_A_C2TR01CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,052aH
// union <unnamed> volatile __sfr _A_C2RXOVF2
_A_C2RXOVF2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0528H
// union <unnamed> volatile __sfr _A_C2RXOVF1
_A_C2RXOVF1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0526H
// union <unnamed> volatile __sfr _A_C2BUFPNT4
_A_C2BUFPNT4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0524H
// union <unnamed> volatile __sfr _A_C2BUFPNT3
_A_C2BUFPNT3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0522H
// union <unnamed> volatile __sfr _A_C2RXFUL2
_A_C2RXFUL2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0520H
// union <unnamed> volatile __sfr _A_C2RXFUL1
_A_C2RXFUL1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,051aH
// union <unnamed> volatile __sfr _A_C2FMSKSEL2
_A_C2FMSKSEL2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0518H
// union <unnamed> volatile __sfr _A_C2FMSKSEL1
_A_C2FMSKSEL1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0514H
// union <unnamed> volatile __sfr _A_C2FEN1
_A_C2FEN1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0512H
// union <unnamed> volatile __sfr _A_C2CFG2
_A_C2CFG2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0510H
// union <unnamed> volatile __sfr _A_C2CFG1
_A_C2CFG1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,050cH
// union <unnamed> volatile __sfr _A_C2INTE
_A_C2INTE:
        DS 2

        ASEGN SFR_A:DATA:ROOT,050aH
// union <unnamed> volatile __sfr _A_C2INTF
_A_C2INTF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0508H
// union <unnamed> volatile __sfr _A_C2FIFO
_A_C2FIFO:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0506H
// union <unnamed> volatile __sfr _A_C2FCTRL
_A_C2FCTRL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0504H
// union <unnamed> volatile __sfr _A_C2VEC
_A_C2VEC:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0502H
// union <unnamed> volatile __sfr _A_C2CTRL2
_A_C2CTRL2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0500H
// union <unnamed> volatile __sfr _A_C2CTRL1
_A_C2CTRL1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,047eH
// union <unnamed> volatile __sfr _A_C1RXF15EID
_A_C1RXF15EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,047cH
// union <unnamed> volatile __sfr _A_C1RXF15SID
_A_C1RXF15SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,011eH
// union <unnamed> volatile __sfr _A_T4CON
_A_T4CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0112H
// union <unnamed> volatile __sfr _A_T3CON
_A_T3CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0110H
// union <unnamed> volatile __sfr _A_T2CON
_A_T2CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0104H
// union <unnamed> volatile __sfr _A_T1CON
_A_T1CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0e0H
// union <unnamed> volatile __sfr _A_INTREG
_A_INTREG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0c6H
// union <unnamed> volatile __sfr _A_IPC17
_A_IPC17:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0c4H
// union <unnamed> volatile __sfr _A_IPC16
_A_IPC16:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0c2H
// union <unnamed> volatile __sfr _A_IPC15
_A_IPC15:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0c0H
// union <unnamed> volatile __sfr _A_IPC14
_A_IPC14:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0beH
// union <unnamed> volatile __sfr _A_IPC13
_A_IPC13:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0bcH
// union <unnamed> volatile __sfr _A_IPC12
_A_IPC12:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0baH
// union <unnamed> volatile __sfr _A_IPC11
_A_IPC11:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0b8H
// union <unnamed> volatile __sfr _A_IPC10
_A_IPC10:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0b6H
// union <unnamed> volatile __sfr _A_IPC9
_A_IPC9:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0b4H
// union <unnamed> volatile __sfr _A_IPC8
_A_IPC8:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0b2H
// union <unnamed> volatile __sfr _A_IPC7
_A_IPC7:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0b0H
// union <unnamed> volatile __sfr _A_IPC6
_A_IPC6:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0196H
// union <unnamed> volatile __sfr _A_OC4CON
_A_OC4CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0190H
// union <unnamed> volatile __sfr _A_OC3CON
_A_OC3CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,018aH
// union <unnamed> volatile __sfr _A_OC2CON
_A_OC2CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0184H
// union <unnamed> volatile __sfr _A_OC1CON
_A_OC1CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,015eH
// union <unnamed> volatile __sfr _A_IC8CON
_A_IC8CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,015aH
// union <unnamed> volatile __sfr _A_IC7CON
_A_IC7CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0156H
// union <unnamed> volatile __sfr _A_IC6CON
_A_IC6CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0152H
// union <unnamed> volatile __sfr _A_IC5CON
_A_IC5CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,014eH
// union <unnamed> volatile __sfr _A_IC4CON
_A_IC4CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,014aH
// union <unnamed> volatile __sfr _A_IC3CON
_A_IC3CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0146H
// union <unnamed> volatile __sfr _A_IC2CON
_A_IC2CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0142H
// union <unnamed> volatile __sfr _A_IC1CON
_A_IC1CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,013cH
// union <unnamed> volatile __sfr _A_T9CON
_A_T9CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,013aH
// union <unnamed> volatile __sfr _A_T8CON
_A_T8CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,012eH
// union <unnamed> volatile __sfr _A_T7CON
_A_T7CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,012cH
// union <unnamed> volatile __sfr _A_T6CON
_A_T6CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0120H
// union <unnamed> volatile __sfr _A_T5CON
_A_T5CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,080H
// union <unnamed> volatile __sfr _A_INTCON1
_A_INTCON1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,06aH
// union <unnamed> volatile __sfr _A_CNPU2
_A_CNPU2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,068H
// union <unnamed> volatile __sfr _A_CNPU1
_A_CNPU1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,062H
// union <unnamed> volatile __sfr _A_CNEN2
_A_CNEN2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,060H
// union <unnamed> volatile __sfr _A_CNEN1
_A_CNEN1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,052H
// union <unnamed> volatile __sfr _A_DISICNT
_A_DISICNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,050H
// union <unnamed> volatile __sfr _A_XBREV
_A_XBREV:
        DS 2

        ASEGN SFR_A:DATA:ROOT,046H
// union <unnamed> volatile __sfr _A_MODCON
_A_MODCON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,044H
// union <unnamed> volatile __sfr _A_CORCON
_A_CORCON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,042H
// union <unnamed> volatile __sfr _A_SR
_A_SR:
        DS 2

        ASEGN SFR_A:DATA:ROOT,040H
// union <unnamed> volatile __sfr _A_DOENDH
_A_DOENDH:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03cH
// union <unnamed> volatile __sfr _A_DOSTARTH
_A_DOSTARTH:
        DS 2

        ASEGN SFR_A:DATA:ROOT,038H
// union <unnamed> volatile __sfr _A_DCOUNT
_A_DCOUNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,036H
// union <unnamed> volatile __sfr _A_RCOUNT
_A_RCOUNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,034H
// union <unnamed> volatile __sfr _A_PSVPAG
_A_PSVPAG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,032H
// union <unnamed> volatile __sfr _A_TBLPAG
_A_TBLPAG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,030H
// union <unnamed> volatile __sfr _A_PCH
_A_PCH:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0aeH
// union <unnamed> volatile __sfr _A_IPC5
_A_IPC5:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0acH
// union <unnamed> volatile __sfr _A_IPC4
_A_IPC4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0aaH
// union <unnamed> volatile __sfr _A_IPC3
_A_IPC3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0a8H
// union <unnamed> volatile __sfr _A_IPC2
_A_IPC2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0a6H
// union <unnamed> volatile __sfr _A_IPC1
_A_IPC1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0a4H
// union <unnamed> volatile __sfr _A_IPC0
_A_IPC0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,09cH
// union <unnamed> volatile __sfr _A_IEC4
_A_IEC4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,09aH
// union <unnamed> volatile __sfr _A_IEC3
_A_IEC3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,098H
// union <unnamed> volatile __sfr _A_IEC2
_A_IEC2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,096H
// union <unnamed> volatile __sfr _A_IEC1
_A_IEC1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,094H
// union <unnamed> volatile __sfr _A_IEC0
_A_IEC0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,08cH
// union <unnamed> volatile __sfr _A_IFS4
_A_IFS4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,08aH
// union <unnamed> volatile __sfr _A_IFS3
_A_IFS3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,088H
// union <unnamed> volatile __sfr _A_IFS2
_A_IFS2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,086H
// union <unnamed> volatile __sfr _A_IFS1
_A_IFS1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,084H
// union <unnamed> volatile __sfr _A_IFS0
_A_IFS0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,082H
// union <unnamed> volatile __sfr _A_INTCON2
_A_INTCON2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0220H
// union <unnamed> volatile __sfr _A_U1MODE
_A_U1MODE:
        DS 2

        ASEGN SFR_A:DATA:ROOT,021cH
// union <unnamed> volatile __sfr _A_I2C2MSK
_A_I2C2MSK:
        DS 2

        ASEGN SFR_A:DATA:ROOT,021aH
// union <unnamed> volatile __sfr _A_I2C2ADD
_A_I2C2ADD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0218H
// union <unnamed> volatile __sfr _A_I2C2STAT
_A_I2C2STAT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0216H
// union <unnamed> volatile __sfr _A_I2C2CON
_A_I2C2CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0214H
// union <unnamed> volatile __sfr _A_I2C2BRG
_A_I2C2BRG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0212H
// union <unnamed> volatile __sfr _A_I2C2TRN
_A_I2C2TRN:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0210H
// union <unnamed> volatile __sfr _A_I2C2RCV
_A_I2C2RCV:
        DS 2

        ASEGN SFR_A:DATA:ROOT,020cH
// union <unnamed> volatile __sfr _A_I2C1MSK
_A_I2C1MSK:
        DS 2

        ASEGN SFR_A:DATA:ROOT,020aH
// union <unnamed> volatile __sfr _A_I2C1ADD
_A_I2C1ADD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0208H
// union <unnamed> volatile __sfr _A_I2C1STAT
_A_I2C1STAT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0206H
// union <unnamed> volatile __sfr _A_I2C1CON
_A_I2C1CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0204H
// union <unnamed> volatile __sfr _A_I2C1BRG
_A_I2C1BRG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0202H
// union <unnamed> volatile __sfr _A_I2C1TRN
_A_I2C1TRN:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0200H
// union <unnamed> volatile __sfr _A_I2C1RCV
_A_I2C1RCV:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01aeH
// union <unnamed> volatile __sfr _A_OC8CON
_A_OC8CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01a8H
// union <unnamed> volatile __sfr _A_OC7CON
_A_OC7CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01a2H
// union <unnamed> volatile __sfr _A_OC6CON
_A_OC6CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,019cH
// union <unnamed> volatile __sfr _A_OC5CON
_A_OC5CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0288H
// union <unnamed> volatile __sfr _A_TSCON
_A_TSCON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0286H
// union <unnamed> volatile __sfr _A_DCISTAT
_A_DCISTAT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0284H
// union <unnamed> volatile __sfr _A_DCICON3
_A_DCICON3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0282H
// union <unnamed> volatile __sfr _A_DCICON2
_A_DCICON2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0280H
// union <unnamed> volatile __sfr _A_DCICON1
_A_DCICON1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0264H
// union <unnamed> volatile __sfr _A_SPI2CON2
_A_SPI2CON2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0262H
// union <unnamed> volatile __sfr _A_SPI2CON1
_A_SPI2CON1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0260H
// union <unnamed> volatile __sfr _A_SPI2STAT
_A_SPI2STAT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0244H
// union <unnamed> volatile __sfr _A_SPI1CON2
_A_SPI1CON2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0242H
// union <unnamed> volatile __sfr _A_SPI1CON1
_A_SPI1CON1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0240H
// union <unnamed> volatile __sfr _A_SPI1STAT
_A_SPI1STAT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0236H
// union <unnamed> volatile __sfr _A_U2RXREG
_A_U2RXREG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0234H
// union <unnamed> volatile __sfr _A_U2TXREG
_A_U2TXREG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0232H
// union <unnamed> volatile __sfr _A_U2STA
_A_U2STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0230H
// union <unnamed> volatile __sfr _A_U2MODE
_A_U2MODE:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0226H
// union <unnamed> volatile __sfr _A_U1RXREG
_A_U1RXREG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0224H
// union <unnamed> volatile __sfr _A_U1TXREG
_A_U1TXREG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0222H
// union <unnamed> volatile __sfr _A_U1STA
_A_U1STA:
        DS 2

        END
// 
// 5 426 words in segment CODE
//   284 words in segment CONST
// 5 158 bytes in segment MEM_Z
//   820 bytes in segment SFR_A
// 
// 5 710 words of CODE memory
// 5 158 bytes of DATA memory (+ 820 bytes shared)
//
//Errors: none
//Warnings: none
