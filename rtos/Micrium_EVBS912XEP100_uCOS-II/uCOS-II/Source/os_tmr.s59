//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR dsPIC C/EC++ Compiler V1.30B/W32                13/Dec/2007  20:41:40 /
// Copyright 2001-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu          =  dsPIC                                                  /
//    Data model   =  Large                                                  /
//    Double size  =  32 bits                                                /
//                 =                                                         /
//    Source file  =  os_tmr.c                                               /
//    Command line =  -D__dsPIC33FJ256GP710__ os_tmr.c                       /
//                    -oC:\Micrium\Software\EVALBO~1\MICROC~1\EXPLOR~1\PIC33 /
//                    F~1\MPLAB_~1\OS-Probe\Output\os_tmr.r59                /
//                    -fC:\Micrium\Software\EvalBoards\Microchip\Explorer16\ /
//                    PIC33FJ256\MPLAB_IAR\OS-Probe\ExtPath.xcl (-I          /
//                    "C:\Program Files\IAR Systems\Embedded Workbench       /
//                    3.2\dsPIC\inc\clib" -I "C:\Program Files\IAR           /
//                    Systems\Embedded Workbench 3.2\dsPIC\inc" -I           /
//                    C:\Micrium\Software\uC-CPU -I                          /
//                    C:\Micrium\Software\uC-CPU\Microchip\PIC33FJ256\MPLAB_ /
//                    IAR -I C:\Micrium\Software\uC-LIB -I                   /
//                    C:\Micrium\Software\uCOS-II\Source -I                  /
//                    C:\Micrium\Software\uCOS-II\Ports\Microchip\PIC33FJ256 /
//                    \MPLAB_IAR -I C:\Micrium\Software\uC-Probe\Target\Comm /
//                    unication\Generic\RS-232\Ports\Microchip\dsPIC33\IAR_i /
//                    ccDSPIC -I C:\Micrium\Software\uC-Probe\Target\Communi /
//                    cation\Generic\RS-232\Source -I                        /
//                    C:\Micrium\Software\uC-Probe\Target\Communication\Gene /
//                    ric\Source -I C:\Micrium\Software\uC-Probe\Target\Plug /
//                    ins\uCOS-II -I C:\Micrium\Software\EvalBoards\Microchi /
//                    p\Explorer16\PIC33FJ256\MPLAB_IAR\OS-Probe -I          /
//                    C:\Micrium\Software\EvalBoards\Microchip\Explorer16\PI /
//                    C33FJ256\MPLAB_IAR\BSP) -r -e --data_model=l --cpu=0   /
//                    -lc . -la . -z9 --no_cse --no_unroll --no_inline       /
//                    --no_code_motion                                       /
//    List file    =  .\os_tmr.s59                                           /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME os_tmr

        RTMODEL "__data_model", "l"
        RTMODEL "__double_size", "32"
        RTMODEL "__dspic", "1"
        RTMODEL "__long_double_size", "32"
        RTMODEL "__rt_version", "2"

        RSEG CSTACK:DATA:NOROOT(1)

        EXTERN ?CALL_WP2
        EXTERN ?CLDSPIC_1_21_L00
        EXTERN ?CONST_CHAR
        EXTERN ?CONST_LONG
        EXTERN ?CONST_PTR
        EXTERN ?CONST_SHORT
        EXTERN __SETUP_SAT

        PUBWEAK ACCAH
        PUBWEAK ACCAL
        PUBWEAK ACCAU
        PUBWEAK ACCBH
        PUBWEAK ACCBL
        PUBWEAK ACCBU
        PUBWEAK AD1CSSH
        PUBWEAK DMA0CNT
        PUBWEAK DMA0PAD
        PUBWEAK DMA0STA
        PUBWEAK DMA0STB
        PUBWEAK DMA1CNT
        PUBWEAK DMA1PAD
        PUBWEAK DMA1STA
        PUBWEAK DMA1STB
        PUBWEAK DMA2CNT
        PUBWEAK DMA2PAD
        PUBWEAK DMA2STA
        PUBWEAK DMA2STB
        PUBWEAK DMA3CNT
        PUBWEAK DMA3PAD
        PUBWEAK DMA3STA
        PUBWEAK DMA3STB
        PUBWEAK DMA4CNT
        PUBWEAK DMA4PAD
        PUBWEAK DMA4STA
        PUBWEAK DMA4STB
        PUBWEAK DMA5CNT
        PUBWEAK DMA5PAD
        PUBWEAK DMA5STA
        PUBWEAK DMA5STB
        PUBWEAK DMA6CNT
        PUBWEAK DMA6PAD
        PUBWEAK DMA6STA
        PUBWEAK DMA6STB
        PUBWEAK DMA7CNT
        PUBWEAK DMA7PAD
        PUBWEAK DMA7STA
        PUBWEAK DMA7STB
        PUBWEAK DOENDL
        PUBWEAK DOSTARTL
        PUBWEAK DSADR
        PUBWEAK IC1BUF
        PUBWEAK IC2BUF
        PUBWEAK IC3BUF
        PUBWEAK IC4BUF
        PUBWEAK IC5BUF
        PUBWEAK IC6BUF
        PUBWEAK IC7BUF
        PUBWEAK IC8BUF
        PUBWEAK OC1R
        PUBWEAK OC1RS
        PUBWEAK OC2R
        PUBWEAK OC2RS
        PUBWEAK OC3R
        PUBWEAK OC3RS
        PUBWEAK OC4R
        PUBWEAK OC4RS
        PUBWEAK OC5R
        PUBWEAK OC5RS
        PUBWEAK OC6R
        PUBWEAK OC6RS
        PUBWEAK OC7R
        PUBWEAK OC7RS
        PUBWEAK OC8R
        PUBWEAK OC8RS
        PUBLIC OSTmrCreate
        FUNCTION OSTmrCreate,021203H
        ARGFRAME CSTACK, 8, STACK
        LOCFRAME CSTACK, 26, STACK
        PUBLIC OSTmrDel
        FUNCTION OSTmrDel,021203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC OSTmrNameGet
        FUNCTION OSTmrNameGet,021203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC OSTmrRemainGet
        FUNCTION OSTmrRemainGet,021203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC OSTmrSignal
        FUNCTION OSTmrSignal,021203H
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OSTmrStart
        FUNCTION OSTmrStart,021203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC OSTmrStateGet
        FUNCTION OSTmrStateGet,021203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC OSTmrStop
        FUNCTION OSTmrStop,021203H
        LOCFRAME CSTACK, 14, STACK
        FUNCTION OSTmr_Alloc,0203H
        ARGFRAME CSTACK, 26, STACK
        LOCFRAME CSTACK, 2, STACK
        FUNCTION OSTmr_Free,0203H
        ARGFRAME CSTACK, 8, STACK
        LOCFRAME CSTACK, 2, STACK
        PUBLIC OSTmr_Init
        FUNCTION OSTmr_Init,021203H
        LOCFRAME CSTACK, 10, STACK
        FUNCTION OSTmr_InitTask,021203H
        ARGFRAME CSTACK, 10, STACK
        LOCFRAME CSTACK, 10, STACK
        FUNCTION OSTmr_Link,0203H
        ARGFRAME CSTACK, 10, STACK
        LOCFRAME CSTACK, 2, STACK
        FUNCTION OSTmr_Lock,021203H
        ARGFRAME CSTACK, 26, STACK
        LOCFRAME CSTACK, 2, STACK
        FUNCTION OSTmr_Task,021603H
        LOCFRAME CSTACK, 10, STACK
        FUNCTION OSTmr_Unlink,0203H
        ARGFRAME CSTACK, 14, STACK
        LOCFRAME CSTACK, 2, STACK
        FUNCTION OSTmr_Unlock,021203H
        ARGFRAME CSTACK, 26, STACK
        LOCFRAME CSTACK, 2, STACK
        PUBWEAK PCL
        PUBWEAK PR1
        PUBWEAK PR2
        PUBWEAK PR3
        PUBWEAK PR4
        PUBWEAK PR5
        PUBWEAK PR6
        PUBWEAK PR7
        PUBWEAK PR8
        PUBWEAK PR9
        PUBWEAK RXBUF0
        PUBWEAK RXBUF1
        PUBWEAK RXBUF2
        PUBWEAK RXBUF3
        PUBWEAK SPI1BUF
        PUBWEAK SPI2BUF
        PUBWEAK SPLIM
        PUBWEAK TMR1
        PUBWEAK TMR2
        PUBWEAK TMR3
        PUBWEAK TMR3HLD
        PUBWEAK TMR4
        PUBWEAK TMR5
        PUBWEAK TMR5HLD
        PUBWEAK TMR6
        PUBWEAK TMR7
        PUBWEAK TMR7HLD
        PUBWEAK TMR8
        PUBWEAK TMR9
        PUBWEAK TMR9HLD
        PUBWEAK TXBUF0
        PUBWEAK TXBUF1
        PUBWEAK TXBUF2
        PUBWEAK TXBUF3
        PUBWEAK U1BRG
        PUBWEAK U2BRG
        PUBWEAK WREG0
        PUBWEAK WREG1
        PUBWEAK WREG10
        PUBWEAK WREG11
        PUBWEAK WREG12
        PUBWEAK WREG13
        PUBWEAK WREG14
        PUBWEAK WREG15
        PUBWEAK WREG2
        PUBWEAK WREG3
        PUBWEAK WREG4
        PUBWEAK WREG5
        PUBWEAK WREG6
        PUBWEAK WREG7
        PUBWEAK WREG8
        PUBWEAK WREG9
        PUBWEAK XMODEND
        PUBWEAK XMODSRT
        PUBWEAK YMODEND
        PUBWEAK YMODSRT
        PUBWEAK _A_AD1BUF0
        PUBWEAK _A_AD1CHS0
        PUBWEAK _A_AD1CHS123
        PUBWEAK _A_AD1CON1
        PUBWEAK _A_AD1CON2
        PUBWEAK _A_AD1CON3
        PUBWEAK _A_AD1CON4
        PUBWEAK _A_AD1CSSL
        PUBWEAK _A_AD1PCFGH
        PUBWEAK _A_AD1PCFGL
        PUBWEAK _A_AD2BUF0
        PUBWEAK _A_AD2CHS0
        PUBWEAK _A_AD2CHS123
        PUBWEAK _A_AD2CON1
        PUBWEAK _A_AD2CON2
        PUBWEAK _A_AD2CON3
        PUBWEAK _A_AD2CON4
        PUBWEAK _A_AD2CSSL
        PUBWEAK _A_AD2PCFG
        PUBWEAK _A_C1BUFPNT3
        PUBWEAK _A_C1BUFPNT4
        PUBWEAK _A_C1CFG1
        PUBWEAK _A_C1CFG2
        PUBWEAK _A_C1CTRL1
        PUBWEAK _A_C1CTRL2
        PUBWEAK _A_C1FCTRL
        PUBWEAK _A_C1FEN1
        PUBWEAK _A_C1FIFO
        PUBWEAK _A_C1FMSKSEL1
        PUBWEAK _A_C1FMSKSEL2
        PUBWEAK _A_C1INTE
        PUBWEAK _A_C1INTF
        PUBWEAK _A_C1RXF0EID
        PUBWEAK _A_C1RXF0SID
        PUBWEAK _A_C1RXF10EID
        PUBWEAK _A_C1RXF10SID
        PUBWEAK _A_C1RXF11EID
        PUBWEAK _A_C1RXF11SID
        PUBWEAK _A_C1RXF12EID
        PUBWEAK _A_C1RXF12SID
        PUBWEAK _A_C1RXF13EID
        PUBWEAK _A_C1RXF13SID
        PUBWEAK _A_C1RXF14EID
        PUBWEAK _A_C1RXF14SID
        PUBWEAK _A_C1RXF15EID
        PUBWEAK _A_C1RXF15SID
        PUBWEAK _A_C1RXF1EID
        PUBWEAK _A_C1RXF1SID
        PUBWEAK _A_C1RXF2EID
        PUBWEAK _A_C1RXF2SID
        PUBWEAK _A_C1RXF3EID
        PUBWEAK _A_C1RXF3SID
        PUBWEAK _A_C1RXF4EID
        PUBWEAK _A_C1RXF4SID
        PUBWEAK _A_C1RXF5EID
        PUBWEAK _A_C1RXF5SID
        PUBWEAK _A_C1RXF6EID
        PUBWEAK _A_C1RXF6SID
        PUBWEAK _A_C1RXF7EID
        PUBWEAK _A_C1RXF7SID
        PUBWEAK _A_C1RXF8EID
        PUBWEAK _A_C1RXF8SID
        PUBWEAK _A_C1RXF9EID
        PUBWEAK _A_C1RXF9SID
        PUBWEAK _A_C1RXFUL1
        PUBWEAK _A_C1RXFUL2
        PUBWEAK _A_C1RXM2EID
        PUBWEAK _A_C1RXM2SID
        PUBWEAK _A_C1RXOVF1
        PUBWEAK _A_C1RXOVF2
        PUBWEAK _A_C1TR01CON
        PUBWEAK _A_C1TR23CON
        PUBWEAK _A_C1TR45CON
        PUBWEAK _A_C1TR67CON
        PUBWEAK _A_C1VEC
        PUBWEAK _A_C2BUFPNT3
        PUBWEAK _A_C2BUFPNT4
        PUBWEAK _A_C2CFG1
        PUBWEAK _A_C2CFG2
        PUBWEAK _A_C2CTRL1
        PUBWEAK _A_C2CTRL2
        PUBWEAK _A_C2FCTRL
        PUBWEAK _A_C2FEN1
        PUBWEAK _A_C2FIFO
        PUBWEAK _A_C2FMSKSEL1
        PUBWEAK _A_C2FMSKSEL2
        PUBWEAK _A_C2INTE
        PUBWEAK _A_C2INTF
        PUBWEAK _A_C2RXF0EID
        PUBWEAK _A_C2RXF0SID
        PUBWEAK _A_C2RXF10EID
        PUBWEAK _A_C2RXF10SID
        PUBWEAK _A_C2RXF11EID
        PUBWEAK _A_C2RXF11SID
        PUBWEAK _A_C2RXF12EID
        PUBWEAK _A_C2RXF12SID
        PUBWEAK _A_C2RXF13EID
        PUBWEAK _A_C2RXF13SID
        PUBWEAK _A_C2RXF14EID
        PUBWEAK _A_C2RXF14SID
        PUBWEAK _A_C2RXF15EID
        PUBWEAK _A_C2RXF15SID
        PUBWEAK _A_C2RXF1EID
        PUBWEAK _A_C2RXF1SID
        PUBWEAK _A_C2RXF2EID
        PUBWEAK _A_C2RXF2SID
        PUBWEAK _A_C2RXF3EID
        PUBWEAK _A_C2RXF3SID
        PUBWEAK _A_C2RXF4EID
        PUBWEAK _A_C2RXF4SID
        PUBWEAK _A_C2RXF5EID
        PUBWEAK _A_C2RXF5SID
        PUBWEAK _A_C2RXF6EID
        PUBWEAK _A_C2RXF6SID
        PUBWEAK _A_C2RXF7EID
        PUBWEAK _A_C2RXF7SID
        PUBWEAK _A_C2RXF8EID
        PUBWEAK _A_C2RXF8SID
        PUBWEAK _A_C2RXF9EID
        PUBWEAK _A_C2RXF9SID
        PUBWEAK _A_C2RXFUL1
        PUBWEAK _A_C2RXFUL2
        PUBWEAK _A_C2RXM2EID
        PUBWEAK _A_C2RXM2SID
        PUBWEAK _A_C2RXOVF1
        PUBWEAK _A_C2RXOVF2
        PUBWEAK _A_C2TR01CON
        PUBWEAK _A_C2TR23CON
        PUBWEAK _A_C2TR45CON
        PUBWEAK _A_C2TR67CON
        PUBWEAK _A_C2VEC
        PUBWEAK _A_CLKDIV
        PUBWEAK _A_CNEN1
        PUBWEAK _A_CNEN2
        PUBWEAK _A_CNPU1
        PUBWEAK _A_CNPU2
        PUBWEAK _A_CORCON
        PUBWEAK _A_DCICON1
        PUBWEAK _A_DCICON2
        PUBWEAK _A_DCICON3
        PUBWEAK _A_DCISTAT
        PUBWEAK _A_DCOUNT
        PUBWEAK _A_DISICNT
        PUBWEAK _A_DMA0CON
        PUBWEAK _A_DMA0REQ
        PUBWEAK _A_DMA1CON
        PUBWEAK _A_DMA1REQ
        PUBWEAK _A_DMA2CON
        PUBWEAK _A_DMA2REQ
        PUBWEAK _A_DMA3CON
        PUBWEAK _A_DMA3REQ
        PUBWEAK _A_DMA4CON
        PUBWEAK _A_DMA4REQ
        PUBWEAK _A_DMA5CON
        PUBWEAK _A_DMA5REQ
        PUBWEAK _A_DMA6CON
        PUBWEAK _A_DMA6REQ
        PUBWEAK _A_DMA7CON
        PUBWEAK _A_DMA7REQ
        PUBWEAK _A_DMACS0
        PUBWEAK _A_DMACS1
        PUBWEAK _A_DOENDH
        PUBWEAK _A_DOSTARTH
        PUBWEAK _A_I2C1ADD
        PUBWEAK _A_I2C1BRG
        PUBWEAK _A_I2C1CON
        PUBWEAK _A_I2C1MSK
        PUBWEAK _A_I2C1RCV
        PUBWEAK _A_I2C1STAT
        PUBWEAK _A_I2C1TRN
        PUBWEAK _A_I2C2ADD
        PUBWEAK _A_I2C2BRG
        PUBWEAK _A_I2C2CON
        PUBWEAK _A_I2C2MSK
        PUBWEAK _A_I2C2RCV
        PUBWEAK _A_I2C2STAT
        PUBWEAK _A_I2C2TRN
        PUBWEAK _A_IC1CON
        PUBWEAK _A_IC2CON
        PUBWEAK _A_IC3CON
        PUBWEAK _A_IC4CON
        PUBWEAK _A_IC5CON
        PUBWEAK _A_IC6CON
        PUBWEAK _A_IC7CON
        PUBWEAK _A_IC8CON
        PUBWEAK _A_IEC0
        PUBWEAK _A_IEC1
        PUBWEAK _A_IEC2
        PUBWEAK _A_IEC3
        PUBWEAK _A_IEC4
        PUBWEAK _A_IFS0
        PUBWEAK _A_IFS1
        PUBWEAK _A_IFS2
        PUBWEAK _A_IFS3
        PUBWEAK _A_IFS4
        PUBWEAK _A_INTCON1
        PUBWEAK _A_INTCON2
        PUBWEAK _A_INTREG
        PUBWEAK _A_IPC0
        PUBWEAK _A_IPC1
        PUBWEAK _A_IPC10
        PUBWEAK _A_IPC11
        PUBWEAK _A_IPC12
        PUBWEAK _A_IPC13
        PUBWEAK _A_IPC14
        PUBWEAK _A_IPC15
        PUBWEAK _A_IPC16
        PUBWEAK _A_IPC17
        PUBWEAK _A_IPC2
        PUBWEAK _A_IPC3
        PUBWEAK _A_IPC4
        PUBWEAK _A_IPC5
        PUBWEAK _A_IPC6
        PUBWEAK _A_IPC7
        PUBWEAK _A_IPC8
        PUBWEAK _A_IPC9
        PUBWEAK _A_LATA
        PUBWEAK _A_LATB
        PUBWEAK _A_LATC
        PUBWEAK _A_LATD
        PUBWEAK _A_LATE
        PUBWEAK _A_LATF
        PUBWEAK _A_LATG
        PUBWEAK _A_MODCON
        PUBWEAK _A_NVMCON
        PUBWEAK _A_NVMKEY
        PUBWEAK _A_OC1CON
        PUBWEAK _A_OC2CON
        PUBWEAK _A_OC3CON
        PUBWEAK _A_OC4CON
        PUBWEAK _A_OC5CON
        PUBWEAK _A_OC6CON
        PUBWEAK _A_OC7CON
        PUBWEAK _A_OC8CON
        PUBWEAK _A_ODCA
        PUBWEAK _A_ODCF
        PUBWEAK _A_OSCCON
        PUBWEAK _A_OSCTUN
        PUBWEAK _A_PCH
        PUBWEAK _A_PLLFBD
        PUBWEAK _A_PMD1
        PUBWEAK _A_PMD2
        PUBWEAK _A_PMD3
        PUBWEAK _A_PORTA
        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTC
        PUBWEAK _A_PORTD
        PUBWEAK _A_PORTE
        PUBWEAK _A_PORTF
        PUBWEAK _A_PORTG
        PUBWEAK _A_PSVPAG
        PUBWEAK _A_RCON
        PUBWEAK _A_RCOUNT
        PUBWEAK _A_RSCON
        PUBWEAK _A_SPI1CON1
        PUBWEAK _A_SPI1CON2
        PUBWEAK _A_SPI1STAT
        PUBWEAK _A_SPI2CON1
        PUBWEAK _A_SPI2CON2
        PUBWEAK _A_SPI2STAT
        PUBWEAK _A_SR
        PUBWEAK _A_T1CON
        PUBWEAK _A_T2CON
        PUBWEAK _A_T3CON
        PUBWEAK _A_T4CON
        PUBWEAK _A_T5CON
        PUBWEAK _A_T6CON
        PUBWEAK _A_T7CON
        PUBWEAK _A_T8CON
        PUBWEAK _A_T9CON
        PUBWEAK _A_TBLPAG
        PUBWEAK _A_TRISA
        PUBWEAK _A_TRISB
        PUBWEAK _A_TRISC
        PUBWEAK _A_TRISD
        PUBWEAK _A_TRISE
        PUBWEAK _A_TRISF
        PUBWEAK _A_TRISG
        PUBWEAK _A_TSCON
        PUBWEAK _A_U1MODE
        PUBWEAK _A_U1RXREG
        PUBWEAK _A_U1STA
        PUBWEAK _A_U1TXREG
        PUBWEAK _A_U2MODE
        PUBWEAK _A_U2RXREG
        PUBWEAK _A_U2STA
        PUBWEAK _A_U2TXREG
        PUBWEAK _A_XBREV
        
        CFI Names cfiNames0
        CFI StackFrame CFA W15 DATA
        CFI Resource W0:16, W1:16, W2:16, W3:16, W4:16, W5:16, W6:16, W7:16
        CFI Resource W8:16, W9:16, W10:16, W11:16, W12:16, W13:16, W14:16
        CFI Resource W15:16
        CFI VirtualResource ACCAU:8, ACCBU:8, ACCAH:16, ACCBH:16, ACCAL:16
        CFI VirtualResource ACCBL:16, ?RET1:1, ?RET:24, ?RET25:25
        CFI ResourceParts ?RET25 ?RET, ?RET1
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign -2
        CFI ReturnAddress ?RET25 CODE
        CFI CFA W15+-4
        CFI W0 Undefined
        CFI W1 Undefined
        CFI W2 Undefined
        CFI W3 Undefined
        CFI W4 Undefined
        CFI W5 Undefined
        CFI W6 Undefined
        CFI W7 Undefined
        CFI W8 Undefined
        CFI W9 Undefined
        CFI W10 SameValue
        CFI W11 SameValue
        CFI W12 SameValue
        CFI W13 SameValue
        CFI W14 Undefined
        CFI ACCAU Undefined
        CFI ACCBU SameValue
        CFI ACCAH Undefined
        CFI ACCBH SameValue
        CFI ACCAL Undefined
        CFI ACCBL SameValue
        CFI ?RET1 0
        CFI ?RET Frame(CFA, 0)
        CFI ?RET25 Concat
        CFI EndCommon cfiCommon0
        
        EXTERN OS_StrLen
        FUNCTION OS_StrLen,0202H
        ARGFRAME CSTACK, 26, STACK
        EXTERN OS_StrCopy
        FUNCTION OS_StrCopy,0202H
        ARGFRAME CSTACK, 26, STACK
        EXTERN OSSemPost
        FUNCTION OSSemPost,0202H
        EXTERN OS_MemClr
        FUNCTION OS_MemClr,0202H
        ARGFRAME CSTACK, 10, STACK
        EXTERN OSSemCreate
        FUNCTION OSSemCreate,0202H
        ARGFRAME CSTACK, 10, STACK
        EXTERN OSEventNameSet
        FUNCTION OSEventNameSet,0202H
        ARGFRAME CSTACK, 10, STACK
        EXTERN OSTaskCreateExt
        FUNCTION OSTaskCreateExt,0202H
        ARGFRAME CSTACK, 10, STACK
        EXTERN OSTaskNameSet
        FUNCTION OSTaskNameSet,0202H
        ARGFRAME CSTACK, 10, STACK
        EXTERN OSSemPend
        FUNCTION OSSemPend,0202H
        ARGFRAME CSTACK, 10, STACK
        EXTERN OSIntNesting
        EXTERN OSTmrFree
        EXTERN OSTmrFreeList
        EXTERN OSTmrSem
        EXTERN OSTmrSemSignal
        EXTERN OSTmrTaskStk
        EXTERN OSTmrTbl
        EXTERN OSTmrTime
        EXTERN OSTmrUsed
        EXTERN OSTmrWheelTbl


        ASEGN SFR_A:DATA:ROOT,00H
// unsigned short volatile __sfr WREG0
WREG0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02H
// unsigned short volatile __sfr WREG1
WREG1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,04H
// unsigned short volatile __sfr WREG2
WREG2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,06H
// unsigned short volatile __sfr WREG3
WREG3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,08H
// unsigned short volatile __sfr WREG4
WREG4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0aH
// unsigned short volatile __sfr WREG5
WREG5:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0cH
// unsigned short volatile __sfr WREG6
WREG6:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0eH
// unsigned short volatile __sfr WREG7
WREG7:
        DS 2

        ASEGN SFR_A:DATA:ROOT,010H
// unsigned short volatile __sfr WREG8
WREG8:
        DS 2

        ASEGN SFR_A:DATA:ROOT,012H
// unsigned short volatile __sfr WREG9
WREG9:
        DS 2

        ASEGN SFR_A:DATA:ROOT,014H
// unsigned short volatile __sfr WREG10
WREG10:
        DS 2

        ASEGN SFR_A:DATA:ROOT,016H
// unsigned short volatile __sfr WREG11
WREG11:
        DS 2

        ASEGN SFR_A:DATA:ROOT,018H
// unsigned short volatile __sfr WREG12
WREG12:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01aH
// unsigned short volatile __sfr WREG13
WREG13:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01cH
// unsigned short volatile __sfr WREG14
WREG14:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01eH
// unsigned short volatile __sfr WREG15
WREG15:
        DS 2

        ASEGN SFR_A:DATA:ROOT,020H
// unsigned short volatile __sfr SPLIM
SPLIM:
        DS 2

        ASEGN SFR_A:DATA:ROOT,022H
// unsigned short volatile __sfr ACCAL
ACCAL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,024H
// unsigned short volatile __sfr ACCAH
ACCAH:
        DS 2

        ASEGN SFR_A:DATA:ROOT,026H
// unsigned short volatile __sfr ACCAU
ACCAU:
        DS 2

        ASEGN SFR_A:DATA:ROOT,028H
// unsigned short volatile __sfr ACCBL
ACCBL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02aH
// unsigned short volatile __sfr ACCBH
ACCBH:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02cH
// unsigned short volatile __sfr ACCBU
ACCBU:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02eH
// unsigned short volatile __sfr PCL
PCL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03aH
// unsigned short volatile __sfr DOSTARTL
DOSTARTL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03eH
// unsigned short volatile __sfr DOENDL
DOENDL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,048H
// unsigned short volatile __sfr XMODSRT
XMODSRT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,04aH
// unsigned short volatile __sfr XMODEND
XMODEND:
        DS 2

        ASEGN SFR_A:DATA:ROOT,04cH
// unsigned short volatile __sfr YMODSRT
YMODSRT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,04eH
// unsigned short volatile __sfr YMODEND
YMODEND:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0100H
// unsigned short volatile __sfr TMR1
TMR1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0102H
// unsigned short volatile __sfr PR1
PR1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0106H
// unsigned short volatile __sfr TMR2
TMR2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0108H
// unsigned short volatile __sfr TMR3HLD
TMR3HLD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,010aH
// unsigned short volatile __sfr TMR3
TMR3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,010cH
// unsigned short volatile __sfr PR2
PR2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,010eH
// unsigned short volatile __sfr PR3
PR3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0114H
// unsigned short volatile __sfr TMR4
TMR4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0116H
// unsigned short volatile __sfr TMR5HLD
TMR5HLD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0118H
// unsigned short volatile __sfr TMR5
TMR5:
        DS 2

        ASEGN SFR_A:DATA:ROOT,011aH
// unsigned short volatile __sfr PR4
PR4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,011cH
// unsigned short volatile __sfr PR5
PR5:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0122H
// unsigned short volatile __sfr TMR6
TMR6:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0124H
// unsigned short volatile __sfr TMR7HLD
TMR7HLD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0126H
// unsigned short volatile __sfr TMR7
TMR7:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0128H
// unsigned short volatile __sfr PR6
PR6:
        DS 2

        ASEGN SFR_A:DATA:ROOT,012aH
// unsigned short volatile __sfr PR7
PR7:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0130H
// unsigned short volatile __sfr TMR8
TMR8:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0132H
// unsigned short volatile __sfr TMR9HLD
TMR9HLD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0134H
// unsigned short volatile __sfr TMR9
TMR9:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0136H
// unsigned short volatile __sfr PR8
PR8:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0138H
// unsigned short volatile __sfr PR9
PR9:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0140H
// unsigned short volatile __sfr IC1BUF
IC1BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0144H
// unsigned short volatile __sfr IC2BUF
IC2BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0148H
// unsigned short volatile __sfr IC3BUF
IC3BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,014cH
// unsigned short volatile __sfr IC4BUF
IC4BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0150H
// unsigned short volatile __sfr IC5BUF
IC5BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0154H
// unsigned short volatile __sfr IC6BUF
IC6BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0158H
// unsigned short volatile __sfr IC7BUF
IC7BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,015cH
// unsigned short volatile __sfr IC8BUF
IC8BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0180H
// unsigned short volatile __sfr OC1RS
OC1RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0182H
// unsigned short volatile __sfr OC1R
OC1R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0186H
// unsigned short volatile __sfr OC2RS
OC2RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0188H
// unsigned short volatile __sfr OC2R
OC2R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,018cH
// unsigned short volatile __sfr OC3RS
OC3RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,018eH
// unsigned short volatile __sfr OC3R
OC3R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0192H
// unsigned short volatile __sfr OC4RS
OC4RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0194H
// unsigned short volatile __sfr OC4R
OC4R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0198H
// unsigned short volatile __sfr OC5RS
OC5RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,019aH
// unsigned short volatile __sfr OC5R
OC5R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,019eH
// unsigned short volatile __sfr OC6RS
OC6RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01a0H
// unsigned short volatile __sfr OC6R
OC6R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01a4H
// unsigned short volatile __sfr OC7RS
OC7RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01a6H
// unsigned short volatile __sfr OC7R
OC7R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01aaH
// unsigned short volatile __sfr OC8RS
OC8RS:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01acH
// unsigned short volatile __sfr OC8R
OC8R:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0228H
// unsigned short volatile __sfr U1BRG
U1BRG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0238H
// unsigned short volatile __sfr U2BRG
U2BRG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0248H
// unsigned short volatile __sfr SPI1BUF
SPI1BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0268H
// unsigned short volatile __sfr SPI2BUF
SPI2BUF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0290H
// unsigned short volatile __sfr RXBUF0
RXBUF0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0292H
// unsigned short volatile __sfr RXBUF1
RXBUF1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0294H
// unsigned short volatile __sfr RXBUF2
RXBUF2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0296H
// unsigned short volatile __sfr RXBUF3
RXBUF3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0298H
// unsigned short volatile __sfr TXBUF0
TXBUF0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,029aH
// unsigned short volatile __sfr TXBUF1
TXBUF1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,029cH
// unsigned short volatile __sfr TXBUF2
TXBUF2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,029eH
// unsigned short volatile __sfr TXBUF3
TXBUF3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,032eH
// unsigned short volatile __sfr AD1CSSH
AD1CSSH:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0384H
// unsigned short volatile __sfr DMA0STA
DMA0STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0386H
// unsigned short volatile __sfr DMA0STB
DMA0STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0388H
// unsigned short volatile __sfr DMA0PAD
DMA0PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,038aH
// unsigned short volatile __sfr DMA0CNT
DMA0CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0390H
// unsigned short volatile __sfr DMA1STA
DMA1STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0392H
// unsigned short volatile __sfr DMA1STB
DMA1STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0394H
// unsigned short volatile __sfr DMA1PAD
DMA1PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0396H
// unsigned short volatile __sfr DMA1CNT
DMA1CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,039cH
// unsigned short volatile __sfr DMA2STA
DMA2STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,039eH
// unsigned short volatile __sfr DMA2STB
DMA2STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03a0H
// unsigned short volatile __sfr DMA2PAD
DMA2PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03a2H
// unsigned short volatile __sfr DMA2CNT
DMA2CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03a8H
// unsigned short volatile __sfr DMA3STA
DMA3STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03aaH
// unsigned short volatile __sfr DMA3STB
DMA3STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03acH
// unsigned short volatile __sfr DMA3PAD
DMA3PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03aeH
// unsigned short volatile __sfr DMA3CNT
DMA3CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03b4H
// unsigned short volatile __sfr DMA4STA
DMA4STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03b6H
// unsigned short volatile __sfr DMA4STB
DMA4STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03b8H
// unsigned short volatile __sfr DMA4PAD
DMA4PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03baH
// unsigned short volatile __sfr DMA4CNT
DMA4CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03c0H
// unsigned short volatile __sfr DMA5STA
DMA5STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03c2H
// unsigned short volatile __sfr DMA5STB
DMA5STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03c4H
// unsigned short volatile __sfr DMA5PAD
DMA5PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03c6H
// unsigned short volatile __sfr DMA5CNT
DMA5CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03ccH
// unsigned short volatile __sfr DMA6STA
DMA6STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03ceH
// unsigned short volatile __sfr DMA6STB
DMA6STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03d0H
// unsigned short volatile __sfr DMA6PAD
DMA6PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03d2H
// unsigned short volatile __sfr DMA6CNT
DMA6CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03d8H
// unsigned short volatile __sfr DMA7STA
DMA7STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03daH
// unsigned short volatile __sfr DMA7STB
DMA7STB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03dcH
// unsigned short volatile __sfr DMA7PAD
DMA7PAD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03deH
// unsigned short volatile __sfr DMA7CNT
DMA7CNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03e4H
// unsigned short volatile __sfr DSADR
DSADR:
        DS 2

        RSEG CODE:CODE:NOROOT(2)
OSTmrCreate:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function OSTmrCreate
        FUNCALL OSTmrCreate, OSTmr_Lock
        LOCFRAME CSTACK, 26, STACK
        ARGFRAME CSTACK, 26, STACK
        FUNCALL OSTmrCreate, OSTmr_Alloc
        LOCFRAME CSTACK, 26, STACK
        ARGFRAME CSTACK, 26, STACK
        FUNCALL OSTmrCreate, OSTmr_Unlock
        LOCFRAME CSTACK, 26, STACK
        ARGFRAME CSTACK, 26, STACK
        FUNCALL OSTmrCreate, OS_StrLen
        LOCFRAME CSTACK, 26, STACK
        ARGFRAME CSTACK, 26, STACK
        FUNCALL OSTmrCreate, OS_StrCopy
        LOCFRAME CSTACK, 26, STACK
        ARGFRAME CSTACK, 26, STACK
        FUNCALL OSTmrCreate, OSTmr_Unlock
        LOCFRAME CSTACK, 26, STACK
        ARGFRAME CSTACK, 26, STACK
        FUNCALL OSTmrCreate, OSTmr_Unlock
        LOCFRAME CSTACK, 26, STACK
        ARGFRAME CSTACK, 26, STACK
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 8
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV.D     W12,[W15++]
        CFI W13 Frame(CFA, 6)
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-12
        ; Saved register size: 8
        ; Auto size: 18
        ADD       #18,W15
        CFI CFA W15+-30
        MOV       W0,[W15-6]
        MOV       W1,[W15-4]
        MOV       W2,[W15-10]
        MOV       W3,[W15-8]
        MOV.b     W4,[W15-2]
        MOV       W6,[W15-14]
        MOV       W7,[W15-12]
        MOV       W8,[W15-18]
        MOV       W9,[W15-16]
        MOV       #34,W0
        SUB       W15,W0,W0
        MOV.D     [W0],W12
        MOV       #OSIntNesting,W0
        CP0.b     [W0]
        BRA       Z, ??OSTmr_Task_0
        MOV       #38,W0
        SUB       W15,W0,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_1
        MOV.b     #-117,W1
        MOV.b     W1,[W0]
??OSTmr_Task_1:
        MOV       #0,W0
        MOV       #0,W1
        BRA       ??OSTmr_Task_2
??OSTmr_Task_0:
        ; Setup parameters for call to function OSTmr_Lock
        CALL      OSTmr_Lock
        ; Setup parameters for call to function OSTmr_Alloc
        CALL      OSTmr_Alloc
        ; DSP MODE; unknown 
        MOV.D     W0,W10
        CP0       W0
        CPB.b     W1,#0
        BRA       NZ, ??OSTmr_Task_3
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        MOV       #38,W0
        SUB       W15,W0,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_1
        MOV.b     #-122,W1
        MOV.b     W1,[W0]
        BRA       ??OSTmr_Task_1
??OSTmr_Task_3:
        ADD       #47,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_4
        MOV.b     #1,W1
        MOV.b     W1,[W0]
??OSTmr_Task_4:
        SUB       W15,#6,W0
        MOV.D     [W0],W0
        MOV.D     W10,W2
        ADD       #22,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_5
        MOV.D     W0,[W2]
??OSTmr_Task_5:
        SUB       W15,#10,W0
        MOV.D     [W0],W0
        MOV.D     W10,W2
        ADD       #26,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_6
        MOV.D     W0,[W2]
??OSTmr_Task_6:
        MOV.b     [W15-2],W0
        MOV.D     W10,W2
        ADD       #46,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_7
        MOV.b     W0,[W2]
??OSTmr_Task_7:
        SUB       W15,#14,W0
        MOV.D     [W0],W0
        MOV.D     W10,W2
        INC2      W2,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_8
        MOV.D     W0,[W2]
??OSTmr_Task_8:
        SUB       W15,#18,W0
        MOV.D     [W0],W0
        MOV.D     W10,W2
        ADD       #6,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_9
        MOV.D     W0,[W2]
??OSTmr_Task_9:
        CP0       W12
        CPB.b     W13,#0
        BRA       Z, ??OSTmr_Task_10
        ; Setup parameters for call to function OS_StrLen
        MOV.D     W12,W0
        CALL      OS_StrLen
        ; DSP MODE; unknown 
        CP.b      W0,#16
        BRA       C, ??OSTmr_Task_11
        ; Setup parameters for call to function OS_StrCopy
        MOV.D     W12,W2
        MOV.D     W10,W0
        ADD       #30,W0
        ADDC.b    W1,#0,W1
        CALL      OS_StrCopy
??OSTmr_Task_10:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        MOV       #38,W0
        SUB       W15,W0,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_12
        CLR.b     [W0]
??OSTmr_Task_12:
        MOV.D     W10,W0
??OSTmr_Task_2:
        SUB       #18,W15
        CFI CFA W15+-12
        MOV.D     [--W15],W12
        CFI W12 SameValue
        CFI W13 SameValue
        CFI CFA W15+-8
        MOV.D     [--W15],W10
        CFI W10 SameValue
        CFI W11 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI W10 Frame(CFA, 0)
        CFI W11 Frame(CFA, 2)
        CFI W12 Frame(CFA, 4)
        CFI W13 Frame(CFA, 6)
        CFI CFA W15+-30
??OSTmr_Task_11:
        MOV.D     W10,W0
        ADD       #30,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_13
        MOV.b     #35,W1
        MOV.b     W1,[W0]
??OSTmr_Task_13:
        MOV.D     W10,W0
        ADD       #31,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_14
        CLR.b     [W0]
??OSTmr_Task_14:
        MOV       #38,W0
        SUB       W15,W0,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_15
        MOV.b     #-116,W1
        MOV.b     W1,[W0]
??OSTmr_Task_15:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BRA       ??OSTmr_Task_12
        CFI EndBlock cfiBlock0
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmrDel:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function OSTmrDel
        FUNCALL OSTmrDel, OSTmr_Lock
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrDel, OSTmr_Unlink
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrDel, OSTmr_Free
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrDel, OSTmr_Unlock
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrDel, OSTmr_Free
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrDel, OSTmr_Unlock
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrDel, OSTmr_Unlock
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrDel, OSTmr_Unlock
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV.D     W12,[W15++]
        CFI W13 Frame(CFA, 6)
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-12
        ; Saved register size: 8
        ; Auto size: 0
        MOV.D     W2,W10
        MOV.D     W0,W12
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_16
        CALL      ?CONST_CHAR
        BRA       ??OSTmr_Task_17
??OSTmr_Task_16:
        MOV.b     [W0],W2
??OSTmr_Task_17:
        MOV       #100,W0
        CP.b      W2,W0
        BRA       Z, ??OSTmr_Task_18
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_19
        MOV.b     #-119,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_19
??OSTmr_Task_18:
        MOV       #OSIntNesting,W0
        CP0.b     [W0]
        BRA       Z, ??OSTmr_Task_20
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_19
        MOV.b     #-117,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_19
??OSTmr_Task_20:
        ; Setup parameters for call to function OSTmr_Lock
        CALL      OSTmr_Lock
        MOV.D     W12,W0
        ADD       #47,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_21
        CALL      ?CONST_CHAR
        BRA       ??OSTmr_Task_22
??OSTmr_Task_21:
        MOV.b     [W0],W2
??OSTmr_Task_22:
        SUB.b     #0,W2
        BRA       Z, ??OSTmr_Task_23
        SUB.b     #1,W2
        CP.b      W2,#2
        BRA       NC, ??OSTmr_Task_24
        BRA       Z, ??OSTmr_Task_25
        BRA       ??OSTmr_Task_26
??OSTmr_Task_25:
        ; Setup parameters for call to function OSTmr_Unlink
        MOV.D     W12,W0
        CALL      OSTmr_Unlink
        ; Setup parameters for call to function OSTmr_Free
        MOV.D     W12,W0
        CALL      OSTmr_Free
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_27
        CLR.b     [W10]
??OSTmr_Task_27:
        MOV       #1,W0
        BRA       ??OSTmr_Task_28
??OSTmr_Task_24:
        ; Setup parameters for call to function OSTmr_Free
        MOV.D     W12,W0
        CALL      OSTmr_Free
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_27
        CLR.b     [W10]
        BRA       ??OSTmr_Task_27
??OSTmr_Task_23:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_19
        MOV.b     #-121,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_19
??OSTmr_Task_26:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_19
        MOV.b     #-115,W11
        MOV.b     W11,[W10]
??OSTmr_Task_19:
        MOV       #0,W0
??OSTmr_Task_28:
        MOV.D     [--W15],W12
        CFI W12 SameValue
        CFI W13 SameValue
        CFI CFA W15+-8
        MOV.D     [--W15],W10
        CFI W10 SameValue
        CFI W11 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock1
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmrNameGet:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function OSTmrNameGet
        FUNCALL OSTmrNameGet, OSTmr_Lock
        LOCFRAME CSTACK, 12, STACK
        ARGFRAME CSTACK, 12, STACK
        FUNCALL OSTmrNameGet, OS_StrCopy
        LOCFRAME CSTACK, 12, STACK
        ARGFRAME CSTACK, 12, STACK
        FUNCALL OSTmrNameGet, OSTmr_Unlock
        LOCFRAME CSTACK, 12, STACK
        ARGFRAME CSTACK, 12, STACK
        FUNCALL OSTmrNameGet, OSTmr_Unlock
        LOCFRAME CSTACK, 12, STACK
        ARGFRAME CSTACK, 12, STACK
        FUNCALL OSTmrNameGet, OSTmr_Unlock
        LOCFRAME CSTACK, 12, STACK
        ARGFRAME CSTACK, 12, STACK
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV.D     W12,[W15++]
        CFI W13 Frame(CFA, 6)
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-12
        ; Saved register size: 8
        ; Auto size: 4
        ADD       #4,W15
        CFI CFA W15+-16
        MOV       W2,[W15-4]
        MOV       W3,[W15-2]
        MOV.D     W4,W10
        MOV.D     W0,W12
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_29
        CALL      ?CONST_CHAR
        BRA       ??OSTmr_Task_30
??OSTmr_Task_29:
        MOV.b     [W0],W2
??OSTmr_Task_30:
        MOV       #100,W0
        CP.b      W2,W0
        BRA       Z, ??OSTmr_Task_31
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_32
        MOV.b     #-119,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_32
??OSTmr_Task_31:
        MOV       #OSIntNesting,W0
        CP0.b     [W0]
        BRA       Z, ??OSTmr_Task_33
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_32
        MOV.b     #17,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_32
??OSTmr_Task_33:
        ; Setup parameters for call to function OSTmr_Lock
        CALL      OSTmr_Lock
        MOV.D     W12,W0
        ADD       #47,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_34
        CALL      ?CONST_CHAR
        BRA       ??OSTmr_Task_35
??OSTmr_Task_34:
        MOV.b     [W0],W2
??OSTmr_Task_35:
        SUB.b     #0,W2
        BRA       Z, ??OSTmr_Task_36
        SUB.b     #1,W2
        CP.b      W2,#3
        BRA       NC, ??OSTmr_Task_37
        BRA       ??OSTmr_Task_38
??OSTmr_Task_37:
        ; Setup parameters for call to function OS_StrCopy
        ADD       #30,W12
        ADDC.b    W13,#0,W13
        MOV.D     W12,W2
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        CALL      OS_StrCopy
        ; DSP MODE; unknown 
        MOV       W0,W12
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_39
        CLR.b     [W10]
??OSTmr_Task_39:
        MOV       W12,W0
        BRA       ??OSTmr_Task_40
??OSTmr_Task_36:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_32
        MOV.b     #-121,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_32
??OSTmr_Task_38:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_32
        MOV.b     #-115,W11
        MOV.b     W11,[W10]
??OSTmr_Task_32:
        MOV       #0,W0
        CFI EndBlock cfiBlock2
??OSTmr_Task_40:
	REQUIRE ?CLDSPIC_1_21_L00
	REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG CODE:CODE:NOROOT(2)
?Subroutine0:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA W15+-16
        CFI W10 Frame(CFA, 0)
        CFI W11 Frame(CFA, 2)
        CFI W12 Frame(CFA, 4)
        CFI W13 Frame(CFA, 6)
        CFI Invalid
        SUB       #4,W15
        CFI CFA W15+-12
        MOV.D     [--W15],W12
        CFI CFA W15+-8
        CFI W12 SameValue
        CFI W13 SameValue
        MOV.D     [--W15],W10
        CFI CFA W15+-4
        CFI W10 SameValue
        CFI W11 SameValue
        RETURN    
        CFI EndBlock cfiBlock3
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmrRemainGet:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function OSTmrRemainGet
        FUNCALL OSTmrRemainGet, OSTmr_Lock
        LOCFRAME CSTACK, 12, STACK
        ARGFRAME CSTACK, 12, STACK
        FUNCALL OSTmrRemainGet, OSTmr_Unlock
        LOCFRAME CSTACK, 12, STACK
        ARGFRAME CSTACK, 12, STACK
        FUNCALL OSTmrRemainGet, OSTmr_Unlock
        LOCFRAME CSTACK, 12, STACK
        ARGFRAME CSTACK, 12, STACK
        FUNCALL OSTmrRemainGet, OSTmr_Unlock
        LOCFRAME CSTACK, 12, STACK
        ARGFRAME CSTACK, 12, STACK
        FUNCALL OSTmrRemainGet, OSTmr_Unlock
        LOCFRAME CSTACK, 12, STACK
        ARGFRAME CSTACK, 12, STACK
        FUNCALL OSTmrRemainGet, OSTmr_Unlock
        LOCFRAME CSTACK, 12, STACK
        ARGFRAME CSTACK, 12, STACK
        FUNCALL OSTmrRemainGet, OSTmr_Unlock
        LOCFRAME CSTACK, 12, STACK
        ARGFRAME CSTACK, 12, STACK
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV.D     W12,[W15++]
        CFI W13 Frame(CFA, 6)
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-12
        ; Saved register size: 8
        ; Auto size: 4
        ADD       #4,W15
        CFI CFA W15+-16
        MOV       W0,[W15-4]
        MOV       W1,[W15-2]
        MOV.D     W2,W10
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_41
        CALL      ?CONST_CHAR
        BRA       ??OSTmr_Task_42
??OSTmr_Task_41:
        MOV.b     [W0],W2
??OSTmr_Task_42:
        MOV       #100,W0
        CP.b      W2,W0
        BRA       Z, ??OSTmr_Task_43
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_44
        MOV.b     #-119,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_44
??OSTmr_Task_43:
        MOV       #OSIntNesting,W0
        CP0.b     [W0]
        BRA       Z, ??OSTmr_Task_45
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_44
        MOV.b     #-117,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_44
??OSTmr_Task_45:
        ; Setup parameters for call to function OSTmr_Lock
        CALL      OSTmr_Lock
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        ADD       #47,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_46
        CALL      ?CONST_CHAR
        BRA       ??OSTmr_Task_47
??OSTmr_Task_46:
        MOV.b     [W0],W2
??OSTmr_Task_47:
        XOR.b     #0,W2
        BRA       Z, ??OSTmr_Task_48
        XOR.b     #1,W2
        BRA       Z, ??OSTmr_Task_49
        XOR.b     #3,W2
        BRA       Z, ??OSTmr_Task_50
        XOR.b     #1,W2
        BRA       Z, ??OSTmr_Task_51
        BRA       ??OSTmr_Task_52
??OSTmr_Task_51:
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        ADD       #18,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_53
        CALL      ?CONST_LONG
        BRA       ??OSTmr_Task_54
??OSTmr_Task_53:
        MOV.D     [W0],W2
??OSTmr_Task_54:
        MOV       OSTmrTime,W0
        MOV       OSTmrTime+2,W1
        SUB       W2,W0,W12
        SUBB      W3,W1,W13
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_55
        CLR.b     [W10]
??OSTmr_Task_55:
        MOV.D     W12,W0
        BRA       ??OSTmr_Task_56
??OSTmr_Task_49:
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        ADD       #46,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_57
        CALL      ?CONST_CHAR
        BRA       ??OSTmr_Task_58
??OSTmr_Task_57:
        MOV.b     [W0],W2
??OSTmr_Task_58:
        XOR.b     #2,W2
        BRA       Z, ??OSTmr_Task_59
        BRA       ??OSTmr_Task_60
??OSTmr_Task_59:
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        ADD       #22,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_61
        CALL      ?CONST_LONG
        BRA       ??OSTmr_Task_62
??OSTmr_Task_61:
        MOV.D     [W0],W2
??OSTmr_Task_62:
        IOR       W2,W3,W0
        BRA       NZ, ??OSTmr_Task_63
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        ADD       #26,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_64
        CALL      ?CONST_LONG
        BRA       ??OSTmr_Task_65
??OSTmr_Task_64:
        MOV.D     [W0],W2
        BRA       ??OSTmr_Task_65
??OSTmr_Task_63:
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        ADD       #22,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_66
        CALL      ?CONST_LONG
        BRA       ??OSTmr_Task_65
??OSTmr_Task_66:
        MOV.D     [W0],W2
??OSTmr_Task_65:
        MOV.D     W2,W12
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_55
        CLR.b     [W10]
        BRA       ??OSTmr_Task_55
??OSTmr_Task_60:
        SUB       W15,#4,W0
        MOV.D     [W0],W0
        ADD       #22,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_67
        CALL      ?CONST_LONG
        BRA       ??OSTmr_Task_68
??OSTmr_Task_67:
        MOV.D     [W0],W2
??OSTmr_Task_68:
        MOV.D     W2,W12
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_55
        CLR.b     [W10]
        BRA       ??OSTmr_Task_55
??OSTmr_Task_50:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_44
        CLR.b     [W10]
        BRA       ??OSTmr_Task_44
??OSTmr_Task_48:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_44
        MOV.b     #-121,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_44
??OSTmr_Task_52:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_44
        MOV.b     #-115,W11
        MOV.b     W11,[W10]
??OSTmr_Task_44:
        MOV       #0,W0
        MOV       #0,W1
??OSTmr_Task_56:
        BRA       ?Subroutine0
        CFI EndBlock cfiBlock4
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmrStateGet:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function OSTmrStateGet
        FUNCALL OSTmrStateGet, OSTmr_Lock
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrStateGet, OSTmr_Unlock
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV.D     W12,[W15++]
        CFI W13 Frame(CFA, 6)
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-12
        ; Saved register size: 8
        ; Auto size: 0
        MOV.D     W2,W10
        MOV.D     W0,W12
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_69
        CALL      ?CONST_CHAR
        BRA       ??OSTmr_Task_70
??OSTmr_Task_69:
        MOV.b     [W0],W2
??OSTmr_Task_70:
        MOV       #100,W0
        CP.b      W2,W0
        BRA       Z, ??OSTmr_Task_71
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_72
        MOV.b     #-119,W11
        MOV.b     W11,[W10]
??OSTmr_Task_72:
        MOV       #0,W0
        BRA       ??OSTmr_Task_73
??OSTmr_Task_71:
        MOV       #OSIntNesting,W0
        CP0.b     [W0]
        BRA       Z, ??OSTmr_Task_74
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_72
        MOV.b     #-117,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_72
??OSTmr_Task_74:
        ; Setup parameters for call to function OSTmr_Lock
        CALL      OSTmr_Lock
        ADD       #47,W12
        ADDC.b    W13,#0,W13
        MOV.D     W12,W0
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_75
        CALL      ?CONST_CHAR
        BRA       ??OSTmr_Task_76
??OSTmr_Task_75:
        MOV.b     [W0],W2
??OSTmr_Task_76:
        MOV       W2,W12
        MOV       W2,W0
        CP.b      W0,#4
        BRA       NC, ??OSTmr_Task_77
        BRA       ??OSTmr_Task_78
??OSTmr_Task_77:
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_79
        CLR.b     [W10]
        BRA       ??OSTmr_Task_79
??OSTmr_Task_78:
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_79
        MOV.b     #-115,W11
        MOV.b     W11,[W10]
??OSTmr_Task_79:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        MOV       W12,W0
??OSTmr_Task_73:
        MOV.D     [--W15],W12
        CFI W12 SameValue
        CFI W13 SameValue
        CFI CFA W15+-8
        MOV.D     [--W15],W10
        CFI W10 SameValue
        CFI W11 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock5
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmrStart:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function OSTmrStart
        FUNCALL OSTmrStart, OSTmr_Lock
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrStart, OSTmr_Unlink
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrStart, OSTmr_Link
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrStart, OSTmr_Unlock
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrStart, OSTmr_Link
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrStart, OSTmr_Unlock
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrStart, OSTmr_Unlock
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
        FUNCALL OSTmrStart, OSTmr_Unlock
        LOCFRAME CSTACK, 8, STACK
        ARGFRAME CSTACK, 8, STACK
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV.D     W12,[W15++]
        CFI W13 Frame(CFA, 6)
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-12
        ; Saved register size: 8
        ; Auto size: 0
        MOV.D     W2,W10
        MOV.D     W0,W12
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_80
        CALL      ?CONST_CHAR
        BRA       ??OSTmr_Task_81
??OSTmr_Task_80:
        MOV.b     [W0],W2
??OSTmr_Task_81:
        MOV       #100,W0
        CP.b      W2,W0
        BRA       Z, ??OSTmr_Task_82
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_83
        MOV.b     #-119,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_83
??OSTmr_Task_82:
        MOV       #OSIntNesting,W0
        CP0.b     [W0]
        BRA       Z, ??OSTmr_Task_84
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_83
        MOV.b     #-117,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_83
??OSTmr_Task_84:
        ; Setup parameters for call to function OSTmr_Lock
        CALL      OSTmr_Lock
        MOV.D     W12,W0
        ADD       #47,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_85
        CALL      ?CONST_CHAR
        BRA       ??OSTmr_Task_86
??OSTmr_Task_85:
        MOV.b     [W0],W2
??OSTmr_Task_86:
        SUB.b     #0,W2
        BRA       Z, ??OSTmr_Task_87
        SUB.b     #1,W2
        CP.b      W2,#2
        BRA       NC, ??OSTmr_Task_88
        BRA       Z, ??OSTmr_Task_89
        BRA       ??OSTmr_Task_90
??OSTmr_Task_89:
        ; Setup parameters for call to function OSTmr_Unlink
        MOV.D     W12,W0
        CALL      OSTmr_Unlink
        ; Setup parameters for call to function OSTmr_Link
        MOV       #0,W2
        MOV.D     W12,W0
        CALL      OSTmr_Link
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_91
        CLR.b     [W10]
??OSTmr_Task_91:
        MOV       #1,W0
        BRA       ??OSTmr_Task_92
??OSTmr_Task_88:
        ; Setup parameters for call to function OSTmr_Link
        MOV       #0,W2
        MOV.D     W12,W0
        CALL      OSTmr_Link
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_91
        CLR.b     [W10]
        BRA       ??OSTmr_Task_91
??OSTmr_Task_87:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_83
        MOV.b     #-121,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_83
??OSTmr_Task_90:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_83
        MOV.b     #-115,W11
        MOV.b     W11,[W10]
??OSTmr_Task_83:
        MOV       #0,W0
??OSTmr_Task_92:
        MOV.D     [--W15],W12
        CFI W12 SameValue
        CFI W13 SameValue
        CFI CFA W15+-8
        MOV.D     [--W15],W10
        CFI W10 SameValue
        CFI W11 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock6
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmrStop:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function OSTmrStop
        FUNCALL OSTmrStop, OSTmr_Lock
        LOCFRAME CSTACK, 14, STACK
        ARGFRAME CSTACK, 14, STACK
        FUNCALL OSTmrStop, OSTmr_Unlink
        LOCFRAME CSTACK, 14, STACK
        ARGFRAME CSTACK, 14, STACK
        FUNCALL OSTmrStop, OSTmr_Unlock
        LOCFRAME CSTACK, 14, STACK
        ARGFRAME CSTACK, 14, STACK
        FUNCALL OSTmrStop, OSTmr_Unlock
        LOCFRAME CSTACK, 14, STACK
        ARGFRAME CSTACK, 14, STACK
        FUNCALL OSTmrStop, OSTmr_Unlock
        LOCFRAME CSTACK, 14, STACK
        ARGFRAME CSTACK, 14, STACK
        FUNCALL OSTmrStop, OSTmr_Unlock
        LOCFRAME CSTACK, 14, STACK
        ARGFRAME CSTACK, 14, STACK
	REQUIRE __SETUP_SAT
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV.D     W12,[W15++]
        CFI W13 Frame(CFA, 6)
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-12
        ; Saved register size: 8
        ; Auto size: 6
        ADD       #6,W15
        CFI CFA W15+-18
        MOV.b     W2,[W15-2]
        MOV       W4,[W15-6]
        MOV       W5,[W15-4]
        MOV.D     W6,W10
        MOV.D     W0,W12
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_93
        CALL      ?CONST_CHAR
        BRA       ??OSTmr_Task_94
??OSTmr_Task_93:
        MOV.b     [W0],W2
??OSTmr_Task_94:
        MOV       #100,W0
        CP.b      W2,W0
        BRA       Z, ??OSTmr_Task_95
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_96
        MOV.b     #-119,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_96
??OSTmr_Task_95:
        MOV       #OSIntNesting,W0
        CP0.b     [W0]
        BRA       Z, ??OSTmr_Task_97
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_96
        MOV.b     #-117,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_96
??OSTmr_Task_97:
        ; Setup parameters for call to function OSTmr_Lock
        CALL      OSTmr_Lock
        MOV.D     W12,W0
        ADD       #47,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_98
        CALL      ?CONST_CHAR
        BRA       ??OSTmr_Task_99
??OSTmr_Task_98:
        MOV.b     [W0],W2
??OSTmr_Task_99:
        SUB.b     #0,W2
        BRA       Z, ??OSTmr_Task_100
        SUB.b     #1,W2
        CP.b      W2,#2
        BRA       NC, ??OSTmr_Task_101
        BRA       Z, ??OSTmr_Task_102
        BRA       ??OSTmr_Task_103
??OSTmr_Task_102:
        ; Setup parameters for call to function OSTmr_Unlink
        MOV.D     W12,W0
        CALL      OSTmr_Unlink
        MOV.D     W10,W0
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_104
        CLR.b     [W0]
??OSTmr_Task_104:
        MOV.b     [W15-2],W0
        XOR.b     #0,W0
        BRA       Z, ??OSTmr_Task_105
        XOR.b     #3,W0
        BRA       Z, ??OSTmr_Task_106
        XOR.b     #7,W0
        BRA       Z, ??OSTmr_Task_107
        BRA       ??OSTmr_Task_108
??OSTmr_Task_106:
        MOV.D     W12,W0
        INC2      W0,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_109
        CALL      ?CONST_PTR
        BRA       ??OSTmr_Task_110
??OSTmr_Task_109:
        MOV.D     [W0],W2
??OSTmr_Task_110:
        MOV.D     W2,W4
        CP0       W2
        CPB.b     W3,#0
        BRA       Z, ??OSTmr_Task_111
        ; Setup parameters for indirect call
        MOV.D     W12,W0
        ADD       #6,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_112
        CALL      ?CONST_PTR
        BRA       ??OSTmr_Task_113
??OSTmr_Task_112:
        MOV.D     [W0],W2
??OSTmr_Task_113:
        MOV.D     W12,W0
        CALL      ?CALL_WP2
        BRA       ??OSTmr_Task_105
??OSTmr_Task_111:
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_105
        MOV.b     #-113,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_105
??OSTmr_Task_107:
        MOV.D     W12,W0
        INC2      W0,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_114
        CALL      ?CONST_PTR
        BRA       ??OSTmr_Task_115
??OSTmr_Task_114:
        MOV.D     [W0],W2
??OSTmr_Task_115:
        MOV.D     W2,W4
        CP0       W2
        CPB.b     W3,#0
        BRA       Z, ??OSTmr_Task_116
        ; Setup parameters for indirect call
        SUB       W15,#6,W0
        MOV.D     [W0],W2
        MOV.D     W12,W0
        CALL      ?CALL_WP2
        BRA       ??OSTmr_Task_105
??OSTmr_Task_116:
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_105
        MOV.b     #-113,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_105
??OSTmr_Task_108:
        BRA       NC, ??OSTmr_Task_105
        MOV.b     #-124,W11
        MOV.b     W11,[W10]
??OSTmr_Task_105:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
??OSTmrStop_0:
        MOV       #1,W0
        BRA       ??OSTmr_Task_117
??OSTmr_Task_101:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmrStop_0
        MOV.b     #-114,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmrStop_0
??OSTmr_Task_100:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_96
        MOV.b     #-121,W11
        MOV.b     W11,[W10]
        BRA       ??OSTmr_Task_96
??OSTmr_Task_103:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
        ; DSP MODE; unknown 
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_96
        MOV.b     #-115,W11
        MOV.b     W11,[W10]
??OSTmr_Task_96:
        MOV       #0,W0
??OSTmr_Task_117:
        SUB       #6,W15
        CFI CFA W15+-12
        MOV.D     [--W15],W12
        CFI W12 SameValue
        CFI W13 SameValue
        CFI CFA W15+-8
        MOV.D     [--W15],W10
        CFI W10 SameValue
        CFI W11 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock7
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmrSignal:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function OSTmrSignal
        FUNCALL OSTmrSignal, OSSemPost
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function OSSemPost
        MOV       #OSTmrSemSignal,W0
        CFI EndBlock cfiBlock8
	REQUIRE ?CLDSPIC_1_21_L00
	REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG CODE:CODE:NOROOT(2)
?Subroutine1:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI Invalid
        MOV.D     [W0],W0
        CALL      OSSemPost
        ; DSP MODE; unknown 
        RETURN    
        CFI EndBlock cfiBlock9
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmr_Alloc:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function OSTmr_Alloc
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV       #OSTmrFreeList,W0
        MOV.D     [W0],W0
        MOV       #0,W2
        MOV       #0,W3
        CP0       W0
        CPB.b     W1,#0
        MOV       #OSTmrFreeList,W0
        BRA       NZ, ??OSTmr_Task_118
        MOV       #0,W0
        MOV       #0,W1
        RETURN    
??OSTmr_Task_118:
        MOV.D     [W0],W4
        MOV.D     W4,W0
        ADD       #10,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_119
        CALL      ?CONST_PTR
        BRA       ??OSTmr_Task_120
??OSTmr_Task_119:
        MOV.D     [W0],W2
??OSTmr_Task_120:
        MOV       #OSTmrFreeList,W0
        MOV.D     W2,[W0]
        MOV.D     W4,W0
        ADD       #10,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_121
        CLR       [W0++]
        CLR       [W0]
??OSTmr_Task_121:
        MOV.D     W4,W0
        ADD       #14,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_122
        CLR       [W0++]
        CLR       [W0]
??OSTmr_Task_122:
        MOV       #OSTmrUsed,W0
        INC       [W0],[W0]
        MOV       #OSTmrFree,W0
        DEC       [W0],[W0]
        MOV.D     W4,W0
        RETURN    
        CFI EndBlock cfiBlock10
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmr_Free:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function OSTmr_Free
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV.D     W0,W2
        ADD       #47,W2
        ADDC.b    W1,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_123
        CLR.b     [W2]
??OSTmr_Task_123:
        MOV       W0,W2
        ADD       #46,W2
        ADDC.b    W1,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_124
        CLR.b     [W2]
??OSTmr_Task_124:
        MOV       W0,W2
        ADD       #26,W2
        ADDC.b    W1,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_125
        CLR       [W2++]
        CLR       [W2]
??OSTmr_Task_125:
        MOV       W0,W2
        ADD       #18,W2
        ADDC.b    W1,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_126
        CLR       [W2++]
        CLR       [W2]
??OSTmr_Task_126:
        MOV       W0,W2
        INC2      W2,W2
        ADDC.b    W1,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_127
        CLR       [W2++]
        CLR       [W2]
??OSTmr_Task_127:
        MOV       W0,W2
        ADD       #6,W2
        ADDC.b    W1,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_128
        CLR       [W2++]
        CLR       [W2]
??OSTmr_Task_128:
        MOV       W0,W2
        ADD       #30,W2
        ADDC.b    W1,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_129
        MOV.b     #63,W3
        MOV.b     W3,[W2]
??OSTmr_Task_129:
        MOV       W0,W2
        ADD       #31,W2
        ADDC.b    W1,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_130
        CLR.b     [W2]
??OSTmr_Task_130:
        MOV       W0,W2
        ADD       #14,W2
        ADDC.b    W1,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_131
        CLR       [W2++]
        CLR       [W2]
??OSTmr_Task_131:
        MOV       #OSTmrFreeList,W2
        MOV.D     [W2],W2
        MOV.D     W0,W4
        ADD       #10,W4
        ADDC.b    W1,#0,W5
        BTST.C    W5,#7
        BRA       NC, ??OSTmr_Task_132
        MOV.D     W2,[W4]
??OSTmr_Task_132:
        MOV       #OSTmrFreeList,W2
        MOV.D     W0,[W2]
        MOV       #OSTmrUsed,W0
        DEC       [W0],[W0]
        MOV       #OSTmrFree,W0
        INC       [W0],[W0]
        RETURN    
        CFI EndBlock cfiBlock11
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmr_Init:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function OSTmr_Init
        FUNCALL OSTmr_Init, OS_MemClr
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
        FUNCALL OSTmr_Init, OS_MemClr
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
        FUNCALL OSTmr_Init, OSSemCreate
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
        FUNCALL OSTmr_Init, OSSemCreate
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
        FUNCALL OSTmr_Init, OSEventNameSet
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
        FUNCALL OSTmr_Init, OSEventNameSet
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
        FUNCALL OSTmr_Init, OSTmr_InitTask
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV.D     W12,[W15++]
        CFI W13 Frame(CFA, 6)
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-12
        ; Saved register size: 8
        ; Auto size: 2
        INC2      W15,W15
        CFI CFA W15+-14
        ; Setup parameters for call to function OS_MemClr
        MOV       #768,W2
        MOV       #OSTmrTbl,W0
        MOV       #255,W1
        CALL      OS_MemClr
        ; Setup parameters for call to function OS_MemClr
        MOV       #48,W2
        MOV       #OSTmrWheelTbl,W0
        MOV       #255,W1
        CALL      OS_MemClr
        MOV       #OSTmrTbl,W12
        MOV       #255,W13
        MOV       #OSTmrTbl+48,W10
        MOV       #255,W11
        MOV       #15,W0
??OSTmr_Init_0:
        MOV.D     W12,W2
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_133
        MOV.b     #100,W3
        MOV.b     W3,[W2]
??OSTmr_Task_133:
        MOV       W13,W3
        ADD       #47,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_134
        CLR.b     [W2]
??OSTmr_Task_134:
        MOV.D     W12,W2
        ADD       #10,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_135
        MOV.D     W10,[W2]
??OSTmr_Task_135:
        MOV.D     W12,W2
        ADD       #30,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_136
        MOV.b     #63,W3
        MOV.b     W3,[W2]
??OSTmr_Task_136:
        MOV.D     W12,W2
        ADD       #31,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_137
        CLR.b     [W2]
??OSTmr_Task_137:
        ADD       #48,W12
        ADDC.b    #0,W13
        ADD       #48,W10
        ADDC.b    #0,W11
        DEC.b     W0,W0
        BRA       NZ, ??OSTmr_Init_0
        MOV.D     W12,W0
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_138
        MOV.b     #100,W1
        MOV.b     W1,[W0]
??OSTmr_Task_138:
        MOV       W13,W1
        ADD       #47,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_139
        CLR.b     [W0]
??OSTmr_Task_139:
        MOV.D     W12,W0
        ADD       #10,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_140
        CLR       [W0++]
        CLR       [W0]
??OSTmr_Task_140:
        MOV.D     W12,W0
        ADD       #30,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_141
        MOV.b     #63,W1
        MOV.b     W1,[W0]
??OSTmr_Task_141:
        MOV.D     W12,W0
        ADD       #31,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_142
        CLR.b     [W0]
??OSTmr_Task_142:
        MOV       #OSTmrTime,W0
        MOV       #0,W1
        CLR       [W0]
        MOV       W1,[W0+2]
        MOV       #0,W0
        MOV       W0,OSTmrUsed
        MOV       #16,W0
        MOV       W0,OSTmrFree
        MOV       #OSTmrTbl,W0
        MOV       #255,W1
        MOV       #OSTmrFreeList,W2
        MOV.D     W0,[W2]
        ; Setup parameters for call to function OSSemCreate
        MOV       #1,W0
        CALL      OSSemCreate
        ; DSP MODE; unknown 
        MOV       #OSTmrSem,W2
        MOV.D     W0,[W2]
        ; Setup parameters for call to function OSSemCreate
        MOV       #0,W0
        CALL      OSSemCreate
        ; DSP MODE; unknown 
        MOV       #OSTmrSemSignal,W2
        MOV.D     W0,[W2]
        ; Setup parameters for call to function OSEventNameSet
        SUB       W15,#2,W4
        MOV       #255,W5
        MOV       #LWRD((`?<Constant "OS-TmrLock">`)/2),W2
        MOV       #HWRD((`?<Constant "OS-TmrLock">`)/2),W3
        MOV       #OSTmrSem,W0
        MOV.D     [W0],W0
        CALL      OSEventNameSet
        ; Setup parameters for call to function OSEventNameSet
        SUB       W15,#2,W4
        MOV       #255,W5
        MOV       #LWRD((`?<Constant "OS-TmrSig">`)/2),W2
        MOV       #HWRD((`?<Constant "OS-TmrSig">`)/2),W3
        MOV       #OSTmrSemSignal,W0
        MOV.D     [W0],W0
        CALL      OSEventNameSet
        ; Setup parameters for call to function OSTmr_InitTask
        CALL      OSTmr_InitTask
        ; DSP MODE; unknown 
        SUB       #2,W15
        CFI CFA W15+-12
        MOV.D     [--W15],W12
        CFI W12 SameValue
        CFI W13 SameValue
        CFI CFA W15+-8
        MOV.D     [--W15],W10
        CFI W10 SameValue
        CFI W11 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock12
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmr_InitTask:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function OSTmr_InitTask
        FUNCALL OSTmr_InitTask, OSTaskCreateExt
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
        FUNCALL OSTmr_InitTask, OSTaskNameSet
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 2
        INC2      W15,W15
        CFI CFA W15+-6
        ; Setup parameters for call to function OSTaskCreateExt
        CLR       [W15++]
        CFI CFA W15+-8
        CLR       [W15++]
        CFI CFA W15+-10
        MOV       #160,W0
        MOV       W0,[W15++]
        CFI CFA W15+-12
        CLR       [W15++]
        CFI CFA W15+-14
        MOV       #3,W14
        MOV       #OSTmrTaskStk+318,W8
        MOV       #255,W9
        MOV       #-3,W7
        MOV       #10,W6
        MOV       #OSTmrTaskStk,W4
        MOV       #255,W5
        MOV       #0,W2
        MOV       #0,W3
        MOV       #LWRD((OSTmr_Task)/2),W0
        MOV       #HWRD((OSTmr_Task)/2),W1
        CALL      OSTaskCreateExt
        ; Setup parameters for call to function OSTaskNameSet
        SUB       W15,#10,W4
        MOV       #255,W5
        MOV       #LWRD((`?<Constant "uC/OS-II Tmr">`)/2),W2
        MOV       #HWRD((`?<Constant "uC/OS-II Tmr">`)/2),W3
        MOV       #10,W0
        CALL      OSTaskNameSet
        ; DSP MODE; unknown 
        SUB       #10,W15
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock13
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmr_Link:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function OSTmr_Link
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        MOV.D     W0,W6
        ADD       #47,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_143
        MOV.b     #3,W1
        MOV.b     W1,[W0]
??OSTmr_Task_143:
        CP.b      W2,#1
        MOV.D     W6,W0
        BRA       NZ, ??OSTmr_Task_144
        ADD       #26,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_145
        CALL      ?CONST_LONG
        BRA       ??OSTmr_Task_146
??OSTmr_Task_145:
        MOV.D     [W0],W2
??OSTmr_Task_146:
        MOV       OSTmrTime,W0
        MOV       OSTmrTime+2,W1
        ADD       W0,W2,W0
        ADDC      W1,W3,W1
        MOV.D     W6,W2
        ADD       #18,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_147
        MOV.D     W0,[W2]
        BRA       ??OSTmr_Task_147
??OSTmr_Task_144:
        ADD       #22,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_148
        CALL      ?CONST_LONG
        BRA       ??OSTmr_Task_149
??OSTmr_Task_148:
        MOV.D     [W0],W2
??OSTmr_Task_149:
        IOR       W2,W3,W0
        MOV.D     W6,W0
        BRA       NZ, ??OSTmr_Task_150
        ADD       #26,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_151
        CALL      ?CONST_LONG
        BRA       ??OSTmr_Task_152
??OSTmr_Task_151:
        MOV.D     [W0],W2
??OSTmr_Task_152:
        MOV       OSTmrTime,W0
        MOV       OSTmrTime+2,W1
        ADD       W0,W2,W0
        ADDC      W1,W3,W1
        MOV.D     W6,W2
        ADD       #18,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_147
        MOV.D     W0,[W2]
        BRA       ??OSTmr_Task_147
??OSTmr_Task_150:
        ADD       #22,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_153
        CALL      ?CONST_LONG
        BRA       ??OSTmr_Task_154
??OSTmr_Task_153:
        MOV.D     [W0],W2
??OSTmr_Task_154:
        MOV       OSTmrTime,W0
        MOV       OSTmrTime+2,W1
        ADD       W0,W2,W0
        ADDC      W1,W3,W1
        MOV.D     W6,W2
        ADD       #18,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_147
        MOV.D     W0,[W2]
??OSTmr_Task_147:
        MOV.D     W6,W0
        ADD       #18,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_155
        CALL      ?CONST_LONG
        BRA       ??OSTmr_Task_156
??OSTmr_Task_155:
        MOV.D     [W0],W2
??OSTmr_Task_156:
        AND       W2,#7,W0
        MUL.UU    W0,#6,W0
        MOV       #OSTmrWheelTbl,W4
        ADD       W4,W0,W4
        MOV       W4,W0
        MOV.D     [W0],W2
        CP0       W2
        CPB.b     W3,#0
        BRA       NZ, ??OSTmr_Task_157
        MOV.D     W6,[W4]
        MOV.D     W6,W0
        ADD       #10,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_158
        CLR       [W0++]
        MOV       #0,W1
        CLR       [W0]
??OSTmr_Task_158:
        MOV       #255,W5
        ADD       #4,W4
        ADDC.b    W5,#0,W5
        BTST.C    W5,#7
        BRA       NC, ??OSTmr_Task_159
        MOV       #1,W5
        MOV       W5,[W4]
        BRA       ??OSTmr_Task_159
??OSTmr_Task_157:
        MOV       W4,W0
        MOV.D     [W0],W2
        MOV.D     W6,[W4]
        MOV.D     W6,W0
        ADD       #10,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_160
        MOV.D     W2,[W0]
??OSTmr_Task_160:
        ADD       #14,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_161
        MOV.D     W6,[W2]
??OSTmr_Task_161:
        MOV       W4,W0
        MOV       #255,W1
        ADD       #4,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_162
        CALL      ?CONST_SHORT
        BRA       ??OSTmr_Task_163
??OSTmr_Task_162:
        MOV       [W0],W2
??OSTmr_Task_163:
        ADD       W2,#1,W0
        MOV       #255,W5
        ADD       #4,W4
        ADDC.b    W5,#0,W5
        BTST.C    W5,#7
        BRA       NC, ??OSTmr_Task_159
        MOV       W0,[W4]
??OSTmr_Task_159:
        ADD       #14,W6
        ADDC.b    W7,#0,W7
        BTST.C    W7,#7
        BRA       NC, ??OSTmr_Task_164
        CLR       [W6++]
        MOV       #0,W7
        CLR       [W6]
??OSTmr_Task_164:
        RETURN    
        CFI EndBlock cfiBlock14
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmr_Unlink:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function OSTmr_Unlink
        ; DSP MODE; unknown 
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV       W10,[W15++]
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-6
        ; Saved register size: 2
        ; Auto size: 0
        MOV.D     W0,W6
        ADD       #18,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_165
        CALL      ?CONST_LONG
        BRA       ??OSTmr_Task_166
??OSTmr_Task_165:
        MOV.D     [W0],W2
??OSTmr_Task_166:
        AND       W2,#7,W0
        MUL.UU    W0,#6,W0
        MOV       #OSTmrWheelTbl,W4
        ADD       W4,W0,W4
        MOV       W4,W0
        MOV.D     [W0],W2
        CP        W2,W6
        CPB.b     W3,W7
        MOV.D     W6,W0
        BRA       NZ, ??OSTmr_Task_167
        ADD       #10,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_168
        CALL      ?CONST_PTR
        BRA       ??OSTmr_Task_169
??OSTmr_Task_168:
        MOV.D     [W0],W2
??OSTmr_Task_169:
        MOV.D     W2,W8
        MOV.D     W8,[W4]
        CP0       W2
        CPB.b     W3,#0
        BRA       Z, ??OSTmr_Task_170
        ADD       #14,W8
        ADDC.b    W3,#0,W9
        BTST.C    W9,#7
        BRA       NC, ??OSTmr_Task_170
        CLR       [W8++]
        MOV       #0,W9
        CLR       [W8]
        BRA       ??OSTmr_Task_170
??OSTmr_Task_167:
        ADD       #14,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_171
        CALL      ?CONST_PTR
        BRA       ??OSTmr_Task_172
??OSTmr_Task_171:
        MOV.D     [W0],W2
??OSTmr_Task_172:
        MOV.D     W2,W8
        MOV.D     W6,W0
        ADD       #10,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_173
        CALL      ?CONST_PTR
        BRA       ??OSTmr_Task_174
??OSTmr_Task_173:
        MOV.D     [W0],W2
??OSTmr_Task_174:
        MOV.D     W8,W0
        ADD       #10,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_175
        MOV.D     W2,[W0]
??OSTmr_Task_175:
        CP0       W2
        CPB.b     W3,#0
        BRA       Z, ??OSTmr_Task_170
        ADD       #14,W2
        ADDC.b    W3,#0,W3
        BTST.C    W3,#7
        BRA       NC, ??OSTmr_Task_170
        MOV.D     W8,[W2]
??OSTmr_Task_170:
        MOV.D     W6,W0
        ADD       #47,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_176
        MOV.b     #1,W1
        MOV.b     W1,[W0]
??OSTmr_Task_176:
        MOV.D     W6,W0
        ADD       #10,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       NC, ??OSTmr_Task_177
        CLR       [W0++]
        CLR       [W0]
??OSTmr_Task_177:
        ADD       #14,W6
        ADDC.b    W7,#0,W7
        BTST.C    W7,#7
        BRA       NC, ??OSTmr_Task_178
        CLR       [W6++]
        MOV       #0,W7
        CLR       [W6]
??OSTmr_Task_178:
        MOV       W4,W0
        MOV       #255,W1
        ADD       #4,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_179
        CALL      ?CONST_SHORT
        BRA       ??OSTmr_Task_180
??OSTmr_Task_179:
        MOV       [W0],W2
??OSTmr_Task_180:
        DEC       W2,W0
        MOV       #255,W5
        ADD       #4,W4
        ADDC.b    W5,#0,W5
        BTST.C    W5,#7
        BRA       NC, ??OSTmr_Task_181
        MOV       W0,[W4]
??OSTmr_Task_181:
        MOV       [--W15],W10
        CFI W10 SameValue
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock15
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmr_Lock:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function OSTmr_Lock
        FUNCALL OSTmr_Lock, OSSemPend
        LOCFRAME CSTACK, 2, STACK
        ARGFRAME CSTACK, 2, STACK
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 2
        INC2      W15,W15
        CFI CFA W15+-6
        ; Setup parameters for call to function OSSemPend
        SUB       W15,#2,W4
        MOV       #255,W5
        MOV       #0,W2
        MOV       #OSTmrSem,W0
        MOV.D     [W0],W0
        CALL      OSSemPend
        ; DSP MODE; unknown 
        SUB       #2,W15
        CFI CFA W15+-4
        RETURN    
        CFI EndBlock cfiBlock16
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmr_Unlock:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function OSTmr_Unlock
        FUNCALL OSTmr_Unlock, OSSemPost
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function OSSemPost
        MOV       #OSTmrSem,W0
        BRA       ?Subroutine1
        CFI EndBlock cfiBlock17
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CODE:CODE:NOROOT(2)
OSTmr_Task:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function OSTmr_Task
        FUNCALL OSTmr_Task, OSTmr_Unlock
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
        FUNCALL OSTmr_Task, OSSemPend
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
        FUNCALL OSTmr_Task, OSTmr_Lock
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
        FUNCALL OSTmr_Task, OSTmr_Unlink
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
        FUNCALL OSTmr_Task, OSTmr_Link
        LOCFRAME CSTACK, 10, STACK
        ARGFRAME CSTACK, 10, STACK
	REQUIRE __SETUP_SAT
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Return address size: 4
        MOV.D     W10,[W15++]
        CFI W11 Frame(CFA, 2)
        CFI W10 Frame(CFA, 0)
        CFI CFA W15+-8
        MOV.D     W12,[W15++]
        CFI W13 Frame(CFA, 6)
        CFI W12 Frame(CFA, 4)
        CFI CFA W15+-12
        ; Saved register size: 8
        ; Auto size: 2
        INC2      W15,W15
        CFI CFA W15+-14
        BRA       ??OSTmr_Task_182
??OSTmr_Task_183:
        ; Setup parameters for call to function OSTmr_Unlock
        CALL      OSTmr_Unlock
??OSTmr_Task_182:
        ; Setup parameters for call to function OSSemPend
        SUB       W15,#2,W4
        MOV       #255,W5
        MOV       #0,W2
        MOV       #OSTmrSemSignal,W0
        MOV.D     [W0],W0
        CALL      OSSemPend
        ; Setup parameters for call to function OSTmr_Lock
        CALL      OSTmr_Lock
        MOV       #OSTmrTime,W0
        MOV       #0,W3
        INC       [W0],[W0++]
        ADDC      W3,[W0],[W0--]
        MOV       OSTmrTime,W0
        MOV       OSTmrTime+2,W1
        AND       #7,W0
        MUL.UU    W0,#6,W0
        MOV       #OSTmrWheelTbl,W1
        ADD       W1,W0,W1
        MOV.D     [W1],W10
        BRA       ??OSTmr_Task_184
??OSTmr_Task_185:
        ADD       #47,W10
        ADDC.b    W11,#0,W11
        BTST.C    W11,#7
        BRA       NC, ??OSTmr_Task_186
        MOV.b     #2,W11
        MOV.b     W11,[W10]
??OSTmr_Task_186:
        MOV.D     W12,W10
??OSTmr_Task_184:
        CP0       W10
        CPB.b     W11,#0
        BRA       Z, ??OSTmr_Task_183
        MOV.D     W10,W0
        ADD       #10,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_187
        CALL      ?CONST_PTR
        BRA       ??OSTmr_Task_188
??OSTmr_Task_187:
        MOV.D     [W0],W2
??OSTmr_Task_188:
        MOV.D     W2,W12
        MOV       OSTmrTime,W4
        MOV       OSTmrTime+2,W5
        MOV.D     W10,W0
        ADD       #18,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_189
        CALL      ?CONST_LONG
        BRA       ??OSTmr_Task_190
??OSTmr_Task_189:
        MOV.D     [W0],W2
??OSTmr_Task_190:
        CP        W4,W2
        CPB       W5,W3
        BRA       NZ, ??OSTmr_Task_186
        MOV.D     W10,W0
        INC2      W0,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_191
        CALL      ?CONST_PTR
        BRA       ??OSTmr_Task_192
??OSTmr_Task_191:
        MOV.D     [W0],W2
??OSTmr_Task_192:
        MOV.D     W2,W4
        CP0       W2
        CPB.b     W3,#0
        BRA       Z, ??OSTmr_Task_193
        ; Setup parameters for indirect call
        MOV.D     W10,W0
        ADD       #6,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_194
        CALL      ?CONST_PTR
        BRA       ??OSTmr_Task_195
??OSTmr_Task_194:
        MOV.D     [W0],W2
??OSTmr_Task_195:
        MOV.D     W10,W0
        CALL      ?CALL_WP2
??OSTmr_Task_193:
        ; Setup parameters for call to function OSTmr_Unlink
        MOV.D     W10,W0
        CALL      OSTmr_Unlink
        MOV.D     W10,W0
        ADD       #46,W0
        ADDC.b    W1,#0,W1
        BTST.C    W1,#7
        BRA       C, ??OSTmr_Task_196
        CALL      ?CONST_CHAR
        BRA       ??OSTmr_Task_197
??OSTmr_Task_196:
        MOV.b     [W0],W2
??OSTmr_Task_197:
        CP.b      W2,#2
        BRA       NZ, ??OSTmr_Task_185
        ; Setup parameters for call to function OSTmr_Link
        MOV       #1,W2
        MOV.D     W10,W0
        CALL      OSTmr_Link
        BRA       ??OSTmr_Task_186
        CFI EndBlock cfiBlock18
	REQUIRE ?CLDSPIC_1_21_L00

        RSEG CONST:CODE:REORDER:NOROOT(1)
`?<Constant "uC/OS-II Tmr">`:
        DB 'u'
        DB 0
        DB 'C'
        DB 0
        DB 2FH
        DB 0
        DB 'O'
        DB 0
        DB 'S'
        DB 0
        DB 2DH
        DB 0
        DB 'I'
        DB 0
        DB 'I'
        DB 0
        DB ' '
        DB 0
        DB 'T'
        DB 0
        DB 'm'
        DB 0
        DB 'r'
        DB 0
        DB 0H
        DB 0

        RSEG CONST:CODE:REORDER:NOROOT(1)
`?<Constant "OS-TmrSig">`:
        DB 'O'
        DB 0
        DB 'S'
        DB 0
        DB 2DH
        DB 0
        DB 'T'
        DB 0
        DB 'm'
        DB 0
        DB 'r'
        DB 0
        DB 'S'
        DB 0
        DB 'i'
        DB 0
        DB 'g'
        DB 0
        DB 0H
        DB 0

        RSEG CONST:CODE:REORDER:NOROOT(1)
`?<Constant "OS-TmrLock">`:
        DB 'O'
        DB 0
        DB 'S'
        DB 0
        DB 2DH
        DB 0
        DB 'T'
        DB 0
        DB 'm'
        DB 0
        DB 'r'
        DB 0
        DB 'L'
        DB 0
        DB 'o'
        DB 0
        DB 'c'
        DB 0
        DB 'k'
        DB 0
        DB 0H
        DB 0

        ASEGN SFR_A:DATA:ROOT,0412H
// union <unnamed> volatile __sfr _A_C1CFG2
_A_C1CFG2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0410H
// union <unnamed> volatile __sfr _A_C1CFG1
_A_C1CFG1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,040cH
// union <unnamed> volatile __sfr _A_C1INTE
_A_C1INTE:
        DS 2

        ASEGN SFR_A:DATA:ROOT,040aH
// union <unnamed> volatile __sfr _A_C1INTF
_A_C1INTF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0408H
// union <unnamed> volatile __sfr _A_C1FIFO
_A_C1FIFO:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0406H
// union <unnamed> volatile __sfr _A_C1FCTRL
_A_C1FCTRL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0404H
// union <unnamed> volatile __sfr _A_C1VEC
_A_C1VEC:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0402H
// union <unnamed> volatile __sfr _A_C1CTRL2
_A_C1CTRL2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0400H
// union <unnamed> volatile __sfr _A_C1CTRL1
_A_C1CTRL1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03e2H
// union <unnamed> volatile __sfr _A_DMACS1
_A_DMACS1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03e0H
// union <unnamed> volatile __sfr _A_DMACS0
_A_DMACS0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03d6H
// union <unnamed> volatile __sfr _A_DMA7REQ
_A_DMA7REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03d4H
// union <unnamed> volatile __sfr _A_DMA7CON
_A_DMA7CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03caH
// union <unnamed> volatile __sfr _A_DMA6REQ
_A_DMA6REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03c8H
// union <unnamed> volatile __sfr _A_DMA6CON
_A_DMA6CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03beH
// union <unnamed> volatile __sfr _A_DMA5REQ
_A_DMA5REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03bcH
// union <unnamed> volatile __sfr _A_DMA5CON
_A_DMA5CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03b2H
// union <unnamed> volatile __sfr _A_DMA4REQ
_A_DMA4REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03b0H
// union <unnamed> volatile __sfr _A_DMA4CON
_A_DMA4CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03a6H
// union <unnamed> volatile __sfr _A_DMA3REQ
_A_DMA3REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03a4H
// union <unnamed> volatile __sfr _A_DMA3CON
_A_DMA3CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,039aH
// union <unnamed> volatile __sfr _A_DMA2REQ
_A_DMA2REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0398H
// union <unnamed> volatile __sfr _A_DMA2CON
_A_DMA2CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,044eH
// union <unnamed> volatile __sfr _A_C1RXF3EID
_A_C1RXF3EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,044cH
// union <unnamed> volatile __sfr _A_C1RXF3SID
_A_C1RXF3SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,044aH
// union <unnamed> volatile __sfr _A_C1RXF2EID
_A_C1RXF2EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0448H
// union <unnamed> volatile __sfr _A_C1RXF2SID
_A_C1RXF2SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0446H
// union <unnamed> volatile __sfr _A_C1RXF1EID
_A_C1RXF1EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0444H
// union <unnamed> volatile __sfr _A_C1RXF1SID
_A_C1RXF1SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0442H
// union <unnamed> volatile __sfr _A_C1RXF0EID
_A_C1RXF0EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0440H
// union <unnamed> volatile __sfr _A_C1RXF0SID
_A_C1RXF0SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,043aH
// union <unnamed> volatile __sfr _A_C1RXM2EID
_A_C1RXM2EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0438H
// union <unnamed> volatile __sfr _A_C1RXM2SID
_A_C1RXM2SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0436H
// union <unnamed> volatile __sfr _A_C1TR67CON
_A_C1TR67CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0434H
// union <unnamed> volatile __sfr _A_C1TR45CON
_A_C1TR45CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0432H
// union <unnamed> volatile __sfr _A_C1TR23CON
_A_C1TR23CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0430H
// union <unnamed> volatile __sfr _A_C1TR01CON
_A_C1TR01CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,042aH
// union <unnamed> volatile __sfr _A_C1RXOVF2
_A_C1RXOVF2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0428H
// union <unnamed> volatile __sfr _A_C1RXOVF1
_A_C1RXOVF1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0426H
// union <unnamed> volatile __sfr _A_C1BUFPNT4
_A_C1BUFPNT4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0424H
// union <unnamed> volatile __sfr _A_C1BUFPNT3
_A_C1BUFPNT3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0422H
// union <unnamed> volatile __sfr _A_C1RXFUL2
_A_C1RXFUL2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0420H
// union <unnamed> volatile __sfr _A_C1RXFUL1
_A_C1RXFUL1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,041aH
// union <unnamed> volatile __sfr _A_C1FMSKSEL2
_A_C1FMSKSEL2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0418H
// union <unnamed> volatile __sfr _A_C1FMSKSEL1
_A_C1FMSKSEL1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0414H
// union <unnamed> volatile __sfr _A_C1FEN1
_A_C1FEN1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,06deH
// union <unnamed> volatile __sfr _A_ODCF
_A_ODCF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,06c0H
// union <unnamed> volatile __sfr _A_ODCA
_A_ODCA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02e8H
// union <unnamed> volatile __sfr _A_LATG
_A_LATG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02e6H
// union <unnamed> volatile __sfr _A_PORTG
_A_PORTG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02e4H
// union <unnamed> volatile __sfr _A_TRISG
_A_TRISG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02e2H
// union <unnamed> volatile __sfr _A_LATF
_A_LATF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02e0H
// union <unnamed> volatile __sfr _A_PORTF
_A_PORTF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02deH
// union <unnamed> volatile __sfr _A_TRISF
_A_TRISF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02dcH
// union <unnamed> volatile __sfr _A_LATE
_A_LATE:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02daH
// union <unnamed> volatile __sfr _A_PORTE
_A_PORTE:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02d8H
// union <unnamed> volatile __sfr _A_TRISE
_A_TRISE:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02d6H
// union <unnamed> volatile __sfr _A_LATD
_A_LATD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02d4H
// union <unnamed> volatile __sfr _A_PORTD
_A_PORTD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02d2H
// union <unnamed> volatile __sfr _A_TRISD
_A_TRISD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02d0H
// union <unnamed> volatile __sfr _A_LATC
_A_LATC:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02ceH
// union <unnamed> volatile __sfr _A_PORTC
_A_PORTC:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02ccH
// union <unnamed> volatile __sfr _A_TRISC
_A_TRISC:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02caH
// union <unnamed> volatile __sfr _A_LATB
_A_LATB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02c8H
// union <unnamed> volatile __sfr _A_PORTB
_A_PORTB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02c6H
// union <unnamed> volatile __sfr _A_TRISB
_A_TRISB:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02c4H
// union <unnamed> volatile __sfr _A_LATA
_A_LATA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02c2H
// union <unnamed> volatile __sfr _A_PORTA
_A_PORTA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,02c0H
// union <unnamed> volatile __sfr _A_TRISA
_A_TRISA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,038eH
// union <unnamed> volatile __sfr _A_DMA1REQ
_A_DMA1REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,038cH
// union <unnamed> volatile __sfr _A_DMA1CON
_A_DMA1CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0382H
// union <unnamed> volatile __sfr _A_DMA0REQ
_A_DMA0REQ:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0380H
// union <unnamed> volatile __sfr _A_DMA0CON
_A_DMA0CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0372H
// union <unnamed> volatile __sfr _A_AD2CON4
_A_AD2CON4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0370H
// union <unnamed> volatile __sfr _A_AD2CSSL
_A_AD2CSSL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,036cH
// union <unnamed> volatile __sfr _A_AD2PCFG
_A_AD2PCFG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0368H
// union <unnamed> volatile __sfr _A_AD2CHS0
_A_AD2CHS0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0366H
// union <unnamed> volatile __sfr _A_AD2CHS123
_A_AD2CHS123:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0364H
// union <unnamed> volatile __sfr _A_AD2CON3
_A_AD2CON3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0362H
// union <unnamed> volatile __sfr _A_AD2CON2
_A_AD2CON2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0360H
// union <unnamed> volatile __sfr _A_AD2CON1
_A_AD2CON1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0340H
// union <unnamed> volatile __sfr _A_AD2BUF0
_A_AD2BUF0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0332H
// union <unnamed> volatile __sfr _A_AD1CON4
_A_AD1CON4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0330H
// union <unnamed> volatile __sfr _A_AD1CSSL
_A_AD1CSSL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,032cH
// union <unnamed> volatile __sfr _A_AD1PCFGL
_A_AD1PCFGL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,032aH
// union <unnamed> volatile __sfr _A_AD1PCFGH
_A_AD1PCFGH:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0328H
// union <unnamed> volatile __sfr _A_AD1CHS0
_A_AD1CHS0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0326H
// union <unnamed> volatile __sfr _A_AD1CHS123
_A_AD1CHS123:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0324H
// union <unnamed> volatile __sfr _A_AD1CON3
_A_AD1CON3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0322H
// union <unnamed> volatile __sfr _A_AD1CON2
_A_AD1CON2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0320H
// union <unnamed> volatile __sfr _A_AD1CON1
_A_AD1CON1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0300H
// union <unnamed> volatile __sfr _A_AD1BUF0
_A_AD1BUF0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,056aH
// union <unnamed> volatile __sfr _A_C2RXF10EID
_A_C2RXF10EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0568H
// union <unnamed> volatile __sfr _A_C2RXF10SID
_A_C2RXF10SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0566H
// union <unnamed> volatile __sfr _A_C2RXF9EID
_A_C2RXF9EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0564H
// union <unnamed> volatile __sfr _A_C2RXF9SID
_A_C2RXF9SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0562H
// union <unnamed> volatile __sfr _A_C2RXF8EID
_A_C2RXF8EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0560H
// union <unnamed> volatile __sfr _A_C2RXF8SID
_A_C2RXF8SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,055eH
// union <unnamed> volatile __sfr _A_C2RXF7EID
_A_C2RXF7EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,055cH
// union <unnamed> volatile __sfr _A_C2RXF7SID
_A_C2RXF7SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,055aH
// union <unnamed> volatile __sfr _A_C2RXF6EID
_A_C2RXF6EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0558H
// union <unnamed> volatile __sfr _A_C2RXF6SID
_A_C2RXF6SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0556H
// union <unnamed> volatile __sfr _A_C2RXF5EID
_A_C2RXF5EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0554H
// union <unnamed> volatile __sfr _A_C2RXF5SID
_A_C2RXF5SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0552H
// union <unnamed> volatile __sfr _A_C2RXF4EID
_A_C2RXF4EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0550H
// union <unnamed> volatile __sfr _A_C2RXF4SID
_A_C2RXF4SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,054eH
// union <unnamed> volatile __sfr _A_C2RXF3EID
_A_C2RXF3EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,054cH
// union <unnamed> volatile __sfr _A_C2RXF3SID
_A_C2RXF3SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,054aH
// union <unnamed> volatile __sfr _A_C2RXF2EID
_A_C2RXF2EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0548H
// union <unnamed> volatile __sfr _A_C2RXF2SID
_A_C2RXF2SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0546H
// union <unnamed> volatile __sfr _A_C2RXF1EID
_A_C2RXF1EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0544H
// union <unnamed> volatile __sfr _A_C2RXF1SID
_A_C2RXF1SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0542H
// union <unnamed> volatile __sfr _A_C2RXF0EID
_A_C2RXF0EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0540H
// union <unnamed> volatile __sfr _A_C2RXF0SID
_A_C2RXF0SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,053aH
// union <unnamed> volatile __sfr _A_C2RXM2EID
_A_C2RXM2EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0774H
// union <unnamed> volatile __sfr _A_PMD3
_A_PMD3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0772H
// union <unnamed> volatile __sfr _A_PMD2
_A_PMD2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0770H
// union <unnamed> volatile __sfr _A_PMD1
_A_PMD1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0766H
// union <unnamed> volatile __sfr _A_NVMKEY
_A_NVMKEY:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0760H
// union <unnamed> volatile __sfr _A_NVMCON
_A_NVMCON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0748H
// union <unnamed> volatile __sfr _A_OSCTUN
_A_OSCTUN:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0746H
// union <unnamed> volatile __sfr _A_PLLFBD
_A_PLLFBD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0744H
// union <unnamed> volatile __sfr _A_CLKDIV
_A_CLKDIV:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0742H
// union <unnamed> volatile __sfr _A_OSCCON
_A_OSCCON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0740H
// union <unnamed> volatile __sfr _A_RCON
_A_RCON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,057eH
// union <unnamed> volatile __sfr _A_C2RXF15EID
_A_C2RXF15EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,057cH
// union <unnamed> volatile __sfr _A_C2RXF15SID
_A_C2RXF15SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,057aH
// union <unnamed> volatile __sfr _A_C2RXF14EID
_A_C2RXF14EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0578H
// union <unnamed> volatile __sfr _A_C2RXF14SID
_A_C2RXF14SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0576H
// union <unnamed> volatile __sfr _A_C2RXF13EID
_A_C2RXF13EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0574H
// union <unnamed> volatile __sfr _A_C2RXF13SID
_A_C2RXF13SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0572H
// union <unnamed> volatile __sfr _A_C2RXF12EID
_A_C2RXF12EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0570H
// union <unnamed> volatile __sfr _A_C2RXF12SID
_A_C2RXF12SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,056eH
// union <unnamed> volatile __sfr _A_C2RXF11EID
_A_C2RXF11EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,056cH
// union <unnamed> volatile __sfr _A_C2RXF11SID
_A_C2RXF11SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,047cH
// union <unnamed> volatile __sfr _A_C1RXF15SID
_A_C1RXF15SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,047aH
// union <unnamed> volatile __sfr _A_C1RXF14EID
_A_C1RXF14EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0478H
// union <unnamed> volatile __sfr _A_C1RXF14SID
_A_C1RXF14SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0476H
// union <unnamed> volatile __sfr _A_C1RXF13EID
_A_C1RXF13EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0474H
// union <unnamed> volatile __sfr _A_C1RXF13SID
_A_C1RXF13SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0472H
// union <unnamed> volatile __sfr _A_C1RXF12EID
_A_C1RXF12EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0470H
// union <unnamed> volatile __sfr _A_C1RXF12SID
_A_C1RXF12SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,046eH
// union <unnamed> volatile __sfr _A_C1RXF11EID
_A_C1RXF11EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,046cH
// union <unnamed> volatile __sfr _A_C1RXF11SID
_A_C1RXF11SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,046aH
// union <unnamed> volatile __sfr _A_C1RXF10EID
_A_C1RXF10EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0468H
// union <unnamed> volatile __sfr _A_C1RXF10SID
_A_C1RXF10SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0466H
// union <unnamed> volatile __sfr _A_C1RXF9EID
_A_C1RXF9EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0464H
// union <unnamed> volatile __sfr _A_C1RXF9SID
_A_C1RXF9SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0462H
// union <unnamed> volatile __sfr _A_C1RXF8EID
_A_C1RXF8EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0460H
// union <unnamed> volatile __sfr _A_C1RXF8SID
_A_C1RXF8SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,045eH
// union <unnamed> volatile __sfr _A_C1RXF7EID
_A_C1RXF7EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,045cH
// union <unnamed> volatile __sfr _A_C1RXF7SID
_A_C1RXF7SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,045aH
// union <unnamed> volatile __sfr _A_C1RXF6EID
_A_C1RXF6EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0458H
// union <unnamed> volatile __sfr _A_C1RXF6SID
_A_C1RXF6SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0456H
// union <unnamed> volatile __sfr _A_C1RXF5EID
_A_C1RXF5EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0454H
// union <unnamed> volatile __sfr _A_C1RXF5SID
_A_C1RXF5SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0452H
// union <unnamed> volatile __sfr _A_C1RXF4EID
_A_C1RXF4EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0450H
// union <unnamed> volatile __sfr _A_C1RXF4SID
_A_C1RXF4SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0538H
// union <unnamed> volatile __sfr _A_C2RXM2SID
_A_C2RXM2SID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0536H
// union <unnamed> volatile __sfr _A_C2TR67CON
_A_C2TR67CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0534H
// union <unnamed> volatile __sfr _A_C2TR45CON
_A_C2TR45CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0532H
// union <unnamed> volatile __sfr _A_C2TR23CON
_A_C2TR23CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0530H
// union <unnamed> volatile __sfr _A_C2TR01CON
_A_C2TR01CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,052aH
// union <unnamed> volatile __sfr _A_C2RXOVF2
_A_C2RXOVF2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0528H
// union <unnamed> volatile __sfr _A_C2RXOVF1
_A_C2RXOVF1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0526H
// union <unnamed> volatile __sfr _A_C2BUFPNT4
_A_C2BUFPNT4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0524H
// union <unnamed> volatile __sfr _A_C2BUFPNT3
_A_C2BUFPNT3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0522H
// union <unnamed> volatile __sfr _A_C2RXFUL2
_A_C2RXFUL2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0520H
// union <unnamed> volatile __sfr _A_C2RXFUL1
_A_C2RXFUL1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,051aH
// union <unnamed> volatile __sfr _A_C2FMSKSEL2
_A_C2FMSKSEL2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0518H
// union <unnamed> volatile __sfr _A_C2FMSKSEL1
_A_C2FMSKSEL1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0514H
// union <unnamed> volatile __sfr _A_C2FEN1
_A_C2FEN1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0512H
// union <unnamed> volatile __sfr _A_C2CFG2
_A_C2CFG2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0510H
// union <unnamed> volatile __sfr _A_C2CFG1
_A_C2CFG1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,050cH
// union <unnamed> volatile __sfr _A_C2INTE
_A_C2INTE:
        DS 2

        ASEGN SFR_A:DATA:ROOT,050aH
// union <unnamed> volatile __sfr _A_C2INTF
_A_C2INTF:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0508H
// union <unnamed> volatile __sfr _A_C2FIFO
_A_C2FIFO:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0506H
// union <unnamed> volatile __sfr _A_C2FCTRL
_A_C2FCTRL:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0504H
// union <unnamed> volatile __sfr _A_C2VEC
_A_C2VEC:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0502H
// union <unnamed> volatile __sfr _A_C2CTRL2
_A_C2CTRL2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0500H
// union <unnamed> volatile __sfr _A_C2CTRL1
_A_C2CTRL1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,047eH
// union <unnamed> volatile __sfr _A_C1RXF15EID
_A_C1RXF15EID:
        DS 2

        ASEGN SFR_A:DATA:ROOT,011eH
// union <unnamed> volatile __sfr _A_T4CON
_A_T4CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0112H
// union <unnamed> volatile __sfr _A_T3CON
_A_T3CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0110H
// union <unnamed> volatile __sfr _A_T2CON
_A_T2CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0104H
// union <unnamed> volatile __sfr _A_T1CON
_A_T1CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0e0H
// union <unnamed> volatile __sfr _A_INTREG
_A_INTREG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0c6H
// union <unnamed> volatile __sfr _A_IPC17
_A_IPC17:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0c4H
// union <unnamed> volatile __sfr _A_IPC16
_A_IPC16:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0c2H
// union <unnamed> volatile __sfr _A_IPC15
_A_IPC15:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0c0H
// union <unnamed> volatile __sfr _A_IPC14
_A_IPC14:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0beH
// union <unnamed> volatile __sfr _A_IPC13
_A_IPC13:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0bcH
// union <unnamed> volatile __sfr _A_IPC12
_A_IPC12:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0baH
// union <unnamed> volatile __sfr _A_IPC11
_A_IPC11:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0b8H
// union <unnamed> volatile __sfr _A_IPC10
_A_IPC10:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0b6H
// union <unnamed> volatile __sfr _A_IPC9
_A_IPC9:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0b4H
// union <unnamed> volatile __sfr _A_IPC8
_A_IPC8:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0b2H
// union <unnamed> volatile __sfr _A_IPC7
_A_IPC7:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0b0H
// union <unnamed> volatile __sfr _A_IPC6
_A_IPC6:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0196H
// union <unnamed> volatile __sfr _A_OC4CON
_A_OC4CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0190H
// union <unnamed> volatile __sfr _A_OC3CON
_A_OC3CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,018aH
// union <unnamed> volatile __sfr _A_OC2CON
_A_OC2CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0184H
// union <unnamed> volatile __sfr _A_OC1CON
_A_OC1CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,015eH
// union <unnamed> volatile __sfr _A_IC8CON
_A_IC8CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,015aH
// union <unnamed> volatile __sfr _A_IC7CON
_A_IC7CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0156H
// union <unnamed> volatile __sfr _A_IC6CON
_A_IC6CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0152H
// union <unnamed> volatile __sfr _A_IC5CON
_A_IC5CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,014eH
// union <unnamed> volatile __sfr _A_IC4CON
_A_IC4CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,014aH
// union <unnamed> volatile __sfr _A_IC3CON
_A_IC3CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0146H
// union <unnamed> volatile __sfr _A_IC2CON
_A_IC2CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0142H
// union <unnamed> volatile __sfr _A_IC1CON
_A_IC1CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,013cH
// union <unnamed> volatile __sfr _A_T9CON
_A_T9CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,013aH
// union <unnamed> volatile __sfr _A_T8CON
_A_T8CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,012eH
// union <unnamed> volatile __sfr _A_T7CON
_A_T7CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,012cH
// union <unnamed> volatile __sfr _A_T6CON
_A_T6CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0120H
// union <unnamed> volatile __sfr _A_T5CON
_A_T5CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,080H
// union <unnamed> volatile __sfr _A_INTCON1
_A_INTCON1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,06aH
// union <unnamed> volatile __sfr _A_CNPU2
_A_CNPU2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,068H
// union <unnamed> volatile __sfr _A_CNPU1
_A_CNPU1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,062H
// union <unnamed> volatile __sfr _A_CNEN2
_A_CNEN2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,060H
// union <unnamed> volatile __sfr _A_CNEN1
_A_CNEN1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,052H
// union <unnamed> volatile __sfr _A_DISICNT
_A_DISICNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,050H
// union <unnamed> volatile __sfr _A_XBREV
_A_XBREV:
        DS 2

        ASEGN SFR_A:DATA:ROOT,046H
// union <unnamed> volatile __sfr _A_MODCON
_A_MODCON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,044H
// union <unnamed> volatile __sfr _A_CORCON
_A_CORCON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,042H
// union <unnamed> volatile __sfr _A_SR
_A_SR:
        DS 2

        ASEGN SFR_A:DATA:ROOT,040H
// union <unnamed> volatile __sfr _A_DOENDH
_A_DOENDH:
        DS 2

        ASEGN SFR_A:DATA:ROOT,03cH
// union <unnamed> volatile __sfr _A_DOSTARTH
_A_DOSTARTH:
        DS 2

        ASEGN SFR_A:DATA:ROOT,038H
// union <unnamed> volatile __sfr _A_DCOUNT
_A_DCOUNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,036H
// union <unnamed> volatile __sfr _A_RCOUNT
_A_RCOUNT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,034H
// union <unnamed> volatile __sfr _A_PSVPAG
_A_PSVPAG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,032H
// union <unnamed> volatile __sfr _A_TBLPAG
_A_TBLPAG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,030H
// union <unnamed> volatile __sfr _A_PCH
_A_PCH:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0aeH
// union <unnamed> volatile __sfr _A_IPC5
_A_IPC5:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0acH
// union <unnamed> volatile __sfr _A_IPC4
_A_IPC4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0aaH
// union <unnamed> volatile __sfr _A_IPC3
_A_IPC3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0a8H
// union <unnamed> volatile __sfr _A_IPC2
_A_IPC2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0a6H
// union <unnamed> volatile __sfr _A_IPC1
_A_IPC1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0a4H
// union <unnamed> volatile __sfr _A_IPC0
_A_IPC0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,09cH
// union <unnamed> volatile __sfr _A_IEC4
_A_IEC4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,09aH
// union <unnamed> volatile __sfr _A_IEC3
_A_IEC3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,098H
// union <unnamed> volatile __sfr _A_IEC2
_A_IEC2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,096H
// union <unnamed> volatile __sfr _A_IEC1
_A_IEC1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,094H
// union <unnamed> volatile __sfr _A_IEC0
_A_IEC0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,08cH
// union <unnamed> volatile __sfr _A_IFS4
_A_IFS4:
        DS 2

        ASEGN SFR_A:DATA:ROOT,08aH
// union <unnamed> volatile __sfr _A_IFS3
_A_IFS3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,088H
// union <unnamed> volatile __sfr _A_IFS2
_A_IFS2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,086H
// union <unnamed> volatile __sfr _A_IFS1
_A_IFS1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,084H
// union <unnamed> volatile __sfr _A_IFS0
_A_IFS0:
        DS 2

        ASEGN SFR_A:DATA:ROOT,082H
// union <unnamed> volatile __sfr _A_INTCON2
_A_INTCON2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0220H
// union <unnamed> volatile __sfr _A_U1MODE
_A_U1MODE:
        DS 2

        ASEGN SFR_A:DATA:ROOT,021cH
// union <unnamed> volatile __sfr _A_I2C2MSK
_A_I2C2MSK:
        DS 2

        ASEGN SFR_A:DATA:ROOT,021aH
// union <unnamed> volatile __sfr _A_I2C2ADD
_A_I2C2ADD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0218H
// union <unnamed> volatile __sfr _A_I2C2STAT
_A_I2C2STAT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0216H
// union <unnamed> volatile __sfr _A_I2C2CON
_A_I2C2CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0214H
// union <unnamed> volatile __sfr _A_I2C2BRG
_A_I2C2BRG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0212H
// union <unnamed> volatile __sfr _A_I2C2TRN
_A_I2C2TRN:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0210H
// union <unnamed> volatile __sfr _A_I2C2RCV
_A_I2C2RCV:
        DS 2

        ASEGN SFR_A:DATA:ROOT,020cH
// union <unnamed> volatile __sfr _A_I2C1MSK
_A_I2C1MSK:
        DS 2

        ASEGN SFR_A:DATA:ROOT,020aH
// union <unnamed> volatile __sfr _A_I2C1ADD
_A_I2C1ADD:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0208H
// union <unnamed> volatile __sfr _A_I2C1STAT
_A_I2C1STAT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0206H
// union <unnamed> volatile __sfr _A_I2C1CON
_A_I2C1CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,019cH
// union <unnamed> volatile __sfr _A_OC5CON
_A_OC5CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0204H
// union <unnamed> volatile __sfr _A_I2C1BRG
_A_I2C1BRG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0202H
// union <unnamed> volatile __sfr _A_I2C1TRN
_A_I2C1TRN:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0200H
// union <unnamed> volatile __sfr _A_I2C1RCV
_A_I2C1RCV:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01aeH
// union <unnamed> volatile __sfr _A_OC8CON
_A_OC8CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01a8H
// union <unnamed> volatile __sfr _A_OC7CON
_A_OC7CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,01a2H
// union <unnamed> volatile __sfr _A_OC6CON
_A_OC6CON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,028cH
// union <unnamed> volatile __sfr _A_RSCON
_A_RSCON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0288H
// union <unnamed> volatile __sfr _A_TSCON
_A_TSCON:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0286H
// union <unnamed> volatile __sfr _A_DCISTAT
_A_DCISTAT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0284H
// union <unnamed> volatile __sfr _A_DCICON3
_A_DCICON3:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0282H
// union <unnamed> volatile __sfr _A_DCICON2
_A_DCICON2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0280H
// union <unnamed> volatile __sfr _A_DCICON1
_A_DCICON1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0264H
// union <unnamed> volatile __sfr _A_SPI2CON2
_A_SPI2CON2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0262H
// union <unnamed> volatile __sfr _A_SPI2CON1
_A_SPI2CON1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0260H
// union <unnamed> volatile __sfr _A_SPI2STAT
_A_SPI2STAT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0244H
// union <unnamed> volatile __sfr _A_SPI1CON2
_A_SPI1CON2:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0242H
// union <unnamed> volatile __sfr _A_SPI1CON1
_A_SPI1CON1:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0240H
// union <unnamed> volatile __sfr _A_SPI1STAT
_A_SPI1STAT:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0236H
// union <unnamed> volatile __sfr _A_U2RXREG
_A_U2RXREG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0234H
// union <unnamed> volatile __sfr _A_U2TXREG
_A_U2TXREG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0232H
// union <unnamed> volatile __sfr _A_U2STA
_A_U2STA:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0230H
// union <unnamed> volatile __sfr _A_U2MODE
_A_U2MODE:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0226H
// union <unnamed> volatile __sfr _A_U1RXREG
_A_U1RXREG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0224H
// union <unnamed> volatile __sfr _A_U1TXREG
_A_U1TXREG:
        DS 2

        ASEGN SFR_A:DATA:ROOT,0222H
// union <unnamed> volatile __sfr _A_U1STA
_A_U1STA:
        DS 2

        END
// 
// 2 840 words in segment CODE
//    34 words in segment CONST
//   820 bytes in segment SFR_A
// 
// 2 874 words of CODE memory
//     0 bytes of DATA memory (+ 820 bytes shared)
//
//Errors: none
//Warnings: none
